<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Portable Class Library Support for Noda Time</h3><p><a href="http://noda-time.blogspot.com/2013/04/noda-time-v110-released.html">Noda Time</a>, the advanced date/time library for .NET, is now available for Windows 8, Windows Phone 7, and Windows Phone 8. This version also offers a NuGet package and a comprehensive <a href="http://noda-time.googlecode.com/hg-history/1.1.x/docs/userguide/index.html">user’s guide</a>.</p> 
<p>Noda time divides its type system into two categories: local and global.</p> 
<p>Local types are not bound to any time zone, but may include a calendar component. This is similar to the DateTime class with the DateTimeKind set to unspecified. However, Noda Time also supports time only and date only values.</p> 
<p>Global types are based on the concept of the Instant. An Instant is a specific moment in the universal timeline. For compatibility with other systems, it is based on ticks since January 1st 1970, UTC (the Unix epoch). There are 10,000 ticks per millisecond, allowing for fairly high resolutions. Though it should be noted that some scientific instruments can measure time in ticks that are as small as 10<sup>-18</sup> seconds.</p> 
<p>Some classes such as ZonedDateTime will combine an Instant with time-zone information. Unlike DateTimeOffset, a ZonedDateTime contains the actual timezone information that needs to be presented to the user.</p> 
<p>This conversion chart from the documentation shows how the core types are related:</p> 
<p><img alt="" src="http://www.infoq.com/resource/news/2013/04/Noda-Time-1-1/en/resources/conversions.png;jsessionid=E272AD3DAAB07127402B687027F093F5" _href="img://conversions.png" _p="true" /></p> 
<p>Another advantage of Noda Time over the BCL is support for historical dates. The BCL’s DateTime class has a min value of year 1 CE. Noda Time supports approximately 27000 BCE, allowing it to be used in applications that need to compare timelines between ancient Egypt and China.</p> 
<p>Noda Time supports both the Windows and the Olson time zone databases. Since governments frequently change their time zone laws, Noda Time allows you to inject a more recent version of the database.</p> 
<p>In Noda Time, Period and Duration mean different things. A Duration is a fixed amount of time that can be measured in ticks. A Period is an abstract concept such as “one month” or “two weeks”. “The amount of elapsed time represented by a Period isn't fixed: a period of &quot;one month&quot; is effectively longer when added to January 1st than when added to February 1st, because February is always shorter than January.”</p> 
<p>Based on Java’s Joda Time, Noda Time was designed to correct many of the <a href="http://noda-time.blogspot.com/2011/08/what-wrong-with-datetime-anyway.html">problems in the existing .NET date/time classes</a>. For example, it allows developers to directly represent a date without a time component, eliminating the problem of accidentally changing “Midnight, Dec 10” into “11 pm, Dec 9” due to an unnecessary time zone conversion.</p> 
<p>To support testing, Noda Time offers an IClock interface. This is implemented by SystemClock and FakeClock, Once initialized, FakeClock can be manually incremented or set to auto-increment itself by a fixed amount.</p> 
<p>Noda Time is offered under the Apache License.</p> 
<p id="lastElm"></p><br><br><br><br><br><br></body></html>