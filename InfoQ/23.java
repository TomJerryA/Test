<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Object Oriented Design Principles and Functional Programming</h3><p>Object-oriented programming has a lot of well-established design principles, such as the <a href="http://en.wikipedia.org/wiki/SOLID">SOLID</a> principles, but when moving towards functional programming many developers don’t know how to use their existing design skills, <a href="http://insightfullogic.com/about/">Richard Warburton</a> recently <a href="https://skillsmatter.com/skillscasts/5070-twins-fp-and-oop">stated</a> in a presentation.<br /> On the same subject, <a href="http://blog.ploeh.dk/about.html">Mark Seemann</a> in a recent blog post <a href="http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/">writes</a> that if you take the SOLID principles to their extremes, you arrive at something that makes functional programming look quite attractive.</p>
<p>Richard, a member of the London <a href="https://java.net/projects/ljc-london-jug/pages/TheLJCJCPCommittee">JCP Committee</a>, in his presentation describes the SOLID principles as one example of well-established object oriented programming design principles, identified by <a href="http://en.wikipedia.org/wiki/Robert_c_martin">Robert C. Martin</a> in the early 2000s, and looks at each of the five principles trying to find a functional equivalent or at least something related on the function side.<br /> Richards experience is that although many developers don’t know how to use their existing design skills in functional design, functional programming can often help in implementing the SOLID principles and also that a functional mindset can actually help in achieving one important aspect of object-orientation, encapsulation.<br /> Richard’s conclusion is that all the solid principles have a functional equivalent. Existing design patterns don’t need to be thrown away; instead they can be improved by making them simpler or cleaner, or by utilizing existing knowledge in a simplified way.</p>
<p>Mark, a software architect and independent advisor, in his experience has found that the SOLID principles can lead to a style of design that makes functional programming quite attractive.<br /> When applying two of the SOLID principles, Single Responsibility Principle (<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a>) and Interface Segregation Principle (<a href="http://en.wikipedia.org/wiki/Interface_segregation_principle">ISP</a>), you often end up having a code base with many fine-grained interfaces and classes each having a single method.<br /> Mark’s conclusion is that if applying SOLID principles repeatedly leads to these small classes with a single method, then the functionality can be modelled as behaviour with data, at which point it may be time to move to a functional programming language like F#.</p><br><br><br><br><br><br></body></html>