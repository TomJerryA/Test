<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>I’d Rather Be Coding – Writing Things Down</h3><p>Developers really hate spending time writing, unless what they are writing is code. They have good reasons for this distaste, however.</p>
<ul> 
 <li>If it’s not code, it can’t be run through a compiler to make sure it makes sense.</li> 
 <li>If it’s not code, it doesn’t get executed, so it may never be used to accomplish anything.</li> 
 <li>If it’s not code, it can’t have tests against it, so there’s no way to prove that it is truthful and correct.</li> 
 <li>Agile even de-emphasized documentation in the Manifesto: <i>Working software over comprehensive documentation.</i></li> 
</ul>
<p>So is all documentation bad? I think you know the answer.</p>
<h2>Why Write Things Down?</h2>
<p>There are many times in the life of a project when a little documentation goes a long way. But to get those benefits, developers must take time away from coding to write things down.&nbsp; Here are some examples where I think they will find the juice was worth the squeeze.</p>
<h2>Remembering Why You Made Decisions</h2>
<p>If a project goes on much longer than a few months, there will be times when decisions are made that change the course of the development effort. It may be a decision to use (or explicitly avoid) a particular tool, framework, or platform.&nbsp; It may be a decision to write tests a certain way, or not write them at all for some cases.&nbsp; It may be a decision to throw away all the practices you would normally engage in and do things in a completely different way.&nbsp; These decisions will happen, and they tend to last.</p>
<p>Someday, long after these decisions were made, someone on the team (usually a new addition, they’re so annoying, aren’t they?) will ask “Why are we doing this?” What answer will they receive?&nbsp;</p>
<p>If one or more people on the team have good memories and have been with the project long enough, maybe the new team member will get the actual reason.&nbsp; But in most cases, I’m afraid the answer will be, “Because we’ve always done it that way.”&nbsp; That is not an answer anyone really wants to hear.</p>
<div id="lowerFullwidthVCR"></div>
<p>Remember that if you receive an answer like that, you always have a choice. You can keep doing things the way you’ve always done them, because you’re used to the pain, or because it’s safer, since you don’t remember why you started doing them that way.&nbsp; Alternatively, you can make a change and hope that you’ve considered all the possible repercussions.&nbsp; After all, what could go wrong? Well, as it turns out… plenty. For example:</p>
<ul> 
 <li>You could go down a path that has already been explored and rejected, wasting precious project time and effort.</li> 
 <li>You could frustrate your customer by making a change that is in conflict with the way the business needs the system to work.</li> 
 <li>You could violate a compliance issue that was being mitigated by the way you were doing it, and get yourself and/or your customer in legal trouble.</li> 
</ul>
<p>All of these consequences could be avoided by just taking the time to write things down. When your team makes a decision that changes the way you work, write down the date you made the decision and the logic behind it (if you’re good, you might even have a process for making the decision that would produce artifacts you can point to).&nbsp; Then later, when someone asks the question “why you’re doing things that way or using that tool”, you can answer their question with confidence.</p>
<h2>Preparing For Automating An Annoying Process</h2>
<p>Developers frequently find processes they want to automate.&nbsp; These are the ones that they repeat regularly and which waste precious development time. However, all too often I come across manual processes that are performed infrequently (maybe once every few weeks), and involve a series of steps that must be followed in a specific order.&nbsp; If no one bothers to write this process down, there’s a good chance it will be performed incorrectly or steps will be missed, wasting even more time.&nbsp; Furthermore, there’s no practical way to automate a process without first writing down the steps.</p>
<p>If you find yourself performing a task with multiple steps – and there’s a good chance you’ll have to do it again, write the steps down. This will save time when the next person has to perform the process manually, and will prepare you for the day when you finally get so frustrated that you automate it.</p>
<h2>Covering Your Posterior</h2>
<p>On Agile projects, as the manifesto describes, we value face-to-face communication.&nbsp; This kind of communication about requirements is the most optimal, as all of the information can be gathered, both verbal and non-verbal.&nbsp; However, there are times when even these words can be misinterpreted, or more likely, misremembered.&nbsp; This can happen on either side: the developer could think they heard something that the customer didn’t say, or the customer could forget (I’m going to assume this mainly happens unintentionally) that he or she told the developer to go in a particular direction. This can result in the developer later having to insist that they were told to take some action, with no way to back up whether or not this is true. In this case, my experience is that the customer almost always wins, and the developer walks away feeling frustrated and possibly abused.</p>
<p>That doesn’t sound like what developers really want to happen. Let’s see, how could we avoid this situation? I don’t know…maybe we could try writing things down?&nbsp; All it would take is a follow-up email after that phone call or face-to-face meeting that describes in the developer’s words what they think they were told to do.&nbsp; This doesn’t require much effort, and it gives a great audit trail later when the question comes about why the system was developed the way that it was.</p>
<h2>Ideas For Easy Documentation</h2>
<p>Documentation is unnatural for most people, and downright painful for most developers. Yet, as illustrated above, it has value. Here are some ideas for making it less like sharp-stick-eye-poking:</p>
<ul> 
 <li><b>Do it right away</b><b>.</b><b> </b>Many of us like to procrastinate when it comes to the stuff we don’t like to do. Don’t do it with this kind of documentation.&nbsp; It’s best when it’s fresh, and it comes easier when you don’t have to stop and remember.&nbsp; As soon as you have the conversation, find a workstation or a mobile device and write down the summary.</li> 
 <li><b>Find good tools to help.</b><b> </b>Speaking of mobile devices, there are just so many great tools out there now for writing these things down. Back in the day, we had to go find the right place on a wiki and use some non-intuitive markup language to document even the simplest things. Now, there are the ubiquitous Evernote and OneNote, and so many like them; there are blogs and microblogs (is Twitter out of the question for your project?); and if all else fails, there’s email.&nbsp; Find your favorite.</li> 
 <li><b>Keep it short.</b><b> </b>It doesn’t have to be a novel every time you document a discussion.&nbsp; Even if you can’t use Twitter, pretend that you are by being succinct and to the point. What can you say in 140 characters that is descriptive enough to be useful but short enough to get the point across quickly?&nbsp; The likelihood that a document will ever be read more than once is inversely proportional to its size.</li> 
 <li><b>Put it where you can find it again.</b><b> </b>Writing things down doesn’t help you if you can’t find what you wrote down when you need it.&nbsp; Put it somewhere that will be the most obvious place to look (e.g. in an already established project documentation repository, in the same place you put your source code, in an email to everyone on the team), and ideally where it’s electronically searchable.&nbsp; Don’t just write it on the whiteboard in your team area (although you might want to do this in addition to putting it somewhere for the long-term). You might try putting it several places and see where it gets found… you could even collect metrics on where content was found to decide on which is the best place to store it!<b> </b>I know, this might sound like crazy talk to some.</li> 
</ul>
<h2>It Needs To Be a Habit</h2>
<p>As I said, documenting these little occurrences in your everyday project life is not going to be natural; you’re going to have to force it.&nbsp; I know you’d rather be coding, but make yourself do it; I promise it’s worth the effort.&nbsp; If you make yourself jump right to your note-taking system the moment something happens, pretty soon it will be second nature.&nbsp; Then you’ll wonder how you ever got by without it.</p>
<h2>About the Author</h2>
<p><strong><img src="http://www.infoq.com/resource/articles/id-rather-be-coding-writing-things-down/en/resources/Nate-McKie.png" vspace="3" hspace="3" align="left" alt="" _href="img://Nate-McKie.png" _p="true" />Nate McKie</strong> is co-founder and CTO of <a href="http://www.asynchrony.com">Asynchrony</a>, an IT consulting firm in St. Louis, Missouri. Nate spearheaded the effort to make Asynchrony a leading practitioner of Agile techniques and ideas and to spread the disciplines of quality code and rapid implementation throughout its commercial and government customer base. In his role, Nate drives the technical aspects of the company and teaches Agile techniques to clients. You can follow Asynchrony on Twitter via @asynchrony and Nate McKie via @natemckie.</p><br><br><br><br><br><br></body></html>