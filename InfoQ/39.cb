<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Javascript: Desenvolvendo Componentes Modulares</h3><p>Embora a maioria das aplica&ccedil;&otilde;es web hoje em dia utilizem uma grande quantidade de JavaScript, mantendo o foco na funcionalidade do lado do cliente, a robustez e sustentabilidade continuam sendo um grande desafio.</p>
<p>Ainda que os princ&iacute;pios b&aacute;sicos como separa&ccedil;&atilde;o de interesses ou <a href="http://pt.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> serem adquiridos de outras linguagens e ecossistemas, muitos desses princ&iacute;pios s&atilde;o muitas vezes ignorados quando se trata de partes do lado do navegador de uma aplica&ccedil;&atilde;o.</p>
<p>Isto &eacute; em parte devido &agrave; <a href="http://www.jwz.org/blog/2010/10/every-day-i-learn-something-new-and-stupid/#comment-1021">desafiante hist&oacute;ria</a> do JavaScript, uma linguagem que por muito tempo lutou para ser levada a s&eacute;rio.</p>
<p>Talvez o pensamento mais importante seja os distintos cliente-servidor: Embora exista numerosas elabora&ccedil;&otilde;es nos estilos arquiteturais explicando como manipular essas distin&ccedil;&otilde;es (por exemplo, <a href="http://roca-style.org">ROCA</a>), muitas vezes h&aacute; uma falta de orienta&ccedil;&atilde;o concreta sobre como implementar esses conceitos.&sup1;</p>
<p>Isso frequentemente leva a um c&oacute;digo altamente procedural e comparativamente desestruturado aumentando o custo do front-end. Embora seja &uacute;til o JavaScript e o navegador permitirem esta abordagem direta e sem media&ccedil;&atilde;o incentivando e simplificando explora&ccedil;&otilde;es iniciais e reduzindo sobrecarga, esse estilo leva rapidamente a implementa&ccedil;&otilde;es que s&atilde;o dif&iacute;ceis de manter.</p>
<p>Esse artigo apresentar&aacute; um exemplo de evolu&ccedil;&atilde;o de um widget simples a partir de um c&oacute;digo bastante desestruturado a um componente reutiliz&aacute;vel.</p>
<div id="lowerFullwidthVCR"></div>
<p><strong>Filtrando Contratos</strong></p>
<p>A proposta deste <a href="http://fnd.github.io/contacts-filter/">widget de exemplo</a> &eacute; filtrar uma lista de contatos por nome. O resultado final incluindo o hist&oacute;rico de evolu&ccedil;&atilde;o &eacute; fornecido no <a href="https://github.com/FND/contacts-filter">reposit&oacute;rio GitHub</a>. Os leitores s&atilde;o encorajados a rever os <a href="https://github.com/FND/contacts-filter/commits/master">commits</a> e comentar l&aacute;.</p>
<p>Em conformidade com os <a href="http://alistapart.com/article/understandingprogressiveenhancement">princ&iacute;pios</a> da <a href="http://jakearchibald.com/2013/progressive-enhancement-still-important/">melhoria progressiva</a>, come&ccedil;amos com uma estrutura b&aacute;sica HTML descrevendo os nossos dados, aqui usando o microformato <a href="http://microformats.org/wiki/h-card">h-card</a> para tirar proveito de sem&acirc;nticas estabelecidas, o que ajuda a fornecer um contrato significativo:</p>
<pre><p><i>&lt;!-- index.html --&gt;</i> <br /><br /> &lt;ul&gt;<br />    &lt;li class=&quot;h-card&quot;&gt;  <br />        &lt;img src=&quot;http://example.org/jake.png&quot; alt=&quot;avatar&quot; class=&quot;u-photo&quot;&gt;    <br />        &lt;a href=&quot;http://jakearchibald.com&quot; class=&quot;p-name u-url&quot;&gt;Jake Archibald&lt;/a&gt;  <br />        (&lt;a href=&quot;mailto:jake@example.com&quot; class=&quot;u-email&quot;&gt;e-mail&lt;/a&gt;)    <br />   &lt;/li&gt;    <br />   &lt;li class=&quot;h-card&quot;&gt;  <br />        &lt;img src=&quot;http://example.org/christian.png&quot; alt=&quot;avatar&quot; class=&quot;u-photo&quot;&gt;    <br />        &lt;a href=&quot;http://christianheilmann.com&quot; class=&quot;p-name u-url&quot;&gt;Christian Heilmann&lt;/a&gt;  <br />        (&lt;a href=&quot;mailto:christian@example.com&quot; class=&quot;u-email&quot;&gt;e-mail&lt;/a&gt;)    <br />   &lt;/li&gt;    <br />   &lt;li class=&quot;h-card&quot;&gt;  <br />        &lt;img src=&quot;http://example.org/john.png&quot; alt=&quot;avatar&quot; class=&quot;u-photo&quot;&gt;    <br />        &lt;a href=&quot;http://ejohn.org&quot; class=&quot;p-name u-url&quot;&gt;John Resig&lt;/a&gt;    <br />        (&lt;a href=&quot;mailto:john@example.com&quot; class=&quot;u-email&quot;&gt;e-mail&lt;/a&gt;)  <br />   &lt;/li&gt;    <br />   &lt;li class=&quot;h-card&quot;&gt;    <br />        &lt;img src=&quot;http://example.org/nicholas.png&quot; alt=&quot;avatar&quot; class=&quot;u-photo&quot;&gt;    <br />        &lt;a href=&quot;http://www.nczonline.net&quot; class=&quot;p-name u-url&quot;&gt;Nicholas Zakas&lt;/a&gt;    <br />        (&lt;a href=&quot;mailto:nicholas@example.com&quot; class=&quot;u-email&quot;&gt;e-mail&lt;/a&gt;)   <br />   &lt;/li&gt;    <br /> &lt;/ul&gt;</p></pre>
<p>Observe que n&atilde;o &eacute; relevante se a estrutura DOM &eacute; baseada no HTML fornecido pelo servidor ou gerado por outro componente, desde que nosso componente possa confiar neste estrutura (que essencialmente constitui uma estrutura DOM do form <strong>[{ photo, website, name, e-mail }]</strong> ) para estar presente na inicializa&ccedil;&atilde;o. Isto assegura o baixo acoplamento e evita amarrar-nos em qualquer sistema particular.</p>
<p>Com isso no lugar, podemos come&ccedil;ar a implementar o nosso widget. A primeira etapa &eacute; prover um input field para o usu&aacute;rio informar o nome desejado. Isto n&atilde;o &eacute; parte com contrato do DOM, mas inteiramente a responsabilidade de nosso widget e assim injetado dinamicamente (afinal, sem o nosso widget n&atilde;o haveria nenhum objetivo em ter tal campo em tudo).</p>
<pre><p><em>// main.js</em><br /><br /> <strong>var</strong> contacts = jQuery(&quot;ul.contacts&quot;);    <br /> jQuery('&lt;input type=&quot;search&quot; /&gt;').insertBefore(contacts);</p></pre>
<p>(Estamos usando <a href="http://jquery.com">jQuery</a> aqui meramente por conveni&ecirc;ncia e pelo fato dele ser amplamente conhecido; o mesmo princ&iacute;pio se aplica independente de qual seja a biblioteca de manipula&ccedil;&atilde;o do DOM, se alguma for usada.)</p>
<p>O arquivo de script, juntamente com a depend&ecirc;ncia do JQuery &eacute; referenciada no <a href="http://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-6-move-scripts-bottom-7200.html">final</a> do arquivo HTML.</p>
<p>A seguir adicionamos a funcionalidade desejada (ocultando entradas que n&atilde;o correspondem ao input) para este campo criado recentemente:</p>
<pre><p><em>// main.js</em><br /><br /> <strong>var</strong> contacts = jQuery(&quot;ul.contacts&quot;);    <br /> jQuery('&lt;input type=&quot;search&quot; /&gt;').insertBefore(contacts).on(&quot;keyup&quot;, onFilter);    <br /><br />  <strong>function</strong> onFilter(ev) {    <br />     <strong>var</strong> filterField = jQuery(this);   <br />     <strong>var</strong> contacts = filterField.next();    <br />     <strong>var</strong> input = filterField.val();<br /> <br />     <strong>var</strong> names = contacts.find(&quot;li .p-name&quot;);<br />     names.each(<strong>function</strong>(i, node) {    <br />         <strong>var</strong> el = jQuery(node);    <br />         <strong>var</strong> name = el.text();    <br />         <br />         <strong>var</strong> match = name.indexOf(input) === 0;    <br />         <strong>var</strong> contact = el.closest(&quot;.h-card&quot;);    <br />         <strong>if</strong>(match) {    <br />             contact.show();    <br />         } <strong>else</strong> {   <br />              contact.hide();    <br />         }    <br />    });    <br /> }</p></pre>
<p>(Referenciando uma fun&ccedil;&atilde;o separada ao inv&eacute;s de definir uma fun&ccedil;&atilde;o an&ocirc;nima interna frequentemente torna os <a href="http://callbackhell.com">callbacks mais gerenci&aacute;veis</a>.)</p>
<p>Observe que esse manipulador de eventos depende de um ambiente DOM particular do elemento de disparo desse evento (o mapeamento para o contexto de execu&ccedil;&atilde;o se encontra <a href="http://www.quirksmode.org/js/this.html">aqui</a>). A partir desse elemento percorremos o DOM para acessar a lista de contatos e encontrar todos os elementos que cont&ecirc;m um nome dentro (como definido nas sem&acirc;nticas do microformato). Quando um nome n&atilde;o come&ccedil;a com a entrada atual, escondemos o respectivo elemento do cont&ecirc;iner (percorrendo ascendentemente novamente), caso contr&aacute;rio tornamos o mesmo vis&iacute;vel.</p>
<p><strong>Testando</strong></p>
<p>J&aacute; temos a funcionalidade b&aacute;sica que foi pedida (ent&atilde;o &eacute; um bom momento para solidificar que escrevendo um teste2). Neste exemplo usaremos o <a href="http://qunitjs.com">QUnit</a>.</p>
<p>Iniciamos com uma <a href="https://github.com/FND/contacts-filter/blob/db5b59ab1fb333c867b2f6ab1949ec78faad0e2a/test/index.html">p&aacute;gina HTML m&iacute;nima</a> como ponto de partida para nossa su&iacute;te de testes. Evidente que tamb&eacute;m precisamos referenciar nosso c&oacute;digo com suas depend&ecirc;ncias (neste caso, jQuery), assim como na p&aacute;gina HTML que criamos anteriormente.</p>
<pre><p><em>&lt;!-- test/index.html --&gt;</em><br /><br />  &lt;div id=&quot;qunit&quot;&gt;&lt;/div&gt;      <br />  &lt;div id=&quot;qunit-fixture&quot;&gt;&lt;/div&gt; <br />         <br />  &lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;      <br />  &lt;script src=&quot;../main.js&quot;&gt;&lt;/script&gt; <br />         <br />  &lt;script src=&quot;qunit.js&quot;&gt;&lt;/script&gt;</p></pre>
<p>Com a infraestrutura no lugar, podemos acrescentar alguns dados de exemplo (uma lista de h-cards), por exemplo, com a mesma estrutura que iniciamos (para o elemento <strong>#qunit-fixture</strong>). Este elemento &eacute; reiniciado a cada teste, fornecendo um cen&aacute;rio limpo e <a href="http://qunitjs.com/cookbook/#keeping-tests-atomic">evitando efeitos colaterais</a>.</p>
<p>O <a href="https://github.com/FND/contacts-filter/blob/173048f76c817e0688b25281461e2949fa802b32/test/test_filtering.js">primeiro teste</a> assegura que o widget foi inicializado corretamente e que o filtro funciona como o esperado, escondendo os elementos DOM que n&atilde;o correspondem &agrave; entrada simulada:</p>
<pre>

<p><em>// test/test_filtering.js</em><br /><br /> QUnit.module(&quot;contacts filtering&quot;, {  <br />     setup: <strong>function</strong>() { <em>// cache dos elementos comuns no m&oacute;dulo de objeto</em>   <br />         <strong>this</strong>.fixtures = jQuery(&quot;#qunit-fixture&quot;);    <br />         <strong>this</strong>.contacts = jQuery(&quot;ul.contacts&quot;, <strong>this</strong>.fixtures);    <br />     }    <br /> });    <br /><br />   QUnit.test(&quot;filtering by initials&quot;, <strong>function</strong>() {    <br />     <strong>var</strong> filterField = jQuery(&quot;input[type=search]&quot;, <strong>this</strong>.fixtures);    <br />     QUnit.strictEqual(filterField.length, 1);  <br /> <br />     <strong>var</strong> names = extractNames(<strong>this</strong>.contacts.find(&quot;li:visible&quot;));    <br />     QUnit.deepEqual(names, [&quot;Jake Archibald&quot;, &quot;Christian Heilmann&quot;,    <br />             &quot;John Resig&quot;, &quot;Nicholas Zakas&quot;]);    <br /> <br />     filterField.val(&quot;J&quot;).trigger(&quot;keyup&quot;); <em>// simula a entrada do usu&aacute;rio</em><br />     <strong>var</strong> names = extractNames(<strong>this</strong>.contacts.find(&quot;li:visible&quot;));    <br />     QUnit.deepEqual(names, [&quot;Jake Archibald&quot;, &quot;John Resig&quot;]);    <br /> });    <br /> <br /> <strong>function</strong> extractNames(contactNodes) {    <br />     <strong>return</strong> jQuery.map(contactNodes, function(contact) {    <br />        <strong>return</strong> jQuery(&quot;.p-name&quot;, contact).text();    <br />     });    <br /> }</p></pre>
<p>(<a href="http://api.qunitjs.com/strictEqual/">strictEqual</a> evita a convers&atilde;o de tipos no Javascript, evitando <a href="http://www.jslint.com/lint.html#eqeq">erros sutis</a>.)</p>
<p>Ap&oacute;s alterarmos nossa su&iacute;te de testes com uma refer&ecirc;ncia a este arquivo de teste (a seguir a refer&ecirc;ncia QUnit), abrindo a su&iacute;te no navegador deve nos informar que todos os testes passaram:</p>
<p><img _p="true" _href="img://FigA.png" alt="" src="http://www.infoq.com/resource/articles/modular-javascript/pt/resources/FigA.png" /></p>
<p><strong>Anima&ccedil;&otilde;es</strong></p>
<p>Embora nosso widget funcione razoalvemente bem, ele ainda n&atilde;o &eacute; muito atraente, ent&atilde;o adicionemos algumas anima&ccedil;&otilde;es simples. O jQuery torna isso muito f&aacute;cil: temos somente que substituir o <a href="http://api.jquery.com/show">show</a> e<strong> </strong><a href="http://api.jquery.com/hide">hide</a> pelo<strong> </strong><a href="http://api.jquery.com/slideUp">slideUp</a> e<strong> </strong><a href="http://api.jquery.com/slideDown">slideDown</a>, respectivamente. Isso melhora significantemente a experi&ecirc;ncia do usu&aacute;rio em nosso modesto exemplo.</p>
<p>Entretanto, ao executar novamente a su&iacute;te de testes, somos informados que o filtro n&atilde;o funcionou, com todos os quatro contatos ainda sendo exibidos:</p>
<p><img _p="true" _href="img://FigB.png" alt="" src="http://www.infoq.com/resource/articles/modular-javascript/pt/resources/FigB.png" /></p>
<p>Isto ocorreu devido &agrave;s anima&ccedil;&otilde;es serem ass&iacute;ncronas (como nas opera&ccedil;&otilde;es AJAX), portanto os resultados da filtragem s&atilde;o verificados antes da anima&ccedil;&atilde;o ser conclu&iacute;da. Podemos usar o <a href="http://api.qunitjs.com/category/async-control/">asyncTest</a> do QUnit para adiar essa verifica&ccedil;&atilde;o:</p>
<pre><p><em>// test/test_filtering.js</em>    <br /><br />     QUnit.asyncTest(&quot;filtering by initials&quot;, 3, <strong>function</strong>() { // aguarda 3 verifica&ccedil;&otilde;es    <br />     <em>// ...</em>  <br />      filterField.val(&quot;J&quot;).trigger(&quot;keyup&quot;); <em>// simula a entrada do usu&aacute;rio</em><br />      var contacts = <strong>this</strong>.contacts;    <br />      setTimeout(<strong>function</strong>() { <em>// adia a verifica&ccedil;&atilde;o at&eacute; a anima&ccedil;&atilde;o terminar</em><br />          <strong>var</strong> names = extractNames(contacts.find(&quot;li:visible&quot;));    <br />          QUnit.deepEqual(names, [&quot;Jake Archibald&quot;, &quot;John Resig&quot;]);    <br />          QUnit.start(); <em>// retoma a execu&ccedil;&atilde;o dos testes</em><br />      }, 500);    <br /> });</p></pre>
<p>Uma vez que verificar a su&iacute;te de testes no navegador pode tornar-se tedioso, podemos usar o <a href="http://phantomjs.org">PhantomJS</a>, um navegador sem tela, juntamente com o <a href="https://github.com/jquery/qunit/tree/master/addons/phantomjs">QUnit runner</a> para automatizar o processo e exibir os resultados no console:</p>
<pre><p>$ phantomjs runner.js test/index.html   Took 545ms to run 3 tests. 3 passed, 0 failed.</p>
</pre>
<p>Isso tamb&eacute;m faz com que seja f&aacute;cil de automatizar testes atrav&eacute;s de integra&ccedil;&atilde;o cont&iacute;nua. (Embora, claro, n&atilde;o cubra problemas cross-browser j&aacute; que o PhantomJS usa apenas WebKit. Entretanto, existem navegadores sem tela, o <a href="http://slimerjs.org">Gecko</a> para o Firefox e o <a href="http://triflejs.org">Trident</a> para o Internet Explorer.)</p>
<p><strong>Conten&ccedil;&atilde;o</strong></p>
<p>At&eacute; o momento nosso c&oacute;digo &eacute; funcional, por&eacute;m n&atilde;o muito elegante: para come&ccedil;ar, ele bagun&ccedil;a o namespace global com duas vari&aacute;veis - <strong>contacts</strong> e <strong>onFilter</strong> - uma vez que os navegadores n&atilde;o executam arquivos JavaScript em escopos isolados. No entanto, podemos evitar vazamentos para o escopo global. Como as fun&ccedil;&otilde;es s&atilde;o os &uacute;nicos mecanismos de escopo no JavaScript, simplesmente criamos uma fun&ccedil;&atilde;o an&ocirc;nima em torno de todo arquivo e em seguida a chamamos na parte inferior:</p>
<pre><p>(<strong>function</strong>() {  <br /><br /> <strong>var</strong> contacts = jQuery(&quot;ul.contacts&quot;);    <br /> jQuery('&lt;input type=&quot;search&quot; /&gt;').insertBefore(contacts).on(&quot;keyup&quot;, onFilter);    <br /> <br /> <strong>function</strong> onFilter(ev) {    <br />     // ...   <br /> }<br /> <br /> }());</p></pre>
<p>Isto &eacute; conhecido como invoca&ccedil;&atilde;o imediata da express&atilde;o da fun&ccedil;&atilde;o, do ingl&ecirc;s <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">immediately invoked function expression</a> (IIFE).</p>
<p>Efetivamente, agora temos vari&aacute;veis privadas dentro de um m&oacute;dulo independente.</p>
<p>Podemos dar um passo adiante para garantir que n&atilde;o seja poss&iacute;vel introduzir novas vari&aacute;veis ​​globais por esquecer uma declara&ccedil;&atilde;o <strong>var</strong>. Para isso ativamos o <a href="http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/">strict mode</a>, que protege contra uma s&eacute;rie de armadilhas comuns3:</p>
<pre><p>(<strong>function</strong>() {  <br /> <br /> &quot;use strict&quot;; <em>// obj: deve ser a primeira declara&ccedil;&atilde;o dentro da fun&ccedil;&atilde;o</em><br />   <br /> <em>// ... </em> <br />   <br /> }());</p></pre>
<p>Especificando isto dentro de um encapsulador IIFE nos assegura que se aplica somente aos m&oacute;dulos em que foi explicitamente solicitado.</p>
<p>Uma vez que temos vari&aacute;veis em m&oacute;dulos locais, podemos usar isto tamb&eacute;m para introduzir apelidos locais por conveni&ecirc;ncia, por exemplo em nossos testes:</p>
<pre><p><em>// test/test_filtering.js</em><br /><br /> (<strong>function</strong>($) {<br /> <br /> &quot;use strict&quot;;<br /> <br /> <strong>var</strong><span> strictEqual = QUnit.strictEqual;<br /> <br /> <em>// ...</em><br /> <br /> <strong>var</strong> filterField = $(&quot;input[type=search]&quot;, <strong>this</strong>.fixtures);<br /> strictEqual(filterField.length, 1);<br /> <br /> }(jQuery)); </span></p></pre>
<p>Agora temos dois atalhos - <strong>$</strong> e <strong>strictEqual,</strong> sendo a primeira definida atrav&eacute;s de um argumento IIFE - que s&atilde;o v&aacute;lidas apenas dentro deste m&oacute;dulo.</p>
<p><strong>API do Widget</strong></p>
<p>Embora nosso c&oacute;digo esteja muito bem estruturado agora, o widget &eacute; automaticamente inicializado, por exemplo, sempre que o c&oacute;digo &eacute; carregado pela primeira vez. &Eacute; dif&iacute;cil explicar as raz&otilde;es e prever a (re) inicializa&ccedil;&atilde;o din&acirc;mica, por exemplo, em elementos diferentes ou rec&eacute;m-criados.</p>
<p>Corrigir isto simplesmente requer colocar o c&oacute;digo de inicializa&ccedil;&atilde;o existente dentro da fun&ccedil;&atilde;o:</p>
<pre><p><em>// widget.js</em><br /><br /> window.createFilterWidget = <strong>function</strong>(contactList) {<br />     $('&lt;input type=&quot;search&quot; /&gt;'<span>).insertBefore(contactList).<br /> on(</span>&quot;keyup&quot;<span>, onFilter);<br /> }; </span></p></pre>
<p>Desta maneira desacoplamos a funcionalidade do widget de seu ciclo de vida em sua respectiva aplica&ccedil;&atilde;o. Assim, a responsabilidade pela inicializa&ccedil;&atilde;o &eacute; deslocada para a aplica&ccedil;&atilde;o (ou em nosso caso, a su&iacute;te de testes) o que geralmente significa um pouquinho de &quot;c&oacute;digo colado&quot; para gerenciar os widgets dentro de contexto da aplica&ccedil;&atilde;o.</p>
<p>Observe que estamos anexando explicitamente nossa fun&ccedil;&atilde;o para a global <strong>window</strong>, o que &eacute; a maneira mais simples de tornar essa funcionalidade acess&iacute;vel fora de nosso IIFE. Entretanto, isso acopla as partes internas do m&oacute;dulo para um particular contexto impl&iacute;cito: <strong>window</strong> pode n&atilde;o ser sempre o objeto global (por exemplo, <a href="http://nodejs.org/api/globals.html#globals_global">no Node.js</a>).</p>
<p>Uma abordagem mais elegante &eacute; ser explicito sobre quais partes est&atilde;o expostas para o exterior e agrupar as informa&ccedil;&otilde;es em um s&oacute; lugar. Para isso podemos tirar vantagem de nosso IIFE mais uma vez: Uma vez que &eacute; s&oacute; uma fun&ccedil;&atilde;o, simplesmente devolver as partes p&uacute;blicas (por exemplo, nossa API na parte inferior e atribuir esse valor de retorno para uma vari&aacute;vel no escopo externo (global)):</p>
<pre><p><em>// widget.js</em><br /><br /> <strong>var</strong> CONTACTSFILTER = (<strong>function</strong>($) {<br /> <br /> <strong>function</strong><span> createFilterWidget(contactList) {<br /> <em>// ...</em><br /> }<br /> <br /> <em>// ...</em><br /> <br /> <strong>return</strong> createFilterWidget;<br /> <br /> }(jQuery)); </span></p></pre>
<p>Isto &eacute; conhecido como padr&atilde;o de revela&ccedil;&atilde;o de m&oacute;dulo, do ingl&ecirc;s <a href="http://christianheilmann.com/2007/08/22/again-with-the-module-pattern-reveal-something-to-the-world/">revealing module pattern</a>. O uso de mai&uacute;sculas &eacute; uma conven&ccedil;&atilde;o para destacar vari&aacute;veis ​​globais.</p>
<p><strong>Encapsulando o Estado</strong></p>
<p>Neste ponto, o nosso widget &eacute; funcional e razoavelmente estruturado, como uma API adequada. Entretanto, introduzir funcionalidades adicionais do mesmo modo (com base puramente na combina&ccedil;&atilde;o de fun&ccedil;&otilde;es mutuamente independentes) pode facilmente levar ao caos. Isto &eacute; particularmente relevante para componentes UI no qual o estado &eacute; um fator importante.</p>
<p>Em nosso exemplo, queremos deixar os usu&aacute;rios decidirem se o filtro deve ser case-sensitive, ent&atilde;o <a href="https://github.com/FND/contacts-filter/compare/c4f79f0078a1631538fa6af091cd63ddbfd96617%5E...cbe1d73f45a728c9abd1dcaa33bc2f0a19c2951a">adicionamos um checkbox e estendemos nosso manipulador de eventos</a> de acordo:</p>
<pre><p><em>// widget.js</em><br /><br /> <strong>var</strong> caseSwitch = $('&lt;input type=&quot;checkbox&quot; /&gt;');<br /> <br /> <em>// ...</em><br /> <br /> <strong>function</strong><span> onFilter(ev) {<br /> <br /> <strong>var</strong><span> filterField = $(this);<br /> <em> // ...</em><br /> <strong>var</strong> caseSwitch = filterField.prev().find(&quot;input:checkbox&quot;);<br /> <strong>var</strong> caseSensitive = caseSwitch.prop(&quot;checked&quot;);<br /> <br /> <strong>if</strong><span>(!caseSensitive) {<br /> input = input.toLowerCase();<br /> }<br /> <em>// ...</em><em> }</em></span></span></span></p></pre>
<p>Isso aumenta ainda mais a depend&ecirc;ncia do contexto DOM em particular, a fim de reconectar-se a elementos do widget dentro do manipulador de eventos. Uma op&ccedil;&atilde;o &eacute; mover essa descoberta para uma fun&ccedil;&atilde;o separada que determina as partes do componente no contexto. Uma op&ccedil;&atilde;o mais convencional &eacute; a abordagem orientada a objeto. (O JavaScript faz uso tanto da programa&ccedil;&atilde;o orientada a objetos como funcional, permitindo o desenvolvedor escolher qual estilo &eacute; melhor para uma dada tarefa.)</p>
<p>Assim podemos <a href="https://github.com/FND/contacts-filter/compare/b45c6ff9263ee1121c8e79a2cdb0156cc13e4d95%5E...3b827086eeec47c902167a6c9a915dea4d8ef5a9">reescrever nosso widget</a> para gerar uma inst&acirc;ncia que mant&eacute;m o controle de todos os seus componentes:</p>
<pre><p><em>// widget.js</em><br /><br /> <strong>function</strong><span> FilterWidget(contactList) {<br /> <strong>this</strong><span>.contacts = contactList;<br /> <strong>this</strong>.filterField = $('&lt;input type=&quot;search&quot; /&gt;'<span>).insertBefore(contactList);<br /> <strong>this</strong>.caseSwitch = $('&lt;input type=&quot;checkbox&quot; /&gt;'<span>);<br /> }</span></span></span></span></p></pre>
<p>Isso muda ligeiramente a API, mas significantemente: Ao inv&eacute;s de chamarmos, <strong>createFilterWidget(...)</strong>, agora inicializamos nosso widget com <strong>new FilterWidget(...)</strong> - o qual invoca o construtor, no contexto de um objeto rec&eacute;m-criado (<strong>this)</strong>. A fim de destacar a necessidade de o novo operador, os nomes do construtor s&atilde;o capitalizados por conven&ccedil;&atilde;o (bem como nomes de classes em outras linguagens).5</p>
<p>Claro que tamb&eacute;m precisamos migrar a funcionalidade para este novo esquema - iniciando com um m&eacute;todo para esconder os contatos com base na entrada dada, que se assemelha a funcionalidade anteriormente encontrada em <strong>onFilter</strong>:</p>
<pre><p><em>// widget.js</em><br /><br /> FilterWidget.prototype.filterContacts = <strong>function</strong><span>(value) {<br /> var names =</span> <strong>this</strong>.contacts.find(&quot;li .p-name&quot;);<br />     <strong>var</strong> self = <strong>this</strong>;<br />     names.each(<strong>function</strong><span>(i, node) {<br /> </span><strong>var</strong><span> el = $(node);<br /> </span><strong>var</strong><span> name = el.text();<br /> </span><strong>var</strong> contact = el.closest(&quot;.h-card&quot;);<br /> <br />         <strong>var</strong><span> match = startsWith(name, input, self.caseSensitive);<br /> </span><strong>if</strong><span>(match) {<br /> contact.show();<br /> }</span><strong>else</strong><span> {<br /> container.hide();<br /> }<br /> });<br /> } </span></p></pre>
<p>(Aqui <strong>self</strong> &eacute; usado para tornar <strong>this</strong> acess&iacute;vel dentro do escopo de <strong>cada</strong> callback, na qual tem seu pr&oacute;prio <strong>this</strong> e assim n&atilde;o consegue acessar o escopo exterior diretamente. Desde modo referenciando <strong>self</strong> para o escopo interior criamos uma <a href="http://pt.wikipedia.org/wiki/Clausura_%28ci%C3%AAncia_da_computa%C3%A7%C3%A3o%29">closure</a>.)</p>
<p>Observe que o m&eacute;todo <strong>filterContacts</strong>, ao inv&eacute;s de executar a descoberta DOM em um contexto dependente, simplesmente faz refer&ecirc;ncia a elementos previamente definidos no construtor. A busca de caracteres na String foi extra&iacute;da para uma fun&ccedil;&atilde;o separada de prop&oacute;sito geral - ilustrando que nem tudo precisa necessariamente se tornar um m&eacute;todo do objeto:</p>
<pre><p><span>function startsWith(str, value, caseSensitive) {<br /> if(!caseSensitive) {<br /> str = str.toLowerCase();<br /> value = value.toLowerCase();<br /> }<br /> return str.indexOf(value) === 0;<br /> } </span></p></pre>
<p>Na sequ&ecirc;ncia vamos anexar o manipular de eventos, sem a qual esta funcionalidade nunca seria acionada:</p>
<pre><p><em>// widget.js</em><br /><br /> <strong>function</strong> FilterWidget(contactList) {    <br />     <em>// ...</em> <br />     <strong>this</strong>.filterField.on(&quot;keyup&quot;, this.onFilter);    <br />     <strong>this</strong>.caseSwitch.on(&quot;change&quot;, this.onToggle);    <br /> }    <br /> <br /> FilterWidget.prototype.onFilter = <strong>function</strong>(ev) {    <br />     <strong>var</strong> input = this.filterField.val();           <br />     <strong>this</strong>.filterContacts(input);    <br /> };    <br /> <br /> FilterWidget.prototype.onToggle = <strong>function</strong>(ev) {    <br />     <strong>this</strong>.caseSensitive = <strong>this</strong>.caseSwitch.prop(&quot;checked&quot;);    <br /> };</p></pre>
<p>Executando nosso testes, que, independente das pequenas altera&ccedil;&otilde;es da API anterior, n&atilde;o deve requerer nenhum ajuste, vai revelar um erro aqui, como <strong>this</strong> n&atilde;o &eacute; o que poder&iacute;amos esperar que ele fosse. J&aacute; aprendemos que os manipuladores de eventos s&atilde;o chamados com o respectivo elemento DOM como contexto de execu&ccedil;&atilde;o, ent&atilde;o precisamos trabalhar para fornecer acesso para a inst&acirc;ncia do widget. Para isso podemos tirar vantagens das closures para remapear o contexto de execu&ccedil;&atilde;o:</p>
<p>&nbsp;</p>
<pre><p><em>// widget.js</em><br /><br /> <strong>function</strong><span> FilterWidget(contactList) {<br /> <em>// ...</em><br /> <strong>var</strong> self = this;<br /> <strong>this</strong>.filterField.on(&quot;keyup&quot;, function(ev) {<br /> <strong>var</strong><span> handler = self.onFilter;<br /> <strong>return</strong> handler.call(self, ev);<br /> });<br /> }</span></span></p></pre>
<p>(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">call</a> &eacute; um m&eacute;todo interno para invocar qualquer fun&ccedil;&atilde;o no contexto de um objeto arbitr&aacute;rio, com o primeiro argumento correspondendo para <strong>this</strong> dentro da fun&ccedil;&atilde;o. Uma forma alternativa seria o uso do <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">apply</a> combinado com a vari&aacute;vel impl&iacute;cita <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments">arguments</a> para evitar a refer&ecirc;ncia explicita a argumentos internos individualmente: handler.apply(self, arguments).6)</p>
<p>O resultado final &eacute; um widget no qual cada fun&ccedil;&atilde;o &eacute; clara, com responsabilidade bem encapsulada.</p>
<p><strong>jQuery API</strong></p>
<p>Quando usando jQuery, a API atual parece como algo inelegante. Podemos acrescentar um encapsulador para fornecer uma API alternativa que parece mais natural para os desenvolvedores do jQuery:</p>
<pre><p>jQuery.fn.contactsFilter = function() {<br />     <strong>this</strong>.each(<strong>function</strong>(i, node) {<br />         <strong>new</strong><span> CONTACTSFILTER(node);<br /> });<br /> <strong>return this</strong>;<br /> };</span></p></pre>
<p>(Uma contempla&ccedil;&atilde;o mais elaborada &eacute; fornecida pelo pr&oacute;prio <a href="http://learn.jquery.com/plugins/advanced-plugin-concepts/">guia de plugins</a> do jQuery.)</p>
<p>Deste modo podemos usar <strong>jQuery(&quot;ul.contacts&quot;).contactsFilter()</strong>, mantendo isso como uma camada separada, garante que n&atilde;o estamos amarrados a este particular ecossistema em especial; vers&otilde;es futuras podem prover encapsuladores adicionais na API para diferentes ecossistemas ou mesmo decidir remover ou substituir o jQuery como depend&ecirc;ncia. (Em nosso caso, abandonar o jQuery tamb&eacute;m significaria reescrever a parte interna.)</p>
<p><strong>Conclus&atilde;o e perspectivas</strong></p>
<p>Esperan&ccedil;osamente este artigo conseguiu transmitir alguns dos princ&iacute;pios fundamentais de escrever componentes JavaScript sustent&aacute;veis​​. Evidente que nem todo componente deve seguir este exato padr&atilde;o, mas os conceitos apresentados aqui devem fornecer o kit de ferramentas essencial e necess&aacute;rio para qualquer componente.</p>
<p>Outra melhoria o uso do <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">Asynchronous Module Definition</a> (AMD), que aumenta o encapsulamento e torna explicita a depend&ecirc;ncia entre os m&oacute;dulos, permitindo assim carregar o c&oacute;digo por demanda (como por exemplo o <a href="http://requirejs.org">RequireJS</a>).</p>
<p>Al&eacute;m disso, h&aacute; novos desenvolvimentos interessantes no horizonte: A nova vers&atilde;o do JavaScript (oficialmente ECMAScript 6) introduzir&aacute; um sistema de m&oacute;dulos no n&iacute;vel da linguagem, embora, como com qualquer novo recurso, a ampla disponibilidade depende do suporte do navegador. Similarmente, o Web Components &eacute; um futuro <a href="http://www.w3.org/TR/components-intro/#introduction">conjunto de APIs do navegador</a> destinado a melhorar o encapsulamento e facilidade de manuten&ccedil;&atilde;o - muitos dos quais podem ser experimentados hoje usando o <a href="http://www.polymer-project.org">Polymer</a>. Apesar de serem custosos os Componentes Web com aprimoramento progressivo continuam a ser usados.</p>
<p><sup>1</sup>Isso &eacute; menos que um problema para aplica&ccedil;&otilde;es de uma p&aacute;gina &uacute;nica, como os respectivos pap&eacute;is de servidor e cliente neste contexto. No entanto, uma justa posi&ccedil;&atilde;o dessas abordagens est&aacute; al&eacute;m do escopo deste artigo.</p>
<p><sup>2</sup>Provavelmente o testes poderiam ter sido escritos <a href="http://c2.com/cgi/wiki?TestDrivenDevelopment">primeiro</a>.</p>
<p><sup>3</sup><a href="http://jslint.com">JSLint</a> pode adicionalmente ser <a href="https://github.com/douglascrockford/JSLint/wiki/JSLINT">usado</a> para proteger destes e outros <a href="http://www.jslint.com/lint.html">problemas comuns</a>. Em nosso reposit&oacute;rio usamos o <a href="https://github.com/FND/jslint-reporter">JSLint Reporter</a>.</p>
<p><sup>4</sup>O JavaScript usa prot&oacute;tipos ao inv&eacute;s de classes - a principal diferen&ccedil;a &eacute; que enquanto classes normalmente s&atilde;o &quot;especiais&quot; de alguma maneira, aqui qualquer objeto pode atuar como um prot&oacute;tipo e pode assim ser usado com um template para criar novas inst&acirc;ncias. Para a proposta deste artigo, a diferen&ccedil;a &eacute; insignificante.</p>
<p><sup>5</sup>Vers&otilde;es modernas do JavaScript introduzem o <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a> como uma alternativa para a sintaxe &quot;pseudo cl&aacute;ssico&quot;. Os princ&iacute;pios fundamentais da heran&ccedil;a mant&ecirc;m se os mesmos.</p>
<p><sup>6</sup>O <a href="http://api.jquery.com/jQuery.proxy/">jQuery.proxy</a> pode ser usado como reduzir isto para<strong> this.filterField.on(&quot;keyup&quot;, $.proxy(self, &quot;onFilter&quot;));</strong></p>
<h2>&nbsp;</h2>
<p><strong>Sobre o autor</strong></p>
<p><strong> <img vspace="3" hspace="3" align="left" _p="true" _href="img://FredK.jpg" alt="" src="http://www.infoq.com/resource/articles/modular-javascript/pt/resources/FredK.jpg" /> Frederik Dohr</strong> iniciou sua carreira como relutante web developer hackeando o TiddlyWiki, &agrave;s vezes chamado de aplica&ccedil;&atilde;o original de uma &uacute;nica p&aacute;gina. Ap&oacute;s alguns anos de trabalho com um grupo de pessoas inteligentes no Osmosoft, equipe de inova&ccedil;&atilde;o do BT, ele deixou Londres e voltou para a Alemanha. Trabalha atualmente no innoQ, onde continua sua busca pela simplicidade enquanto ganha toda uma nova perspectiva sobre o desenvolvimento com, para e na web.</p><br><br><br><br><br><br></body></html>