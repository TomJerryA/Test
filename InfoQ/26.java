<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Are REST Alternatives Needed?</h3><p>Ole Lensmar, the creator of SoapUI, recently asked whether <a href="http://blog.programmableweb.com/2013/12/19/is-rest-losing-its-flair-rest-api-alternatives-2/">REST is &quot;losing it's flair&quot;</a> and if there's a need for alternatives? As he says:</p>
<blockquote>
 The adoption of REST as the predominant method to build public APIs has over-shadowed any other API technology or approach in recent years. Although several alternatives (mainly SOAP) are still (very) prevalent in the enterprise, the early adopters of the API movement have taken a definitive stance against them and opted for REST as their approach and JSON as their preferred message format.
</blockquote>
<p>He discusses why he believes REST has become more successful than other approaches such as SOAP and XML-RPC. However, Ole thinks that there are a number of areas where REST does not work well and where alternative approaches are needed. These include:</p>
<ul> 
 <li>Asynchronous APIs: &quot;The need for pushing out data asynchronously instead of the traditional request/response doesn’t always fit well with a RESTful design. Furthermore, the underlying technologies (WebSockets, MQTT, AMQP, Stomp, pubsubhubbub/WebHooks – to name a few) are often very different from HTTP and therefore often don’t align well with REST principles either.&quot;</li> 
 <li>Orchestration APIs: &quot;The resource granularity given by traditional REST APIs isn’t always an advantage; pulling required resources into a mobile dashboard or complex single-page web application can require many API requests – which adds overhead to both the client logic, bandwidth and server processing.&quot;</li> 
 <li>SDKs vs APIs: &quot;Most API consumers are ultimately consuming these from some high-level language; javascript, python, ruby, java, etc. which has lead to many API providers including prebuilt client libraries for these languages (Google, Facebook, etc.). Since the languages themselves are often more RPC oriented, so is the code-level API exposed by the SDK – paving way for the backend API to work in a similar fashion, perhaps by using more optimized binary protocols (see below) or a more RPC-like usage of HTTP resources (for example with JSON-RPC).&quot;</li> 
 <li>Binary protocols: &quot;[...] for optimized message transfer for example required in IoT devices or SDKs, several binary protocols are getting more attention and usage&quot; such as Apache Thrift, Google Protocol Buffers, Apache Avro. &quot;[It is worth noting] that several of the asynchronous API technologies mentioned above use a binary format – related to the bandwidth and processing restrictions imposed by their harboring devices or services.&quot;</li> 
</ul>
<p>Ole uses the example of Evernote who used Thrift as their underlying protocol because of real-time requirements, (which presumably is something Ole believes is beyond the abilities of REST as well). As he says, referring to a separate article by Daniel Jacobson on <a href="http://blog.programmableweb.com/2013/10/03/is-evernotes-restless-api-approach-a-model-for-other-api-designs/">Evernote's RESTless design</a>:</p>
<blockquote>
 [...] REST API is perhaps good when you are targeting a large number of unknown developers – but when your API targets very specific users, markets, industries or technologies, the need to choose a more specific solution is not unreasonable – it might even result in advantages over your competitors in terms of performance, easy-of-use or security.
</blockquote>
<p>Ole concludes by admitting that one-size typically does not fit all, especially where API design is concerned. &quot;Fortunately for us passionate technologists, building and learning new stuff and putting it to use in the best possible way for all stakeholders is what makes our world tick (or at least mine). So, I’m not opposed to this diversity, I welcome it.&quot;</p>
<p>However, whilst some people agree with Ole in his comments, many others disagree. For instance John Sheehan says:</p>
<blockquote>
 I don’t think Evernote abandoned REST, they never used it from the beginning and had a reasonable justification for doing so. Also, webhooks can be very ‘REST’-y (at least in the popular understanding of the term). The caveats you list in the Asynchronous section do not apply for the most common implementations.
</blockquote>
<p>And Darrel Miller tries to differentiate between REST and &quot;pop REST&quot; (his term):</p>
<blockquote>
 From what I can tell from Daniel Jacobson’s description of an orchestration layer, it maps very closely to the way I have been building RESTful (and hypermedia driven) APIs for a number of years. Just because people are starting to see through the hype of “pop REST” doesn’t mean that anything has changed about the properties of Fielding’s REST.
</blockquote>
<p>In fact many of the commenters believe that Ole has not differentiated between truly RESTful principles and implementations that say they are RESTful but are not. What do you think? Is REST really applicable in all of the areas Ole has outlined? If not, what alternatives would you recommend?</p><br><br><br><br><br><br></body></html>