<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Actors Made Easy with C# and TPL DataFlow</h3><p>For some design problems actors can make all the difference. An <a href="http://en.wikipedia.org/wiki/Actor_model">Actor</a> in an independent entity that can respond to and send messages. In a way it is like its own little program running inside another process. But building actors in languages that don’t natively support them can be difficult.</p>
<p>The main problem that comes up is thread management. You usually don’t want to hijack the message sender’s thread as that would just give you method calling semantics. And allocating a separate thread to each actor doesn’t scale up past a dozen or so threads before context switching becomes a real problem.</p>
<p>Johan Olsson solved this dilemma for C# by building his actor library on top of TPL DataFlow. The purpose of TPL DataFlow is to chain together series of operations using asynchronous messages. As messages pass from one Block to the next they may be buffered, grouped, split, transformed, or otherwise manipulated according to the semantic and performance needs of the application.</p>
<p>At the core of his framework is an abstract class called Actor encapsulating an ActionBlock. The ActionBlock handles all of the threading issues internally so that the developer doesn’t need to deal with threads or tasks. Thread-safety comes from the fact that ActionBlocks are serialized by default. If you send two messages to it at one time it will buffer the second message until the first has been processed. This can be changed using the <a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.executiondataflowblockoptions(v=vs.110).aspx">ExecutionDataflowBlockOptions</a> class.</p>
<p>You can read more about Johan Olsson’s work and see example code in his post titled <a href="http://www.jayway.com/2013/11/15/an-actor-model-implementation-in-c-using-tpl-dataflow/">An actor model implementation in C# using TPL DataFlow</a>.</p><br><br><br><br><br><br></body></html>