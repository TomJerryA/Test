<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Vaughn Vernon on Advanced Architecture Styles with DDD</h3><p>Using the <a href="http://alistair.cockburn.us/Hexagonal+architecture">Hexagonal architecture style</a> allows for delaying architectural mechanism decisions and promotes using the same internal API irrespective of type of client, <a href="http://vaughnvernon.co/">Vaughn Vernon</a> explained last week when <a href="http://vimeo.com/63802840">talking about architecture styles</a> from a DDD perspective; the classical <a href="http://dddcommunity.org/resources/ddd_terms/">Layered Architecture</a> and the more advanced Hexagonal and <a href="http://en.wikipedia.org/wiki/Actor_model">Actor Model</a> styles.</p> 
<p>Vaughn Vernon, author of <a href="http://dddcommunity.org/book/implementing-domain-driven-design-by-vaughn-vernon/">Implementing Domain Driven Design</a>, after a short talk about how architecture emerges as a result of proper domain modeling, started by analysing the classical standard layer architecture from <a href="http://www.infoq.com/author/Eric-Evans;jsessionid=9C91035B40C8AF1CC4B2E442713E09FC">Eric Evans</a> <a href="http://domaindrivendesign.org/books/evans_2003/">DDD book</a>, with a user interface layer at the top and an infrastructure layer at the bottom. An undesirable effect of this layering is that the implementation of e.g. domain repositories in the infrastructure layer breaks the architecture since repositories depends on the domain model. Moving the infrastructure to the top and using the <a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency Inversion Principle</a> to inject dependencies prevents breaking the architecture and also makes it more flexible by allowing for different implementations to be injected.</p> 
<p><strong>Hexagonal architecture style</strong><br /> Vaughn continued with the Hexagonal, or <a href="http://alistair.cockburn.us/Hexagonal+architecture">Ports and Adapters</a>, architecture style created by <a href="http://alistair.cockburn.us/">Alistair Cockburn</a>. Vaughn sees this style as an evolvement of the layered style with two main advantages. It allows for delaying decisions for certain architectural mechanisms, e.g. what kind of persistence to use without impeding the progress of building functionality. Main point though is that thinking in terms of ports and adapters make it easier to use the same internal API for different kinds of clients.<br /> An <a href="http://en.wikipedia.org/wiki/Event-driven_architecture">Event-Driven Architecture</a> can be derived from this style with each bounded context as a hexagon, publishing and subscribing to events.</p> 
<p><strong>Actor Model</strong><br /> In the actor model, each object is an actor with a mailbox and behaviour, with messages exchanged between actors through the mailboxes. All communication is performed asynchronously and without shared state between the actors. Vaughn finds this model most interesting and is now experimenting with applying the actor model in a DDD style by implementing aggregates as actors, inherently getting self-contained state, no shared state and asynchronous messaging, to greatly simplify the use of concurrency in highly scalable systems.</p> 
<p id="lastElm"></p><br><br><br><br><br><br></body></html>