<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Tom Baeyens, creator of jBPM and Alfresco Activiti, Starts New Venture to Bring BPM to the Cloud</h3><p>Tom Baeyens, the original creator of JBoss <a href="http://www.jboss.org/jbpm/">jBPM</a> (acquired by Red Hat) and <a href="http://www.activiti.org">Activiti</a>&nbsp;(Alfresco), has announced <a href="http://www.effektif.com">Effektif</a>, a new cloud-based Business Process Management (BPM) tool for process automation. The new venture is being developed in partnership with <a href="http://www.signavio.com">Signavio</a>, a start-up founded in 2009 that provides a SaaS and on-premise Business Process editor. Signavio is investing â‚¬1.2m in Effektif to accelerate product development and establish sales operations. As part of the Signavio investment, Effektif has relocated from Belgium to Berlin, Germany and Torben Schreiter, Co-CEO of Signavio, has joined Effektif's board of directors.</p> 
<p>Baeyens told InfoQ that central to his plans is the idea that &quot;as you bring BPM to the cloud the dynamic aspect becomes much more important&quot;. As a result, he argued, enabling business users to define and change workflows within the system is essential, and therefore simply building a cloud-scale execution engine on top of a conventional BPMN modeler would be insufficient.</p> 
<p>Baeyens intends that Effektif will comprise 3&nbsp;conceptual&nbsp;layers. The first is a browser-based wizard aimed at providing a simple mechanism to enable business users to define tasks and create forms for those tasks and handovers. Co-ordination and feedback can be provided via email. A sandboxed environment will be included to allow users to try out these processes. &quot;Our ambition is to have business users build their first simple process in less than 5 minutes,&quot; Baeyens told us.</p> 
<p>The second layer adds a set of adaptors to integrate with other cloud-based packaged applications such as Salesforce and Google Apps. Whilst coding is still not required, Baeyens acknowledged that some technical knowledge will be needed in order to configure the integration and, as such, it is likely that this task will be performed by IT staff.</p> 
<p>The third and final layer will allow developers to write custom software to be included in a workflow. The approach taken here is similar to that of <a href="http://aws.amazon.com/swf/">Amazon's Simple Workflow Service</a>. Effektif will maintain a task list for each system activity. A developer can write a piece of code to pull tasks from that list via a RESTful API, perform work, and deliver the result back to the cloud engine. Delivery back will fire a trigger that resumes the process. Any language - &quot;PHP, Java, whatever&quot; according to Baeyens - can be used for this. The same mechanism can also be used to integrate internal enterprise systems that are behind a firewall.</p> 
<p>In terms of core architecture, the engine is being developed using Java and uses <a href="http://www.bpmn.org/">Business Process Model and Notation (BPMN) 2.0</a>. Gero Decker, co-CEO of Signavio, told us that the product will leverage the Signavio Process Editor for modeling process flow. &quot;This has the nice side effect that the process model import capabilities (e.g. <a href="http://www.xpdl.org">XPDL</a>) that are already available in Signavio today will then also be available in Effektif,&quot; he added.</p> 
<p>The REST layer is being built using the <a href="http://restlet.org">Restlet</a> framework, with <a href="http://wiki.fasterxml.com/jacksonhome">Jackson</a> being used to process JSON, and <a href="http://www.mongodb.org">MongoDB</a> providing storage. The team hasn't yet settled on a JavaScript framework for the front end.</p> 
<p>A first beta of Effektif is expected in the summer, and the product will be opened up to the public towards the end of the year. Pricing is yet to be set, but will most like be based on a per-activity-instance model.</p> 
<p id="lastElm"></p><br><br><br><br><br><br></body></html>