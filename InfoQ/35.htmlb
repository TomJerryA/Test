<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Oleg Shilo：基于CS-Script的Notepad++的插件</h3><p>如果只是想写几句试验代码，Visual Studio显得有点大材小用。因此一些开发者会选择轻量级的编辑器，如Notepad++，来满足编写脚本的需要。Oleg Shilo向我们介绍了他的项目，一个优秀的<a href="http://csscriptnpp.codeplex.com/">基于CS-Script的Notepad++的插件</a>。</p>
<p><strong>InfoQ：CS-Script是什么？它与普通的C#有什么区别？</strong></p>
<blockquote> 
 <p>Oleg：简单来说，<a href="http://www.csscript.net/">CS-Script</a>是一个基于CLR的运行时环境，可以执行用C#编写的脚本。值得注意的是，CS-Script并不是一个解释器，而是封装了微软或Mono C#编译器的shell。因此它与普通的C#没有什么不同。实际上，它的脚本引擎面向的也是ECMA兼容的“单纯功能”的C#，与用Visual Studio或MonoDevelop编译成程序集的C#没有什么区别。</p> 
 <p>描述CS-Script最简单的方式是：我们可以用C#编写算法，编译成程序集，然后直接执行该程序集，或在宿主应用程序中加载并执行。但CS-Script可以跳过编译阶段，而立即加载并执行代码，将C#代码当做脚本来处理。换句话说，运行时的C#脚本就是一个动态编译的程序集。</p> 
 <p>当然，实际情况要比这复杂得多，而且CS-Script提供了众多吸引眼球的特性：自定义JIT编译、省略类的语法、自动命名空间到程序集的映射、接口对齐等。</p> 
 <p>CS-Script现在已经9岁了，并且有一批用户。<a href="http://www.team-mediaportal.com/">MediaPortal</a>或<a href="http://www.flashdevelop.org/">FlashDevelop</a>就是基于CS-Script构建的。它还被用于AutoCAD插件、自动化和机器人、游戏和规则引擎。</p> 
 <p>CS-Script受到了Python的启发和影响。尽管它们面对的是完全不同的运行时范式，但CS-Script还是从Python借鉴了不少有用的想法，如多脚本执行、预编译等等。</p> 
</blockquote>
<p><strong>InfoQ：为什么会为Notepad++创建一个插件？</strong></p>
<blockquote> 
 <p>Oleg：原因有很多。在Windows上开发的程序员很少有没听说过Notepad++的。对很多人来说，它是“必备”的源代码编辑器。能够获此殊荣，Notepad++是当之无愧的，因为它具有优秀的架构和近乎完美的实现。但除了这些赞誉，它还有一定的上升空间。</p> 
 <p>我认为Notepad++的“自动补全”功能还有点简陋，还不足以成为智能的代码辅助工具。它只是按文件类型分组的一些“高频词”而已。</p> 
 <p>我坚信这样一个很牛的编辑器应该变得更好。因此我决定为Notepad++实现一个C#的智能感知解决方案。</p> 
 <p>我想让Notepad++能拥有与Visual Studio同种级别的智能感知。同时还包括“转到定义”、“查找引用”、“显示方法信息”、“添加缺少的‘using’”和代码格式化。这就是这个插件诞生的缘由。智能感知相关的功能基于NRefactory，但插件的核心是CS-Script。并且由于插件使用了脚本引擎，因此可以在Notepad++中直接执行C#代码。</p> 
 <p>当实现完成后，我又催生了其他一些想法。因此又发布了另一个Notepad++插件（NppScript）。它使用C#脚本对Notepad++本身进行自动化。实际上每个这样的脚本自身，加上一些相关的插件特性（工具条图标、快捷键、菜单项），都可以看成是一个插件。下面的截图展示了这一想法。</p> 
 <p>(点击图像放大)</p> 
 <p><a href="http://infoqstatic.com/resource/articles/CS-Script-Notepad/zh/resources/0305010.png"> <img src="http://infoqstatic.com/resource/articles/CS-Script-Notepad/zh/resources/0305010.png" width="600" _href="img://null" _p="true" alt="" /></a></p> 
</blockquote>
<div id="lowerFullwidthVCR"></div>
<blockquote> 
 <p>另一个原因是因为CS-Script。尽管有了Visual Studio扩展和Windows Explorer Shell扩展，我还是觉得CS-Script不够圆满，没有一个专门的富编辑器。我当然知道Visual Studio提供了无与伦比的“编辑能力”，但它也不是“银弹”。我想让C#和CS-Script用户拥有一个强大且轻量级的编辑器，不需要考虑任何部署和license的问题。</p> 
 <p>3年前我甚至认真地尝试着开发这样一款编辑器。我花了大量时间对SharpDevelop做反向工程，并且几乎完成了一个为C#量身定做的编辑器（代码名为UltraSharp）。它是一个基于编辑器的自定义的WinForm，包装了NRefactory 5预览版。但其性能和编辑功能都不能让人满意。因此我放弃了这个项目，转而专注于在Visual Studio中集成CS-Script。我虽然取得了成功，但仍旧心仪永久免费、性能卓越、轻量级的Notepad++。</p> 
 <p>对于这个插件，我还有一个不太明显但却强烈的动机。我们日常工作如此复杂。框架、工厂、模式、设计原则……我们几乎忘记了编程的乐趣。我不止一次地在文章中看到介绍批量重命名工具、下载器、目录同步工具或仅仅是又一个MP3文件标签组织工具。这些工具常常是为了引出全功能的应用程序开发（或部署方案），但在很多情况下，同样的工具可以仅用几行代码实现：</p> 
</blockquote>
<pre>foreach(string file in Directory.GetFiles(&quot;.&quot;, &quot;*.mp3&quot;))
{
    var mp3 = TagLib.File.Create(file);
    string dir = Path.GetDirectoryName(file);
    string fileName = string.Format(&quot;{00}.{1}.mp3&quot;, mp3.Tag.Track, mp3.Tag.Title);
    File.Move(file, Path.Combine(dir, fileName));
}</pre>
<blockquote> 
 <p>在Notepad++中可以使用CS-Script.Npp插件来执行上述代码。它甚至可以准备一些脚本，能够在没有安装Notepad++的PC上运行。</p> 
 <p>我认为Notepad++和CS_Script让我们有机会只关注代码，而不用担心代码的基础结构，不用考虑在哪里保存项目文件或寻找刚刚编译的可执行文件。乐在码中。</p> 
</blockquote>
<p><strong>InfoQ：创建一个Notepad++插件都包含哪些内容？</strong></p>
<blockquote> 
 <p>Oleg：传统的Notepad++插件开发要求用C++编写代码。尽管我用C++没问题，但我还是更喜欢C#。因此我用<a href="http://sourceforge.net/p/notepad-plus/discussion/482781/thread/32615d15">NppPlugin.NET</a>作为插件容器。需要特别指出的是，这个插件宿主方案可以优雅地应对互操作的挑战。它只是一个特殊的VS项目模板，包含一些聪明的预编译行为，可以注入特殊的导出符号。因此，非托管的宿主应用程序（如Notepad++）可以在不借助任何包装器的情况下，直接承载一个普通的程序集。该项目模板还提供了一个接口（结构、常量），提供在其他插件中存在的所有Notepad++功能。</p> 
 <p>我使用了另一个第三方解决方案是ICSharpCode.NRefactory（属于SharpDevelop IDE）。它是最成熟的解析C#代码和构建语法树的开源解决方案。此外，它还实现了代码自动补全。但实际上它多少还是有点复杂。</p> 
 <p>NRefactory没有文档。尽管作者提供了充分的代码示例，这貌似是一个更好的选择。但所有示例都是SharpDevelp特有的，如果不使用SharpDevelop UI控件套件的话，它们无法提供任何帮助。我花了大量时间和精力对API进行反向工程，并最终成功将其集成到Notepad++插件中。</p> 
 <p>还有一个挑战是实现代码格式化。我做出了一个艰难的决定，实现自己的格式化解决方案，而不是使用NRefactory内置的格式化。这是因为NRefactory的格式化并不完备（至少我使用的版本是这样），而且对于非标准的语法（如没有类的C#脚本）不够灵活。</p> 
 <p>在涉及到用户交互时，我复制了Visual Studio的所有主要用户体验：解决方案浏览器、输出面板，CodeMap等等。</p> 
</blockquote>
<p><strong>InfoQ：假设某公司创建了一个小型的DSL供内部使用。您认为让一个开发者创建他们自己的Notepad++插件是否可行？这是否需要整个团队的努力？</strong></p>
<blockquote> 
 <p>Oleg：这当然取决于开发的规模。解决方案由以下几个逻辑部分组成：插件基础、语法高亮、语法解析和用户交互支持。</p> 
 <p>插件基础可以说是最简单的部分。NppPlugin.NET能承担大部分工作。因此完全可以由单个开发者搞定。如果开发需求不重，甚至可以使用NppScripts（Notepad++自动化插件）。整个基础结构不到100行代码。NppScripts发布时自带了一个脚本示例，可以实现自定义的自动补全——允许特定上下文补全建议的自动补全功能。</p> 
 <p>语法高亮在大多数情况下可以通过定制内嵌的Notepad++样式来实现。某些高亮任务无法由定制完成，那么就需要自己开发完整的Lexar（通常用C++开发）。但也只需要一个开发者即可。</p> 
 <p>语法解析器的工作量与语法的复杂度成正比。因此像DOS指令这样简单的语法只需要一个人。但像C#这样复杂的语法就肯定需要一个团队了。尽管CS-SCript.Npp是一个人完成的，不过好在我没有任何期限。</p> 
 <p>为DSL支持用户交互也十分简单。大多数情况下只需要自动补全的弹出框和一些配置控制台。同样也是一个人的工作量。当然，除非DSL的复杂性要求在运行时进行密集的用户交互。</p> 
 <p>在大多数情况下，DSL插件都可以由一个开发者完成。如果DSL的复杂性是中到高级的，就需要一个团队参与了。不过，即使对于一个简单的DSL来说，一对儿开发者可以提高整个开发速度，他们可以同时开发相对独立的领域：插件基础、语法高亮、语法解析和用户体验。</p> 
</blockquote>
<h2>关于受访者</h2>
<p><img style="float: left; margin-right: 10px" src="http://infoqstatic.com/resource/articles/CS-Script-Notepad/zh/resources/0305011.png" _href="img://null" _p="true" alt="" /><b>Oleg Shilo</b>生于乌克兰，并在那里获得了他的第一个资质：研究化学的硕士学位。18年前移居澳大利亚，并获得了第二个资质：软件工程师。他在全澳洲机器人和自动化领域领先的工程公司工作。过去4年他就职于Aqsacom Australia，任首席技术专家。</p>
<div style="clear:both">
 &nbsp;
</div>
<p><strong>原文英文链接：</strong><a href="http://www.infoq.com/articles/CS-Script-Notepad">Oleg Shilo on CS-Script and Notepad++</a></p><br><br><br><br><br><br></body></html>