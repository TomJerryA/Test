<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Martin Fowler on Software Design in the 21st Century</h3><p>Schemaless data structures are not well understood and it's important to consider the advantages and disadvantages when using these data structures in NoSQL databases. At a recent company event <a href="http://martinfowler.com/">Martin Fowler</a>&nbsp;<a href="http://www.youtube.com/watch?v=8kotnF6hfd8">talked</a> about Schemaless Data Structures, and NoSQL &amp; Consistency.</p> 
<p><strong>Schemaless Data Structures:</strong></p> 
<p>Being schemaless is often seen as a big advantage with NoSQL databases. Martin believes that the area is not well understood and describes different aspects of schemalessness as well as what advantages and disadvantages of using schemaless data structures.</p> 
<p>The main point is that even in a schemaless structure you still have a schema. In order to query the data and find information you have to understand the data, and that's an <a href="http://martinfowler.com/articles/schemaless/">Implicit Schema</a>, a definition of data e.g. in code. In contrast the schema in a relational database, where only correct data is accepted, is an <a href="http://martinfowler.com/articles/schemaless/">Explicit Schema</a>.</p> 
<p>Martin ends the discussion with claiming that most of the time <em>&quot;Implicit Schema == Bad Thing&quot;</em> prefering an explicit schema to get a clear statement what data looks like, although there are a few cases where schemalessnes is useful. But he also states that a schema does not need to be a fixed storage schema; it can be more in the form of a contract, e.g. a data access layer or XML schema.</p> 
<p><strong>NoSQL and Consistency:</strong></p> 
<p>In this talk Martin looks at two aspects of consistency in NoSQL databases.</p> 
<p>Logical Consistency deals with keeping data consistent when working in one database. For most NoSQL databases (graphs being one exception), the use of <a href="http://dddcommunity.org/resources/ddd_terms/">aggregates</a> (a concept from Domain Driven Design where you store a cluster of objects at the same time) is an obvious way of avoiding inconsistency.</p> 
<p>While describing Replication Consistency, with copies of the same data in several places, Martin introduces the <a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP theorem</a>, and with data already replicated over the network he simplifies it into a choice between consistency and availability, He emphasizes that this not a technical issue, it's a business choice whether being consistent or available is the top priority.</p> 
<p>Martin ended with a talk discussing the value of software design and technical debt.</p> 
<p>&nbsp;</p> 
<p id="lastElm"></p><br><br><br><br><br><br></body></html>