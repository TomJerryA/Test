<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>DDD and CQRS Using the Functional Language F#</h3><p>A focus on behaviour and a more declarative style of code are two benefits for <a href="http://en.wikipedia.org/wiki/Domain-driven_design">Domain-Driven Design</a> (DDD) when moving from an object-oriented language like C# to a functional one like <a href="http://en.wikipedia.org/wiki/F_Sharp_(programming_language)">F#</a>, <a href="http://gorodinski.com/">Lev Gorodinski</a> claims in a recent <a href="https://www.youtube.com/watch?v=MHvr71T_LZw">presentation</a>, using an example that includes <a href="https://github.com/eventstore/eventstore/wiki/Event-Sourcing-Basics#event-sourcing">event sourcing</a> and <a href="http://martinfowler.com/bliki/CQRS.html">Command-Query Responsibility Separation</a> (CQRS).</p>
<p>Lev has been using F# heavily during the last year and exclusively for the last 8 months and in his presentation he uses an example based on <a href="http://goodenoughsoftware.net/about/">Greg Young’s</a> original&nbsp;<a href="https://github.com/gregoryyoung/m-r">CQRS example</a> to demonstrate how a F# implementation contrasts with a C# one, showing some of the benefits and challenges.</p>
<p>Implementing his example in a typical object-oriented approach Lev finds a number of issues, e.g. it’s quite verbose, and the entities have a dependency to the event source implementation.<br /> In the F# implementation though there are improvements, it’s a lot less code, e.g. boilerplate code, which makes it less verbose, and the code is more explicit, capturing what happens in a function without hidden side effects.</p>
<p>Using DDD with an F# approach gives for Lev some benefits, it lets him focus on behaviour as opposed to the infrastructure required to implement it, which also means moving away from a <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> thinking. It also supports a more declarative code; instead of writing code, it’s more about declaring a specification, with F# implementing the specification.<br /> Lev points out that the benefits are all tenants of DDD and listed in two of the DDD books, written by <a href="http://www.informit.com/store/domain-driven-design-tackling-complexity-in-the-heart-9780321125217">Eric Evans</a> and <a href="http://www.informit.com/store/implementing-domain-driven-design-9780321834577">Vaughn Vernon</a> respectively.</p>
<p>One of the challenges Lev experienced when moving to F# was the new paradigm, when he started he was doing C# style of code but in F#, which took a while to overcome to really make a shift to functional programming. It’s also a language that supports both functional and object oriented programming and sometimes he finds it hard to decide which option to use.</p><br><br><br><br><br><br></body></html>