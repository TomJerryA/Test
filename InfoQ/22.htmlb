<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>JavaScript的实例化与继承：请停止使用new关键字</h3><p>JavaScript中的new关键字可以实现实例化和继承的工作，但个人认为使用new关键字并非是最佳的实践，还可以有更友好一些的实现。本文将介绍使用new关键字有什么问题，然后介绍如何对与new相关联的一系列面向对象操作进行封装，以便提供更快捷的、更易让人理解的实现方式。</p>
<h2>传统的实例化与继承</h2>
<p>假设我们有两个类，<code>Class:function Class() {}</code>和<code>SubClass:function SubClass(){}</code>，SubClass需要继承自Class。传统方法一般是按如下步骤来组织和实现的：</p>
<ul> 
 <li> <p>Class中<strong>被继承的属性和方法</strong>必须放在Class的prototype属性中</p> 
  <div class="clear"></div> 
  <div class="related_sponsors visible stacked"> 
   <div class="gray_section_related only1 fullWidth"> 
    <div class="related_editorial sponsored only1"> 
     <p class="title">相关厂商内容</p> 
     <div class="links"> 
      <h3 title="" class="entryeventRegistration f_vcrbottom" jsh="{&quot;id&quot;:2533,&quot;title&quot;:&quot;QClub大连站：软件开发过程中的平台、技术选择（2013年11月23日 周六）&quot;}"> <a href="/cn/vendorcontent/show.action?vcr=2533&amp;utm_source=infoq&amp;utm_medium=VCR&amp;utm_campaign=vcr_articles_click"> QClub大连站：软件开发过程中的平台、技术选择（2013年11月23日 周六） </a> </h3> 
      <h3 title="" class="entryeventRegistration f_vcrbottom" jsh="{&quot;id&quot;:2498,&quot;title&quot;:&quot;百度技术沙龙第四十四期： 大数据面面观（2013年11月23日周六）&quot;}"> <a href="/cn/vendorcontent/show.action?vcr=2498&amp;utm_source=infoq&amp;utm_medium=VCR&amp;utm_campaign=vcr_articles_click"> 百度技术沙龙第四十四期： 大数据面面观（2013年11月23日周六） </a> </h3> 
      <h3 title="" class="entrypdf f_vcrbottom" jsh="{&quot;id&quot;:2541,&quot;title&quot;:&quot;京东“宙斯杯”创新应用大赛开始了，100万奖金等你拿哦！&quot;}"> <a href="/cn/vendorcontent/show.action?vcr=2541&amp;utm_source=infoq&amp;utm_medium=VCR&amp;utm_campaign=vcr_articles_click" target="_blank"> 京东“宙斯杯”创新应用大赛开始了，100万奖金等你拿哦！ </a> </h3> 
      <div class="clear"></div> 
     </div> 
    </div> 
   </div> 
   <div class="clear"></div> 
  </div> </li> 
 <li> <p>SubClass中<strong>自己的方法和属性</strong>也必须放在自己prototype属性中</p> </li> 
 <li> <p>SubClass的prototype对象的prototype(__proto__)属性必须指向的Class的prototype</p> </li> 
</ul>
<p>这样一来，由于prototype链的特性，SubClass的实例便能追溯到Class的方法，从而实现继承：</p>
<div id="lowerFullwidthVCR"></div>
<pre>
new SubClass()      Object.create(Class.prototype)
    |                    |
    V                    V
SubClass.prototype ---&gt; { }
                        { }.__proto__ ---&gt; Class.prototype
</pre>
<p>举一个具体的例子：下面的代码中，我们做了以下几件事:</p>
<ul> 
 <li> <p>定义一个父类叫做Human</p> </li> 
 <li> <p>定义一个名为Man的子类继承自Human</p> </li> 
 <li> <p>子类继承父类的一切属性，并调用父类的构造函数，实例化这个子类</p> </li> 
</ul>
<pre>
// 构造函数/基类
function Human(name) {
    this.name = name;
}

/* 
    基类的方法保存在构造函数的prototype属性中
    便于子类的继承
*/
Human.prototype.say = function () {
    console.log(&quot;say&quot;);
}

/*
    道格拉斯的object方法（等同于object.create方法）
*/
function object(o) {
    var F = function () {};
    F.prototype = o;
    return new F();
}

// 子类构造函数
function Man(name, age) {
    // 调用父类的构造函数
    Human.call(this, name);
    // 自己的属性age
    this.age = age;
}

// 继承父类的方法
Man.prototype = object(Human.prototype);
Man.prototype.constructor = Man;

// 实例化子类
var man = new Man(&quot;Lee&quot;, 22);
console.log(man);
// 调用父类的say方法：
man.say();
</pre>
<p><a href="http://jsfiddle.net/gP9g5/">DEMO</a></p>
<p>通过上面的代码可以总结出传统的实例化与继承的几个特点：</p>
<ul> 
 <li> <p>传统方法中的“类”一定是一个构造函数。</p> </li> 
 <li> <p>属性和方法绑定在prototype属性上，并借助prototype的特性实现继承。</p> </li> 
 <li> <p>通过new关键字来实例化一个对象。</p> </li> 
</ul>
<p>为什么我会十分的肯定Object.create方法与道格拉斯的object方法是一致呢？因为在MDN上，object方法就是作为Object.create的一个Polyfill方案：</p>
<ul> 
 <li> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a></p> </li> 
 <li> <p><a href="http://javascript.crockford.com/prototypal.html">Douglas Crockford's object method</a></p> </li> 
</ul>
<h2>new关键字的不足之处</h2>
<p>在《Javascript语言精粹》（Javascript: The Good Parts）中，道格拉斯认为应该避免使用new关键字：</p>
<blockquote> 
 <p>If you forget to include the new prefix when calling a constructor function, then this will not be bound to the new object. Sadly, this will be bound to the global object, so instead of augmenting your new object, you will be clobbering global variables. That is really bad. There is no compile warning, and there is no runtime warning. (page 49)</p> 
</blockquote>
<p>大意是说在应该使用new的时候如果忘了new关键字，会引发一些问题。</p>
<p>当然了，你遗忘使用任何关键字都会引起一系列的问题。再退一步说，这个问题是<a href="http://stackoverflow.com/questions/383402/is-javascript-s-new-keyword-considered-harmful#answer-383503">完全可以避免的</a>：</p>
<pre>
function foo()
{   
   // 如果忘了使用关键字，这一步骤会悄悄帮你修复这个问题
   if ( !(this instanceof foo) )
      return new foo();

   // 构造函数的逻辑继续……
}
</pre>
<p>或者更通用的抛出异常即可</p>
<pre>
function foo()
{
    if ( !(this instanceof arguments.callee) ) 
       throw new Error(&quot;Constructor called as a function&quot;);
}
</pre>
<p>又或者按照<a href="http://ejohn.org/blog/simple-class-instantiation/">John Resig的方案</a>，准备一个makeClass工厂函数，把大部分的初始化功能放在一个init方法中，而非构造函数自己中：</p>
<pre>
// makeClass - By John Resig (MIT Licensed)
function makeClass(){
  return function(args){
    if ( this instanceof arguments.callee ) {
      if ( typeof this.init == &quot;function&quot; )
        this.init.apply( this, args.callee ? args : arguments );
    } else
      return new arguments.callee( arguments );
  };
}
</pre>
<p>在我看来，new关键字不是一个好的实践的关键原因是：</p>
<blockquote> 
 <p><a href="http://dailyjs.com/2010/05/24/history-of-javascript-1/">...new is a remnant of the days where JavaScript accepted a Java like syntax for gaining “popularity”. And we were pushing it as a little brother to Java, as a complementary language like Visual Basic was to C++ in Microsoft’s language families at the time.</a></p> 
</blockquote>
<p>道格拉斯将这个问题描述为：</p>
<blockquote> 
 <p><a href="http://javascript.crockford.com/prototypal.html">This indirection was intended to make the language seem more familiar to classically trained programmers, but failed to do that, as we can see from the very low opinion Java programmers have of JavaScript. JavaScript’s constructor pattern did not appeal to the classical crowd. It also obscured JavaScript’s true prototypal nature. As a result, there are very few programmers who know how to use the language effectively.</a></p> 
</blockquote>
<p>简单来说，JavaScript是一种prototypical类型语言，在创建之初，是为了迎合市场的需要，让人们觉得它和Java是类似的，才引入了new关键字。Javascript本应通过它的Prototypical特性来实现实例化和继承，但new关键字让它变得不伦不类。</p>
<h2>把传统方法加以改造</h2>
<p>既然new关键字不够友好，那么我们有两个办法可以解决这个问题：一是完全抛弃new关键字，二是把含有new关键字的操作封装起来，只向外提供友好的接口。下面将介绍第二种方法的实现思路，把传统方法加以改造。</p>
<p>我们开始构造一个最原始的基类<code>Class</code>（类似于JavaScript中的Object类），并且只向外提供两个接口：</p>
<ul> 
 <li> <p>Class.extend 用于拓展子类</p> </li> 
 <li> <p>Class.create 用于创建实例</p> </li> 
</ul>
<pre>
// 基类
function Class() {}

// 将extend和create置于prototype对象中，以便子类继承
Class.prototype.extend = function () {};
Class.prototype.create = function () {};

// 为了能在基类上直接以.extend的方式进行调用
Class.extend = function (props) {
    return this.prototype.extend.call(this, props);
}
</pre>
<p>extend和create的具体实现：</p>
<pre>
Class.prototype.create = function (props) {
    /*
        create实际上是对new的封装；
        create返回的实例实际上就是new构造出的实例；
        this即指向调用当前create的构造函数；
    */
    var instance = new this();
    /*
        绑定该实例的属性
    */
    for (var name in props) {
        instance[name] = props[name];
    }
    return instance;
}

Class.prototype.extend = function (props) {
    /*
        派生出来的新的子类
    */
    var SubClass = function () {};
    /*
        继承父类的属性和方法，
        当然前提是父类的属性都放在prototype中
        而非上面create方法的“实例属性”中
    */
    SubClass.prototype = Object.create(this.prototype);
    // 并且添加自己的方法和属性
    for (var name in props) {
        SubClass.prototype[name] = props[name];
    }
    SubClass.prototype.constructor = SubClass;

    /*
        介于需要以.extend的方式和.create的方式调用：
    */
    SubClass.extend = SubClass.prototype.extend;
    SubClass.create = SubClass.prototype.create;

    return SubClass;
}
</pre>
<p>仍然以Human和Man类举例使用说明：</p>
<pre>
var Human = Class.extend({
    say: function () {
        console.log(&quot;Hello&quot;);
    }
});

var human = Human.create();
console.log(human)
human.say();

var Man = Human.extend({
    walk: function () {
        console.log(&quot;walk&quot;);
    }
});

var man = Man.create({
    name: &quot;Lee&quot;,
    age: 22
});

console.log(man);
// 调用父类方法
man.say();

man.walk();
</pre>
<p><a href="http://jsfiddle.net/VsuA2/">DEMO</a></p>
<p>至此，基本框架已经搭建起来，接下来继续补充功能。</p>
<ol> 
 <li> <p>我们希望把构造函数独立出来，并且统一命名为init。就好像<code>Backbone.js</code>中每一个view都有一个<code>initialize</code>方法一样。这样能让初始化更灵活和标准化，甚至可以把init构造函数借出去</p> </li> 
 <li> <p>我还想新增一个子类方法调用父类同名方法的机制，比如说在父类和子类的中都定义了一个say方法，那么只要在子类的say中调用<code>this.callSuper()</code>就能调用父类的say方法了。例如：</p> </li> 
</ol>
<pre>
// 基类
var Human = Class.extend({
    /*
        你需要在定义类时定义构造方法init
    */
    init: function () {
        this.nature = &quot;Human&quot;;
    },
    say: function () {
        console.log(&quot;I am a human&quot;);
    }
})

var Man = Human.extend({
    init: function () {
        this.sex = &quot;man&quot;;
    },
    say: function () {
        // 调用同名的父类方法
        this.callSuper();
        console.log(&quot;I am a man&quot;);
    }
});
</pre>
<p>那么Class.create就不仅仅是new一个构造函数了：</p>
<pre>
Class.create = Class.prototype.create = function () {
    /*
        注意在这里我们只是实例化一个构造函数
        而非最后返回的“实例”，
        可以理解这个实例目前只是一个“壳”
        需要init函数对这个“壳”填充属性和方法
    */
    var instance = new this();

    /*
        如果对init有定义的话
    */
    if (instance.init) {
        instance.init.apply(instance, arguments);
    }
    return instance;
}
</pre>
<p>实现在子类方法调用父类同名方法的机制，我们可以借用<a href="http://ejohn.org/blog/simple-javascript-inheritance/">John Resig的方案</a>：</p>
<pre>

Class.extend = Class.prototype.extend = function (props) {
    var SubClass = function () {};
    var _super = this.prototype;
     SubClass.prototype = Object.create(this.prototype);
     for (var name in props) {
        // 如果父类同名属性也是一个函数
        if (typeof props[name] == &quot;function&quot; 
            &amp;&amp; typeof _super[name] == &quot;function&quot;) {
            // 重新定义用户的同名函数，把用户的函数包装起来
            SubClass.prototype[name] 
                = (function (super_fn, fn) {
                return function () {

                    // 如果用户有自定义callSuper的话，暂存起来
                    var tmp = this.callSuper;
                    // callSuper即指向同名父类函数
                    this.callSuper = super_fn;
                    /*
                        callSuper即存在子类同名函数的上下文中
                        以this.callSuper()形式调用
                    */
                    var ret = fn.apply(this, arguments);
                    this.callSuper = tmp;

                    /*
                        如果用户没有自定义的callsuper方法，则delete
                    */
                    if (!this.callSuper) {
                        delete this.callSuper;
                    }

                    return ret;
                }
            })(_super[name], props[name])  
        } else {
            // 如果是非同名属性或者方法
            SubClass.prototype[name] = props[name];    
        }

        ..
    }

    SubClass.prototype.constructor = SubClass; 
}
</pre>
<p>最后给出一个完整版，并且做了一些优化：</p>
<pre>
function Class() {}

Class.extend = function extend(props) {

    var prototype = new this();
    var _super = this.prototype;

    for (var name in props) {

        if (typeof props[name] == &quot;function&quot; 
            &amp;&amp; typeof _super[name] == &quot;function&quot;) {

            prototype[name] = (function (super_fn, fn) {
                return function () {
                    var tmp = this.callSuper;

                    this.callSuper = super_fn;

                    var ret = fn.apply(this, arguments);

                    this.callSuper = tmp;

                    if (!this.callSuper) {
                        delete this.callSuper;
                    }
                    return ret;
                }
            })(_super[name], props[name])
        } else {
            prototype[name] = props[name];    
        }
    }

    function Class() {}

    Class.prototype = prototype;
    Class.prototype.constructor = Class;

    Class.extend =  extend;
    Class.create = Class.prototype.create = function () {

        var instance = new this();

        if (instance.init) {
            instance.init.apply(instance, arguments);
        }

        return instance;
    }

    return Class;
}
</pre>
<p>下面是测试的代码。为了验证上面代码的健壮性，故意实现了三层继承：</p>
<pre>
var Human = Class.extend({
    init: function () {
        this.nature = &quot;Human&quot;;
    },
    say: function () {
        console.log(&quot;I am a human&quot;);
    }
})

var human = Human.create();
console.log(human);
human.say();

var Man = Human.extend({
    init: function () {
        this.callSuper();
        this.sex = &quot;man&quot;;
    },
    say: function () {
        this.callSuper();
        console.log(&quot;I am a man&quot;);
    }
});

var man = Man.create();
console.log(man);
man.say();

var Person = Man.extend({
    init: function () {
        this.callSuper();
        this.name = &quot;lee&quot;;
    },
    say: function () {
        this.callSuper();
        console.log(&quot;I am Lee&quot;);
    }
})

var person = Person.create();
console.log(person);
person.say();
</pre>
<p><a href="http://jsfiddle.net/4qRUz/">DEMO</a></p>
<h2>是时候彻底抛弃new关键字了</h2>
<p>如果不使用new关键字，那么我们需要转投上两节中反复使用的<code>Object.create</code>来生产新的对象</p>
<p>假设我们有一个矩形对象：</p>
<pre>
var Rectangle = {
    area: function () {
        console.log(this.width * this.height);
    }
};
</pre>
<p>借助Object.create，我们可以生成一个拥有它所有方法的对象：</p>
<pre>
var rectangle = Object.create(Rectangle);
</pre>
<p>生成之后，我们还可以给这个实例赋值长宽，并且取得面积值</p>
<pre>
var rect = Object.create(Rectangle);
rect.width = 5;
rect.height = 9;
rect.area();
</pre>
<p>注意这个过程我们没有使用new关键字，但是我们相当于实例化了一个对象(rectangle)，给这个对象加上了自己的属性，并且成功调用了类(Rectangle)的方法。</p>
<p>但是我们希望能自动化赋值长宽，没问题，那就定义一个create方法：</p>
<pre>
var Rectangle = {
    create: function (width, height) {
      var self = Object.create(this);
      self.width = width;
      self.height = height;
      return self;
    },
    area: function () {
        console.log(this.width * this.height);
    }
};
</pre>
<p>使用方式如下：</p>
<pre>
var rect = Rectangle.create(5, 9);
rect.area();
</pre>
<p>在纯粹使用Object.create的机制下，我们已经完全抛弃了构造函数这个概念。一切都是对象，一个类也可以是对象，这个类的实例不过是一个它自己的复制品。</p>
<p>下面看看如何实现继承。我们现在需要一个正方形，继承自这个长方形</p>
<pre>
var Square = Object.create(Rectangle);

Square.create = function (side) {
  return Rectangle.create.call(this, side, side);
}
</pre>
<p>实例化它:</p>
<pre>
var sq = Square.create(5);
sq.area();
</pre>
<p>这种做法其实和我们第一种最基本的类似</p>
<pre>
function Man(name, age) {
    Human.call(this, name);
    this.age = age;
} 
</pre>
<p>上面的方法还是太复杂了，我们希望进一步自动化，于是我们可以写这么一个extend函数</p>
<pre>
function extend(extension) {
    var hasOwnProperty = Object.hasOwnProperty;
    var object = Object.create(this);

    for (var property in extension) {
      if (hasOwnProperty.call(extension, property) || typeof object[property] === &quot;undefined&quot;) {
        object[property] = extension[property];
      }
    }

    return object;
}

/*
    其实上面这个方法可以直接绑定在原生的Object对象上：Object.prototype.extend
    但个人不推荐这种做法
*/

var Rectangle = {
    extend: extend,
    create: function (width, height) {
      var self = Object.create(this);
      self.width = width;
      self.height = height;
      return self;
    },
    area: function () {
        console.log(this.width * this.height);
    }
};
</pre>
<p>这样当我们需要继承时，就可以像前几个方法一样用了</p>
<pre>
var Square = Rectangle.extend({
    // 重写实例化方法
    create: function (side) {
         return Rectangle.create.call(this, side, side);
    }
})

var s = Square.create(5);
s.area();
</pre>
<h2>结束语</h2>
<p>本文对去new关键字的方法做了一些罗列，但工作还远远没有结束，有非常多的地方值得拓展，比如：如何重新定义<code>instance of</code>方法，用于判断一个对象是否是一个类的实例？如何在去new关键字的基础上继续实现多继承？希望本文的内容在这里只是抛砖引玉，能够开拓大家的思路。</p>
<h2>引用资料</h2>
<ul> 
 <li> <p><a href="http://aaditmshah.github.io/why-prototypal-inheritance-matters/">Why Prototypal Inheritance Matters</a></p> </li> 
 <li> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a></p> </li> 
 <li> <p><a href="http://www.bennadel.com/blog/2184-Object-create-Improves-Constructor-Based-Inheritance-In-Javascript-It-Doesn-t-Replace-It.htm">Object.create() Improves Constructor-Based Inheritance In Javascript - It Doesn't Replace It</a></p> </li> 
 <li> <p><a href="http://dailyjs.com/2012/06/04/js101-object-create/">JS101: Object.create</a></p> </li> 
 <li> <p><a href="http://ejohn.org/blog/simple-class-instantiation/">Simple “Class” Instantiation</a></p> </li> 
 <li> <p><a href="http://stackoverflow.com/questions/4166616/understanding-the-difference-between-object-create-and-new-somefunction-in-j">Understanding the difference between Object.create() and new SomeFunction() in JavaScript</a></p> </li> 
 <li> <p><a href="http://stackoverflow.com/questions/12592913/what-is-the-reason-to-use-the-new-keyword-here">What is the reason to use the 'new' keyword here?</a></p> </li> 
 <li> <p><a href="http://stackoverflow.com/questions/13040684/javascript-inheritance-object-create-vs-new">JavaScript inheritance: Object.create vs new</a></p> </li> 
 <li> <p><a href="http://stackoverflow.com/questions/383402/is-javascript-s-new-keyword-considered-harmful">Is JavaScript 's “new” Keyword Considered Harmful?</a></p> </li> 
</ul>
<h2>作者简介</h2>
<p>李光毅，新晋前端工程师，现就职于爱奇艺，热于前端技术分享。</p>
<hr />
<p>感谢<a href="http://www.infoq.com/cn/author/崔康">崔康</a>对本文的审校。</p>
<p>给InfoQ中文站投稿或者参与内容翻译工作，请邮件至<a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com</a>。也欢迎大家通过新浪微博（<a href="http://www.weibo.com/infoqchina">@InfoQ</a>）或者腾讯微博（<a href="http://t.qq.com/infoqchina">@InfoQ</a>）关注我们，并与我们的编辑和其他读者朋友交流。</p><br><br><br><br><br><br></body></html>