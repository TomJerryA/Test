<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Key Takeaway Points and Lessons Learned from QCon London 2013</h3><p><style type="text/css">c2{direction:ltr;margin-left:0pt}.c4{margin-left:18pt}</style></p><p><font color="#ff0000">Introduction: TBD by Floyd M.</font></p><p><font color="#ff0000">Conclusion: TBD by Floyd M.</font></p><p><font color="#ff0000">Photos: Flickr:<a title="http://www.flickr.com/search/?q=qconlondon&amp;d=taken-20130304-&amp;ct=0&amp;mt=photos&amp;adv=1" href="http://www.flickr.com/search/?q=qconlondon&amp;d=taken-20130304-&amp;ct=0&amp;mt=photos&amp;adv=1">http://www.flickr.com/search/?q=qconlondon&amp;d=taken-20130304-&amp;ct=0&amp;mt=photos&amp;adv=1</a></font></p><p><font color="#ff0000">Blog posts including photos from QCon London 2013:</font></p><p><a title="http://alblue.bandlem.com/2013/03/qcon-day-1.html" href="http://alblue.bandlem.com/2013/03/qcon-day-1.html">http://alblue.bandlem.com/2013/03/qcon-day-1.html</a></p><p><a title="http://eventifier.co/event/qconlondon13/andypiper" href="http://eventifier.co/event/qconlondon13/andypiper">http://eventifier.co/event/qconlondon13/andypiper</a>&nbsp;</p><p>There is a bunch of tweets with links to photos. They appear throughout the article.</p><p>&nbsp;</p><p>&nbsp;</p><p class="c2"><a name="Keynotes" href="#h.l13mljszth73">Keynotes</a></p><p class="c4"><a name="The power of abstraction by Barbara Liskov" href="#h.1qtj2lbp16u">The power of abstraction by Barbara Liskov</a></p><p class="c4"><a name="Fun With Dead Languages by Damian Conway" href="#h.1qtj2lbp16u">Fun With Dead Languages by Damian Conway</a></p><p class="c4"><a name="8_Lines_of_Code_by_Greg_Young" href="#h.1qtj2lbp16u">8 Lines of Code by Greg Young</a></p><p class="c4"><a name="Instantly_Better_Presentations_by_Damian_Conway" href="#h.1qtj2lbp16u">Instantly Better Presentations by Damian Conway</a></p><p class="c4"><a name="A_Forward_Look_at_Federated_Wiki_by_Ward_Cunningham" href="#h.1qtj2lbp16u">A Forward Look at Federated Wiki by Ward Cunningham</a></p><p class="c2"><a href="#h.tv0moh186hmv" name="Distributed_Systems___REST">Distributed Systems / REST</a></p><p class="c4"><a name="A Platform for all that we know by Savas_Parastatidis" href="#h.cjgrray92kxi">A Platform for all that we know by Savas Parastatidis</a></p><p class="c4"><a name="No_Link_Left_Behind_by_Paul_Downey" href="#h.wehkyv1zzwk2">No Link Left Behind by Paul Downey</a></p><p class="c4"><a href="#h.rsl0t58lkyz8">Road to REST by Rickard Oberg</a></p><p class="c4"><a href="#h.9l30avfea9iv">HTTP/2.0: Challenges and Opportunities by Mark Nottingham</a></p><p class="c2"><a href="#h.t6l3w3piptb1">The Java Developer Track</a></p><p class="c4"><a href="#h.wjdpav99zs9q">The Java EE 7 Platform: Higher Productivity &amp; Embracing HTML 5 by Arun Gupta</a></p><p class="c4"><a href="#h.esveqxgssvof">Garbage Collection - The Useful Parts by Martijn Verburg</a></p><p class="c2"><a href="#h.1kp03cjscntq">The Developer Track</a></p><p class="c4"><a href="#h.d7q7v511o4o1">Web Development: You're Doing it Wrong by Stefan Tilkov</a></p><p class="c4"><a href="#h.b9lxxkd0qdlu">How to rescue our kids: fixing the ICT crisis at school by Simon Peyton Jones</a></p><p class="c4"><a href="#h.z7t9qpumv9z0">You are not a software developer! - Simplicity in practice by Russell Miles</a></p><p class="c4"><a href="#h.fnc5mcxiggf6">Performance Testing Java Applications by Martin Thompson</a></p><p class="c2"><a href="#h.5m8yquno77px">Building for Clouds</a></p><p class="c4"><a href="#h.7kryo4egv281">Clouds in Government - Perils of Portability by Gareth Rushgrove</a></p><p class="c4"><a href="#h.4z0oj1f2m7df">Extending CloudFoundry with new Services by Chris Hedley, Andrew Crump</a></p><p class="c4"><a href="#h.t2z59o2fcsoc">Racing Thru the Last Mile: Cloud Delivery Web-Scale Deployment by Alex Papadimoulis</a></p><p class="c2"><a href="#h.6r4awc59b9lq">Real Startups</a></p><p class="c4"><a href="#h.l7n8xqyx18ci">How to turn startup ideas into reality by taking money from strangers by Ian Brookes</a></p><p class="c2"><a href="#h.xf8hw0rervoy">Creative Thinking &amp; Visual Problem-solving</a></p><p class="c4"><a href="#h.vg9zxbz92827">Ideas, not Art: Drawing Out Solutions by Heather Willems</a></p><p class="c4"><a href="#h.4yki7pks068z">Machine Me by Fernando Orellana</a></p><p class="c2"><a href="#h.o8i9jqtufgmj">Handheld Banking</a></p><p class="c4"><a href="#h.jl0cyh7a9tzr">Put a UI Developer in a Bank; See what happens by Horia Dragomir</a></p><p class="c4"><a href="#h.2vj71ri6mkx4">Testing iOS Apps by Graham Lee</a></p><p class="c4"><a href="#h.jabytkhqce55">The Future of Mobile Banking by Michael Nuciforo</a></p><p class="c2"><a href="#h.f82qdjju0be7">Building Web Apis: Opening &amp; Linking Your Data</a></p><p class="c4"><a href="#h.2jyf9zqw058y">Introducing the BBC's Linked Data Platform and APIs by David Rogers</a></p><p class="c4"><a href="#h.3ywc0wis0i7k">The Why, What and How of Open Data by Jeni Tennison</a></p><p class="c4"><a href="#h.b3t4gkcse7kc">Building APIs by building on APIs by Paul Downey, David Heath</a></p><p class="c4"><a href="#h.4fkg68dubbrq">Building Hypermedia APIs with HTML by Jon Moore</a></p><p class="c4"><a href="#h.rmwujzf0ac6t">Generic Hypermedia and Domain-Specific APIs: RESTing in the ALPS by Mike Amundsen</a></p><p class="c2"><a href="#h.f3pie5krdoou">Schadenfreude - War Stories</a></p><p class="c4"><a href="#h.elyf4y9bbf2x">The inevitability of failure by Dave Cliff</a></p><p class="c4"><a href="#h.n6hiu7hdy1un">Painful success - lessons learned while scaling up by Jesper Richter-Reichhelm</a></p><p class="c2"><a href="#h.9m3e3gx2uy9p">Architectural Hangover Cure</a></p><p class="c4"><a href="#h.k1tlqhwxfrvh">Deleting Code at Nokia by Tom Coupland</a></p><p class="c2"><a href="#h.53pdglitvq0r">Agile in Actuality: Stories from the Front Line</a></p><p class="c4"><a href="#h.6dzemc35cm36">People over Process: Applying it in real world software development by Glen Ford</a></p><p class="c4"><a href="#h.2d8y8xrttvzl">Climbing out of a crisis loop: How a critical BBC back-end team reigned in a workflow crisis-to-crisis cycle by Rafiq Gemmail, Katherine Kirk</a></p><p class="c4"><a href="#h.qkhfi3fch61u">Between Fluffy Bunnies and Command &amp; Control: Agile Adoption in Practice by Benjamin Mitchell</a></p><p class="c4"><a href="#h.l5xem8u2kacx">Accelerating Agile: hyper-performing without the hype by Dan North</a></p><p class="c4"><a href="#h.d4m2m5eq9dt6">Yanking business into testing - with lots of vegetables by Gojko Adzic,&nbsp; Lukas Oberhuber</a></p><p class="c2"><a href="#h.33bqpnv4x5nu">Next Generation Mobile Apps</a></p><p class="c4"><a href="#h.retnbzjns061">New capabilities of HTML5 browsers by Maximiliano Firtman</a></p><p class="c4"><a href="#h.4tx00k7ibar">Architecting PhoneGap Applications by Christophe Coenraets</a></p><p class="c2"><a href="#h.h0ewjjv8mk2x">Finance (Design &amp; Architecture)</a></p><p class="c4"><a href="#h.6wcgybzcv4zh">High Performance Messaging for Web-Based Trading Systems by Frank Greco</a></p><p class="c4"><a href="#h.cw9w9z8jp2q4">How NOT to Measure Latency by Gil Tene</a></p><p class="c2"><a href="#h.9f4hvbt99gdd">Architectures of the Small &amp; Beautiful</a></p><p class="c4"><a href="#h.i1p31gybtoyg">Startup Architecture: how to lean on others to get stuff done by Robbie Clutton</a></p><p class="c4"><a href="#h.dwe4uoosl8vn">Inside Lanyrd's Architecture by Andrew Godwin</a></p><p class="c4"><a href="#h.9pd08udx2r7z">Green shoots in the brownest field: Being a startup in Government by Mat Wall</a></p><p class="c4"><a href="#h.33bwma60kudf">How we scaled Songkick for more traffic and more productive development by Marc Pacheco</a></p><p class="c4"><a href="#h.ixdhxgg5is37">Architecture of the Triposo travel guide by Jon Tirsen,&nbsp; Douwe Osinga</a></p><p class="c2"><a href="#h.kazr2u1pzgyy">The Modern Web Stack</a></p><p class="c4"><a href="#h.7niju7fdj9x3">Visualizing Information with HTML5 by Dio Synodinos</a></p><p class="c4"><a href="#h.agvns1ymze0t">Rich HTML/JS applications with knockout.js and no server by Steven Sanderson</a></p><p class="c2"><a href="#h.nzdbrybn6jsd">Finance, Technology &amp; Implementation</a></p><p class="c4"><a href="#h.wjqn3sedgcqu">In-Memory Message &amp; Trade repositories by John T Davies</a></p><p class="c4"><a href="#h.u93l1zhdu537">Consumerisation - what does it mean to a developer? by Chris Swan</a></p><p class="c4"><a href="#h.itp8zqv0221f">The technology behind an Equity Trade by John O'Hara</a></p><p class="c2"><a href="#h.jbugzfqr7kgd">Big Data NoSQL</a></p><p class="c4"><a href="#h.rwrirdpzbcos">Big Data: Making Sense of it all! by Jamie Engesser</a></p><p class="c4"><a href="#h.qv7kjmd0sup1">The Past, Present, and Future of NoSQL by Matt Asay</a></p><p class="c4"><a href="#h.st28f3ok8xof">A little graph theory for the busy developer by Jim Webber</a></p><p class="c4"><a href="#h.gx9nrjkiop00">Approximate methods for scalable data mining by Andrew Clegg</a></p><p class="c2"><a href="#h.pq1mewx0oxjc">Making the Future</a></p><p class="c4"><a href="#h.25n3tu1ve1b9">Physical Pi by Romilly Cocking,&nbsp; Steve Freeman</a></p><p class="c4"><a href="#h.dd5qdgia1b85">Here Comes Wearable Technology! by Rain Ashford</a></p><p class="c2"><a href="#h.r8drmwfb15ov">Attracting Great People</a></p><p class="c4"><a href="#h.c0dsb4aics48">Hire Education - making interviews rock by Trisha Gee, Dan North</a></p><p class="c4"><a href="#h.9s1x677aupth">NoHR Hiring by Martijn Verburg, Zoe Slattery</a></p><p><b> </b></p><p class="c2"><b><a href="#h.6zuocdzdap8a">NoSQL Solutions Track</a></b></p><p><b> </b></p><p class="c4"><b><a href="#h.o1jnf0k56phs">Moderated NoSQL Panel by Alvin Richards, Chris Molozian, Andrew Elmore, Ian Robinson</a></b></p><p><b> </b></p><p class="c4"><b><a href="#h.xqdz3wp0a6aj">Scaling for Humongous amounts of data with MongoDB by Alvin Richards</a></b></p><p><b> </b></p><p class="c4"><b><a href="#h.vf8khjxbhe16">Becoming Polyglot; Putting Neo4j into production and what happened next by Toby O'Rourke</a></b></p><p><b> </b></p><p class="c4"><b><a href="#h.jyi3tjphxh4u">Eventual Consistency in the Real World by Chris Molozian</a></b></p><p><b> </b></p><p class="c4"><b><a href="#h.9zcuer74mrdi">Financial Big Data - Loosely Coupled, Highly Structured by Andrew Elmore</a></b></p><p><b> </b></p><p class="c2"><b><a href="#h.obcdaan4m36">Solution Track Thursday 2</a></b></p><p><b> </b></p><p class="c4"><b><a href="#h.fjvsplqovixn">Big Data @ Skype by Bryan Dove</a></b></p><p><b> </b></p><p class="c2"><b><a href="#h.bzvlqdqb9z13">Events</a></b></p><p><b> </b></p><p class="c2"><b><a href="#h.n979tv53huxz">Opinions about QCon</a></b></p><p><b> </b></p><p class="c2"><b><a href="#h.fa6a8d1ctdbs">Takeaways</a></b></p><p><b> </b></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p class="c2"><b><a href="#h.35fvkqrobfh">Conclusion</a></b></p><h2><a name="h.l13mljszth73"></a><span>Keynotes</span></h2><h4><a name="h.1qtj2lbp16u"></a><a href="http://qconlondon.com/london-2013/presentation/Keynote:%20The%20power%20of%20abstraction">The power of abstraction</a><a href="http://qconlondon.com/london-2013/speaker/Barbara+Liskov"> by Barbara Liskov</a></h4><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-1.html">Alex Blewitt</a> attended this keynote:</p><blockquote> 
 <p>Professor Barbara Liskov from MIT opened the conference, covering a historical retrospective on the evolution of programming. … As well as describing the Liskov Substitution Principle (which i’ve written about <a href="http://alblue.bandlem.com/2004/07/java-liskov-substution-principle-does.html">before</a>) – which, she notes she didn’t coin – as being a desirable property to allow subtypes to replace functionally equivalent object types. Of course, as she noted in her presentation, this doesn’t always hold; for example, both a <code>Queue</code> and a <code>Stack</code> have the same signature types but different semantic behaviour, and clearly the substitution rules only apply for those with semantic compatibility.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/m4tthall">@m4tthall: </a></u>program readability is much more important than program writability - Liskov, so true and often forgotten #QConLondon</p> 
 <p><u><a href="https://twitter.com/teropa">@teropa: </a></u>In a language, it's not the processing power that matters, it's the expressive power #liskov #qconlondon</p> 
 <p><u><a href="https://twitter.com/andypiper">@andypiper: </a></u>People still don't know how to handle concurrency *ripple of laughter* #qconlondon</p> 
 <p><u><a href="https://twitter.com/PopCatalin">@PopCatalin: </a></u>#qconlondon Simplicity matters tremendously - Barbara Liskov</p> 
 <p><u><a href="https://twitter.com/alblue">@alblue: </a></u>Polymorphism in 1974 #qconlondon <a href="https://t.co/NPZesEdrF5">https://t.co/NPZesEdrF5</a></p> 
 <p><u><a href="https://twitter.com/alblue">@alblue: </a></u>Duck typing in 1974 #qconlondon <a href="https://t.co/MYcsTEtX3S">https://t.co/MYcsTEtX3S</a></p> 
 <p><u><a href="https://twitter.com/teropa">@teropa: </a></u>Liskov substitution principle explained by Liskov! She calls it common sense #qconlondon</p> 
 <p><u><a href="https://twitter.com/sbisson">@sbisson: </a></u>Fascinating keynote by Turing Award winner Barbara Liskov on the history of programming abstraction. #qconlondon</p> 
 <p><u><a href="https://twitter.com/m4tthall">@m4tthall: </a></u>Liskov - students MIT tend to start with Python rather than Java and C# as they aren't as easy to start with #QConLondon</p> 
 <p><u><a href="https://twitter.com/andypiper">@andypiper: </a></u>Liskov - we need a language that meets needs of advanced and beginner users they can grow with #qconlondon</p> 
 <p><a href="https://twitter.com/fauna5">@fauna5: </a>How to get people to remember your talk? Have a live artist creating a mural as you speak #badass #qconlondon <a href="http://t.co/VDlrCRHm7Z">http://t.co/VDlrCRHm7Z</a></p> 
 <p><a href="https://twitter.com/RobertMircea">@RobertMircea: </a>Great infographic live drawing at #qconlondon keynote by @ImageThink <a href="http://t.co/CAJZHzP81s">http://t.co/CAJZHzP81s</a></p> 
 <p><u><a href="https://twitter.com/jxstanford">@jgrodziski: </a></u>All the links to free copies of articles Barbara Liskov referred to in her talk at #qconlondon 2013 <a href="http://t.co/WK0XpLKjUV">http://t.co/WK0XpLKjUV</a></p> 
</blockquote><h4><a name="h.1qtj2lbp16u"></a><a href="http://qconlondon.com/london-2013/presentation/Keynote:%20Fun%20With%20Dead%20Languages">Fun With Dead Languages</a><a href="http://qconlondon.com/london-2013/speaker/Damian+Conway"> by Damian Conway</a></h4><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-1.html">Alex Blewitt</a> attended this keynote:</p><blockquote> 
 <p>The gist of the presentation was that of avoiding language monoculture; by way of example, his first slide was of a type of bananas now extinct having been wiped out by a particular disease some time in the past, and that the current crop of bananas being genetically identical may suffer the same fate in the future. Applied to languages, and more specifically developers of those languages, his argument was working only in a single language necessarily increases the possibility that external changes may make the language redundant or enforce a particular mind set.</p> 
 <p>His examples of both C++ and Latin were well received; he used operator overloading in C++ to render a text file with a series of lines like <code>state1 ------&gt; state2</code> (having overloaded the <code>--</code> operator to return a partial function, and the <code>&gt;</code> operator to apply that function) to represent the source of a state machine. Importantly this also gave the source file the ability to re-order the lines of text in the source file and not change the meaning of it, introducing the point of a position independent language.</p> 
 <p>The final part of the presentation was exploring that point further, by using the concept of Latin’s expressive tenses to represent whether a variable’s value was being assigned or referred to.</p> 
</blockquote><p><a href="http://willhamill.com/2013/03/06/qcon-london---day-one/">Will Hamill</a> attended this keynote:</p><blockquote> 
 <p>Damian demonstrated some diversity in style by using PostScript, a declarative language (old school!), to write a program that determines the value of Pi by declaring functions and using the stack to store function results, as it has no variables or methods (much like how compiled code <em>actually</em> works deep down in the plumbing, underneath all the abstraction). As a bonus, because the only common use of PostScript these days is in printers, you can still write this program and send its source file to most office printers and have them actually print out increasingly accurate estimates of Pi.</p> 
 <p>Damian also illustrated translating a C++ implementation of <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Eratosthenes’ Sieve</a> into Latin (yes, <em>Latin</em>) to show how the need for ordering of variables and method operators could be removed through the use of different inflexions on the nouns being used - when you have a suffix at the end of a variable telling you it is being operated on, and a suffix on another telling you that it is operating on something then the ordering doesn’t matter any more. This part of the talk was fantastically entertaining and ended with a demonstration of the actual program written in Latin and executing to produce the prime numbers up to CCLV (that’s 225 for us non-Latin types).</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/JamesEdwardsUk">@JamesEdwardsUk: </a>Fun with dead languages by Damien Conway - good start, funny guy! #qconlondon</p> 
 <p><a href="https://twitter.com/timanderson">@timanderson: </a>People who can only code in Java are &quot;sterile clones&quot; says Damian Conway #qconlondon</p> 
 <p><a href="https://twitter.com/h269">@h269: </a>At the very entertaining Keynote: Fun With Dead Languages #qconlondon</p> 
 <p><a href="https://twitter.com/janerikcarlsen">@janerikcarlsen: </a>#QConLondon Lovely keynote to conclude an awesome day of thought-provoking stuff.</p> 
 <p><a href="https://twitter.com/alblue">@alblue: </a>Nextstep terminal makes an appearance at #qconlondon <a href="https://t.co/Mt3rDunJRE">https://t.co/Mt3rDunJRE</a></p> 
 <p><a href="https://twitter.com/CaplinTech">@CaplinTech: </a>We're learning how to code PostScript. Not entirely sure why, but it's very amusing #qconlondon</p> 
 <p><a href="https://twitter.com/garethr">@garethr: </a>Now wondering if I want to write postscript or Java for my next project. I blame Damian Conway #qconlondon</p> 
 <p><a href="https://twitter.com/secboffin">@secboffin: </a>Postscript looks odd now, but there are very few conventions to learn. A bit like LISP. #qconlondon</p> 
 <p><a href="https://twitter.com/secboffin">@secboffin: </a>Seeing C++ called a dead language at #qconlondon. Had Stroustrup not nailed it to the perch etc.</p> 
 <p><a href="https://twitter.com/Frank_Scholten">@Frank_Scholten: </a>LOL &quot;Instead of a cluster with a java web app use recycled postscript printers. You get persistant storage too&quot; ~ Damian Conway #QConLondon</p> 
 <p><a href="https://twitter.com/sbisson">@sbisson: </a>Damien Conway turning Latin into a programming language at #qconlondon</p> 
 <p><a href="https://twitter.com/dthume">@dthume: </a>Move over lady lovelace; romans may have been the world's first programmers; Damien Conway at #qconlondon</p> 
 <p><a href="https://twitter.com/Frank_Scholten">@Frank_Scholten: </a>Never learned latin in school. You can change the order without changing meaning. So let's program in latin! D. Conway keynote #QConLondon</p> 
 <p><a href="https://twitter.com/dgheath21">@dgheath21: </a>#qconlondon <a href="http://t.co/gJgKvQNIEn">http://t.co/gJgKvQNIEn</a></p> 
 <p><a href="https://twitter.com/Frank_Scholten">@Frank_Scholten: </a>#perl $s=count() in #latin becomes countementum Damian Conway's keynote #QConLondon</p> 
 <p><a href="https://twitter.com/pablojimeno">@pablojimeno: </a>Programming in Latin. Simply amazing Damian Conway #QconLondon&Acirc;&nbsp; <a href="http://t.co/XrBac2ZWHP">http://t.co/XrBac2ZWHP</a></p> 
 <p><a href="https://twitter.com/secboffin">@secboffin: </a>Hilarious, but shows power of declension in programming. Sieve of Eratosthenes in Latin at #qconlondon. And it runs! http://t.co/doQ1qm9eOG</p> 
 <p><a href="https://twitter.com/alblue">@alblue: </a>I’ve never seen the sieve of Eratosthenes written in Latin before #qconlondon https://t.co/5f1SGF5sWh</p> 
 <p><a href="https://twitter.com/BlackPepperLtd">@BlackPepperLtd: </a>Learning to program in Latin at #QConLondon. Interesting keynote about lessons that can be learned from dead programming languages.</p> 
 <p><a href="https://twitter.com/dthume">@dthume: </a>Programming languages define the way in which programmers think Damien Conway at #qconlondon</p> 
 <p><a href="https://twitter.com/alblue">@alblue: </a>Probably the best keynote I have ever seen. #qconlondon <a href="https://t.co/MIBKT5J7zf">https://t.co/MIBKT5J7zf</a></p> 
 <p><a href="https://twitter.com/markhobson">@markhobson: </a>Amazing, keynote defines a Latin-based programming language live on stage. #qconlondon @BlackPepperLtd</p> 
</blockquote><h4><a name="h.1qtj2lbp16u"></a><a href="http://qconlondon.com/london-2013/presentation/Parallel%20KEYNOTE:%208%20Lines%20of%20Code%20-%20Fleming%20Room%203rd%20Floor">8 Lines of Code</a><a href="http://qconlondon.com/london-2013/speaker/Greg+Young"> by Greg Young</a></h4><p><a href="http://www.redcorona.com/conference/qcon2013/day2.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>The particular example that he picks is a seemingly simple command on an object repository; something like:</p> 
 <pre>
[Transactional]
public class DeactivateCommand {
	private readonly ItemRepository repository;

	public DeactivateCommand(ItemRepository repository){
		this.repository = repository;
	}

	public virtual void Deactivate(Item item){
		repository.Deactivate(item);
	}
}</pre> 
 <p>What complexity lurks behind that <code>[Transactional]</code>? If you are using a typical aspect-oriented programming (AOP) framework, a dynamic proxy (i.e. a runtime extension of your class) will be involved to perform the interception and wrapping of methods to implement the transactional behaviour; not only is that complex, difficult to understand and extremely difficult to track down problems with, but it also introduces 'just because' rules to our coding that don't make sense: what happens if we forget to add that <code>virtual</code> (answer: the proxy won't work), or if we <code>return this;</code> from a proxied method (answer: you lose the proxy; this is known as the 'leaky this problem'). How do we explain this to a new team member?</p> 
 <p>If this command object is instantiated through a dependency injection or IOC container, finding out what it is using as its repository requires looking through magic non-code configuration, too.</p> 
 <p>Greg says, and I agree with this: &quot;Frameworks have a tendency to introduce magic into my system&quot;. They do so in order to hide the complexity involved in solving the complex problem they are designed to address – but we should look at our particular problem and ask whether our problem requires us to solve that one. Can we rephrase our problem to avoid the need for magic? Using the example of dynamic proxies again, we see that the problem they are designed to solve is intercepting method calls with variable parameters; if we control the whole codebase, we can change the problem so that method calls don't have variable parameters, and the AOP framework becomes unnecessary!</p> 
</blockquote><p><a href="http://blog.caplin.com/2013/03/07/qcon-2013-day-two-end-of-day-review/">Mike Salsbury</a> attended this session:</p><blockquote> 
 <p>This was a talk about Simplicity and Magic.&nbsp; Frameworks contain magic, and IoC is like magic.&nbsp; The problem is that the more magic there is in your code the harder it is for anyone new to ramp up and be able to contribute.&nbsp; So you are only able to hire people who already know how to do magic.</p> 
 <p>It is much easier (and more useful) to explain Composition to a junior than the magic of Dynamic Proxies.&nbsp; Along the way we also considered whether single method interfaces shouldn’t be interfaces but maybe a function.&nbsp; There was also some examples of using lambdas.&nbsp; Also how Factory can be an anti pattern as well as a pattern.&nbsp; And the partial application pattern.</p> 
 <p>Overall the take home message was the same one I got from an AI professor.&nbsp; Don’t make it harder than it is.&nbsp; Do you really need a framework?&nbsp; Or is it just easier to mask the real problem if you use a framework.&nbsp; If the solution to your problem doesn’t require a framework, don’t use one. Keep it Simple.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/octoberclub">@octoberclub: </a>get rid of magic in yr code base to achieve simplicity. functional style. @gregyoung #qconlondon #IoC #AOP</p> 
 <p><a href="https://twitter.com/m4tthall">@m4tthall: </a>Greg Young &quot;IOC Containers make it very easy to do things you shouldn't be doing&quot; #QConLondon</p> 
 <p><a href="https://twitter.com/jgrodziski">@jgrodziski: </a>#qconlondon @gregyoung &quot;beware of the magic frameworks bring with them&quot;</p> 
 <p><a href="https://twitter.com/octoberclub">@octoberclub: </a>IoC containers make it all too easy to introduce massive complexity @gregyoung #qconlondon</p> 
 <p><a href="https://twitter.com/m4tthall">@m4tthall: </a>#gregyoung very often tools hide problems, tools can add complexity, you own all the code, regardless if it is in ext. library #QConLondon</p> 
 <p><a href="https://twitter.com/matlockx">@matlockx: </a>Greg young: &quot;you own all code in your project...your boss doesn't care if the bug was in someone else's library #QConLondon</p> 
</blockquote><h4><a name="h.1qtj2lbp16u"></a><a href="http://qconlondon.com/london-2013/presentation/Parallel%20KEYNOTE:%20Instantly%20Better%20Presentations%20-%20Churchill%20Auditorium%20Ground%20Floor">Instantly Better Presentations</a><a href="http://qconlondon.com/london-2013/speaker/Damian+Conway"> by Damian Conway</a></h4><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-2.html">Alex Blewitt</a> attended this keynote:</p><blockquote> 
 <p>Thursday started off with another classic presentation from Damian Conway, this time with a crash course on how to deliver “Instantly Better Presentations”…</p> 
 <ul> 
  <li>Be passionate about what you do – and sound like you’re enjoying it</li> 
  <li>Be knowledgeable about your subject – if that means learning it, so be it</li> 
  <li>Slides are for the most important point only – don’t read along text from it</li> 
  <li>If you have to demo running code, use animations to show code flow</li> 
  <li>If you can’t use animation tools, use multiple slides and animate manually</li> 
  <li>Handouts are for afterwards, not a copy of the slides</li> 
  <li>Get rid of all unnecessary backgrounds/graphics/bullets</li> 
  <li>Rehearse, rehearse, rehearse (at least 3 times before giving it)</li> 
  <li>Tell the audience when questions are OK (at the end, during)</li> 
  <li>Talk to a <a href="http://images.google.co.uk/search?hl=en&amp;biw=1680&amp;bih=829&amp;tbm=isch&amp;q=happy+audience&amp;revid=1115224740&amp;sa=X&amp;ei=T0lAUc_SNsHYOa7IgIAG&amp;ved=0CEwQgxY">picture of a large audience</a> if you can’t find one</li> 
  <li>Tell a story by choosing points carefully and threading a narrative through</li> 
 </ul> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/Gshtrifork">@Gshtrifork: </a>Stories help us manage complexity and help us remember information! #qconlondon Tell it as a story (Damian Conway)</p> 
 <p><a href="https://twitter.com/Gshtrifork">@Gshtrifork: </a>Less is More #qconlondon</p> 
 <p><a href="https://twitter.com/Gshtrifork">@Gshtrifork: </a>Show less on more slides... #qconlondon</p> 
 <p><a href="https://twitter.com/ravinar">@ravinar: </a>Every unneeded decoration obscures your message, show less and on more slides - Damian Conway #qconlondon</p> 
 <p><a href="https://twitter.com/chrismadelin">@chrismadelin: </a>Better technical presentations - Practice in front of your cat, it's harder to hold their attention #qconlondon <a href="http://t.co/yaPSPKpRbQ">http://t.co/yaPSPKpRbQ</a></p> 
 <p><a href="https://twitter.com/mjpt777">@mjpt777: </a>Totally awesome keynote by Damian Conway on how to give better presentations. Step 1 - know your subject and be passionate. #QConLondon</p> 
</blockquote><h4><a name="h.1qtj2lbp16u"></a><a href="http://qconlondon.com/london-2013/presentation/Keynote:%20A%20Forward%20Look%20at%20Federated%20Wiki">A Forward Look at Federated Wiki</a><a href="http://qconlondon.com/london-2013/speaker/Ward+Cunningham"> by Ward Cunningham</a></h4><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-3.html">Alex Blewitt</a> attended this keynote:</p><blockquote> 
 <p>Today’s keynote was the master of the wiki, Ward Cunningham (<a href="http://twitter.com/wardcunningham">@WardCunningham</a>) on <a href="http://qconlondon.com/dl/qcon-london-2013/slides/WardCunningham_KeynoteAForwardLookAtFederatedWiki.pdf">Federated Wiki</a>.</p> 
 <p>The point of a federated wiki is to expose data through markup languages (think CSV meets markdown) and for a page to render data from whichever source it has come from. Not only that, but data sources can be combined from other sources or pages, so that blended views of data can be combined together.</p> 
 <p>There’s an example federated wiki at <a href="http://ward.fed.wiki.org/view/welcome-visitors/view/smallest-federated-wiki">ward.fed.wiki.org</a> along with some Vimeo videos demonstrating what it is like (<a href="http://vimeo.com/27671065">http://vimeo.com/27671065</a>,<a href="http://vimeo.com/27671347">http://vimeo.com/27671347</a> and <a href="http://vimeo.com/27673743">http://vimeo.com/27673743</a>).</p> 
 <p>The use of <a href="http://d3js.org/">d3js</a> to provide the chart rendering and graphics in a browser was a pretty neat trick. It uses HTML5 Canvas if available, and if not falls back to SVG and even VML to render the graphics, so it works on almost every browser that has a graphical interface.</p> 
</blockquote><p><a href="http://www.redcorona.com/conference/qcon2013/day3.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>His newest idea is that of a <i>federated</i> wiki which can pull in information from an entire information ecosystem. What does he mean by that? Just as a normal wiki allows collaborative accumulation and interpretation of information about one subject, a federated wiki allows access to information (held on individual wikis, naturally) from a variety of sources. For example, a federation about cars could consist of individual wikis held by manufacturers, parts suppliers, garages, amateur enthusiasts and traffic laws.</p> 
 <p>The actual federation mechanism would act in a similar way to inheritance, with wikis being able to specify others as their base, with pages within the base being overridden by those in the higher level one if there is a conflict. Because content can be data or calculations, as well as text, and data can be passed between pages, that means that calculations or visualisations from one wiki can operate on data and results in another, or even override data sources in another.</p> 
 <p>A traditional wiki only shows one page at a time, in one browser tab. Ward showed how a view into a federated wiki opens several panels, each showing a different page, and how data flows 'across' the view between pages – so by changing which pages are open to their left, visualisation pages can show a graph of something different, or calculations can operate on different data sources. Information referred to in a calculation or visualisation is looked for up the current page, and if it isn't there, it's looked for to the left.</p> 
 <p>The wiki itself allows for client- and server-side plugins to interpret the markup, allowing a particular wiki to interpret its own markup as a domain-specific language (DSL). Ward showed a demo of a federated wiki controlling a microcontroller chip over USB, via a serverside plugin which translates wiki markup commands into chip messages.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/jxstanford">@benjaminm: </a></u>Scaling Agile is often 'How can I make this team of 100 act like a team of 15, but I have to have 100 people @WardCunningham #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@tastapod: </a></u>Lovely! @WardCunningham at #QConLondon: &quot;I want to elevate plagiarism to a virtue, and call it collaboration.&quot; #federatedwiki</p> 
 <p><u><a href="https://twitter.com/jxstanford">@teropa: </a></u>Don't be afraid to recycle the things you've learned... And each time to do it a little less well @WardCunningham #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@EdMcBane: </a></u>Federated wiki is no about why, it is about &quot;why not?&quot;. Aperture-Science-style keynote from @WardCunningham at #QConLondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@chickoo75: </a></u>Wiki interactions with a micro controller! Never expected to see a live demo of this stuff. #qconlondon Only @wardcunningham!!!</p> 
 <p><u><a href="https://twitter.com/jxstanford">@sbisson: </a></u>Federated Wikis as collaborative dynamic endpoints for the Internet of Things. Fascinating talk by Ward Cunningham at #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@alblue: </a></u>The great @WardCunningham at #qconlondon https://t.co/O5cF3g5uUP</p> 
</blockquote><h2><a name="h.tv0moh186hmv"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=778">Distributed Systems / REST</a></h2><h4><a name="h.gj9nbprn9aj9"></a><a href="http://qconlondon.com/london-2013/presentation/A%20Platform%20for%20all%20that%20we%20know">A Platform for all that we know</a><a href="http://qconlondon.com/london-2013/speaker/Savas+Parastatidis"> by Savas Parastatidis</a></h4><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/reteganc">@reteganc: </a>Web is the data and information platform, but not yet the knowledge, intelligence or wisdom platform. Knowledge is next. @qconlondon</p> 
</blockquote><h4><a name="h.gj9nbprn9aj9"></a><a href="http://qconlondon.com/london-2013/presentation/No%20Link%20Left%20Behind">No Link Left Behind</a><a href="http://qconlondon.com/london-2013/speaker/Paul+Downey"> by Paul Downey</a></h4><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/robb1e">@robb1e: </a>gov.uk hand rolled CMS uses markdown with https://t.co/A0WCfZftr2 #qconlondon</p> 
 <p><a href="https://twitter.com/AgileSteveSmith">@AgileSteveSmith: </a>Great gov.uk talk by Paul Downey @psd &quot;a dashboard is useless without a call to action&quot; #qconlondon</p> 
 <p><a href="https://twitter.com/mahemoff">@mahemoff: </a>Govspeak is @GovUK's markdown-derived markdown language /via @robb1e #qconlondon https://t.co/5YXSbt1gY9</p> 
</blockquote><h4><a name="h.gj9nbprn9aj9"></a><a href="http://qconlondon.com/london-2013/presentation/Road%20to%20REST">Road to REST</a><a href="http://qconlondon.com/london-2013/speaker/Rickard+Oberg"> by Rickard Oberg</a></h4><p><a href="http://www.blackpepper.co.uk/posts/qcon-london-2013/">Mark Hobson</a> attended this session:</p><blockquote> 
 <p>He described the design evolution of a RESTful service that provided the back-end to various client platforms. The lessons learnt were two-fold: firstly, the resources exposed by the service should correlate to use-cases, rather than entities; and secondly, the often neglected <a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a> constraint of REST allows clients to discover, and adapt to, server changes. Embracing these ideas again blurs the boundary between RESTful services and their UI, or as Rickard aptly put it, “a good REST API is like an ugly website”.</p> 
</blockquote><p><a href="http://willhamill.com/2013/03/06/qcon-london---day-one/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Rickard made an impassioned defence of the principles underlying REST and their usefulness, and asked one thing of the attendees: if your application communicates with your API in a way that isn’t actually RESTful - please stop calling it rest!</p> 
 <p>RESTful APIs require resource linking in order to actually meet the requirement for using HTTP as the engine of application state (HATEOAS), but most common implementations don’t do this. Rickard demonstrated how most websites are actually better REST API clients of the server resources than hand-rolled REST clients for web applications, as they only interact by following links or submitting forms and do so with properly described resource links and using the HTTP GET/POST verbs as intended with meaningful URLs.</p> 
 <p>Rickard showed how rather than exposing the domain model via the API, a more semantically meaninful and truly RESTful implementation is reached by exposing use cases; actions within the application described as URLs and acted upon with HTTP verbs. This also simplifies client development and documentation. For example, instead of a URL describing /users/willhamill/changepassword from a use-case perspective this could be /accountmanagement/changepassword/willhamill for changing my own password and /administration/changepassword/username/willhamill to change the password of another user.</p> 
 <p>In terms of simplifying server side implementation, this means that we can easily determine that actions in account management act upon the authenticated current user, but the actions performed in the administration use cases must require the permission (or role or whatever) to participate in these use cases. It also means that we can have this check a requirement for any resource after /administration but not need to specify it on on each single resource. We could also do something like have /administration paths only available within the internal network.</p> 
 <p>URLs exposed in the system start with higher level use cases and each / in the path represents a sub-use case, and doing a HTTP GET on / will list the actions available to the current user within that use case. I think this approach of exposing use cases rather than data or domain models makes a lot of sense and can make it easier to arrange the resources and actions in a web application. Rickard tied his example back into the point he made about a website - if we wanted to display a simple resource on a web page in this hierarchy we would likely be constructing a URL of this nature to make a meaningful link to the resource.</p> 
</blockquote><p><a href="http://airportcafe.net/2013/03/11/qcon-2013-my-takeaways/">Kevin Hodges</a> attended this session:</p><blockquote> 
 <p>Figure your use cases and expose them on your API<br /> The server is in charge of providing a list of links based on the state of the resource and what services are available (simplifies the client)<br /> Client decides columns and filtering from fixed set<br /> RESTful clients should follow links and submit forms, if not, you are doing something wrong</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/stilkov">@stilkov: </a>A good REST API is like an ugly website; RESTful clients should follow links and submit forms @rickardoberg at #qconlondon</p> 
 <p><a href="https://twitter.com/NuagenIT">@NuagenIT: </a>Loved how @rickardoberg apologised about RMI and JBoss during his talk on REST #qconlondon</p> 
 <p><a href="https://twitter.com/grantjforrester">@grantjforrester: </a>Good session. Even the worst websites are probably better than most REST APIs today. #qconlondon</p> 
 <p><a href="https://twitter.com/PopCatalin">@PopCatalin: </a>#QConLondon if you do REST right then the client becomes a fancy browser (renderer)</p> 
</blockquote><h4><a name="h.gj9nbprn9aj9"></a><a href="http://qconlondon.com/london-2013/presentations/show_presentation.jsp?oid=5044">HTTP/2.0: Challenges and Opportunities</a><a href="http://qconlondon.com/london-2013/speaker/Mark+Nottingham"> by Mark Nottingham</a></h4><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-1.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>Mark Nottingham (<a href="http://twitter.com/mnot">@mnot</a>) gave an overview of what’s coming up with HTTP/2.0, including some of the rationale for providing new protocol layers to save data and reduce the number of packets required between web requests. The main principle is that between subsequent requests to the same server, the client transmits most of the same set of request headers (<code>User-Agent</code>, <code>Accept</code>, <code>Host</code> etc.) which can be avoided with subsequent requests with a sufficent encoding pass.</p> 
 <p>However, the transport layer is responsible for stripping and then re-assembling the layers on the other end; the client still sees the same full set of headers from the client that it is expecting to see even if the interim layers don’t actually send those bits.</p> 
</blockquote><p><a href="http://www.davidarno.org/2013/03/06/qcon-london-2013-day-1/">David Arno</a> attended this session:</p><blockquote> 
 <p>The web has a problem: HTTP. Web pages are growing larger and more complex, involving many request/response cycles to complete the page and TCP works badly with HTTP. These problems are particularly severe with the fastest growing sector of web use: mobile. The mobile Opera browser even seeks to solve this by bypassing HTTP completely if it can by using its Opera Turbo proxy mechanism. Google have been working on an another alternative: SPDY. So the IETF have set up an HTTP working group to look in to a v2 of HTTP. The group is considering some pretty radical ideas, such as it being binary format (no more using telnet to examine HTTP responses, new tools will be required) and having the server automatically push CSS, JavaScript and image files associated with a page, rather than waiting for requests. The migration won’t be easy though, and it’s possible that the http and https protocols will have to be replaced with new ones. Even this might not be enough to solve all problems, so the group is even considering alternatives to TCP.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/bluefloydlaci">@bluefloydlaci: </a>#QConLondon great presentation on HTTP/2.0's challenges, opportunities, roadmap. HTTP 2.0 is the next great thing to come</p> 
 <p><a href="https://twitter.com/kevdude">@kevdude: </a>HTTP/2.0: Challenges and Opportunities interesting talk on header compression, latency &amp; reducing http request #QConLondon</p> 
 <p><a href="https://twitter.com/DavidArno">@DavidArno: </a>Also attending interesting talk on HTTP v2 at #qconlondon. Boy, is it different to v1.1, eg binary based &amp; server push built in.</p> 
 <p><a href="https://twitter.com/sandropaganotti">@sandropaganotti: </a>HTTP 2.0 will be no longer text based !! bye bye telnet testing :D #qcon</p> 
</blockquote><h2><a name="h.t6l3w3piptb1"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=843">The Java Developer Track</a></h2><h4><a name="h.ehjorhoqi7rl"></a><a href="http://qconlondon.com/london-2013/presentation/The%20Java%20EE%207%20Platform:%20Higher%20Productivity%20&amp;%20Embracing%20HTML5">The Java EE 7 Platform: Higher Productivity &amp; Embracing HTML 5</a><a href="http://qconlondon.com/london-2013/speaker/Arun+Gupta"> by Arun Gupta</a></h4><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-1.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>Arun (developer evangelist from Oracle) provided a view on what’s coming up with Java EE 7, including a new annotation based message driven bean and simpler setup for enterprise Java applications. Most of the upgrades are evolutionary rather than revolutionary, although a couple of new APIs will provide standard JSON parsing (both in streaming and later object form).</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/gurkein">@gurkein: </a>J2EE 7 standardizes spring batch #qconlondon</p> 
</blockquote><h4><a name="h.ehjorhoqi7rl"></a><a href="http://qconlondon.com/london-2013/presentation/Garbage%20Collection%20-%20The%20Useful%20Parts">Garbage Collection - The Useful Parts</a><a href="http://qconlondon.com/london-2013/speaker/Martijn+Verburg"> by Martijn Verburg</a></h4><p><a href="http://www.redcorona.com/conference/qcon2013/day1.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>The first point he made is that, although the name would suggest otherwise, garbage collection is not really about the garbage (dead objects); it is about <i>live</i> objects. Garbage collection tracks the tree of object references from each root node (an entry point or currently active stack reference) each generation; what is available for collection is simply those objects that have not been located, and the Java GC doesn't need to know anything about them. (The .Net GC is a little different as it supports finalisers, so it needs to know what has died, but the main point remains the same.)</p> 
 <p>Java splits its memory space into three separate areas, known as <i>memory pools</i>:</p> 
 <ul> 
  <li><i>Younggen</i> space, which is further subdivided into 'Eden', the space for new objects, and 'Survivor 0' and 'Survivor 1'. Short lifespan objects never leave these pools. Almost all new objects are created in the Eden pool, and move to the current Survivor pool if they are still alive when younggen GC operates; that happens whenever Eden reaches a threshold size. The two Survivor pools alternate being the one in use; during a GC, objects are moved into the current Survivor pool (either from the previous Survivor pool or from Eden), and their previous location dereferenced. (Similar things happen in .Net, which is why objects that need a fixed memory location must be given a fixed-location <code>GCHandle</code>.) Younggen collection typically happens multiple times per second in a running application.</li> 
  <li><i>Oldgen</i> or <i>tenured</i> space. Once objects reach a certain lifetime (4 collections by default), they are instead moved into this memory pool. Objects too large to fit into the appropriate younggen space are also moved here, so rapid allocation of large amounts of memory can pollute tenured space with young objects, leading to inefficient collection. Collection in this space is done by a concurrent mark-and-sweep algorithm, pausing execution for a minimum amount of time, until the space becomes too full or too fragmented, when a full compacting, pausing collection is run.</li> 
  <li><i>Perma-Gen</i> space, for objects which have an expected lifetime of the entire process duration, e.g. Spring configuration and services. Garbage collection doesn't run at all here, but references from perma-gen objects can act as GC roots (see below) into other pools.</li> 
 </ul> 
 <p>Why split up the memory we manage into pools like this? The answer comes from the Weak Generation Hypothesis – really more of a Theory as it is empirically backed – which states that most objects have a very short lifespan, a few objects have a long lifespan, and few objects are in between. …</p> 
 <p>Finally, we learnt what <code>OutOfMemoryException</code> actually means in Java. It means that one of the following is true: 98% of execution time has been taking place in garbage collection; a full GC execution freed up less than 2% of the heap; a single allocation is larger than the available heap memory (the one we all understand); or a thread failed to spawn.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/wsbfg">@wsbfg: </a>My notes from Martjin Verburg's Garbage Collection, the useful parts. <a href="https://t.co/Lev5KFCUAl">https://t.co/Lev5KFCUAl</a> #qconlondon</p> 
</blockquote><h2><a name="h.1kp03cjscntq"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=810">The Developer Track</a></h2><h4><a name="h.fnc5mcxiggf6"></a><a href="http://qconlondon.com/london-2013/presentation/Web%20Development:%20You're%20Doing%20it%20Wrong">Web Development: You're Doing it Wrong</a><a href="http://qconlondon.com/london-2013/speaker/Stefan+Tilkov"> by Stefan Tilkov</a></h4><p><a href="http://airportcafe.net/2013/03/11/qcon-2013-my-takeaways/">Kevin Hodges</a> attended this session:</p><blockquote> 
 <p>How to tell if you are doing “web” wrong</p> 
 <p>1. Your back button doesn’t work<br /> 2. On page refresh, you get the home page<br /> 3. You need to open a second browser window with the app<br /> 4. Your content doesn’t load first<br /> 5. Can’t bookmark stuff<br /> 6. URI doesn’t represent a single meaningful concept<br /> 7. Javascript is intrusive<br /> 8. Your HTML doesn’t make sense without javascript</p> 
 <p>Point being, the web already does most of this stuff for us. Stick to how the web works and don’t fight it</p> 
</blockquote><p><a href="http://www.blackpepper.co.uk/posts/qcon-london-2013/">Mark Hobson</a> attended this session:</p><blockquote> 
 <p>He outlined a number of typical UI smells, such as the back button not working as expected and the inability to open multiple windows, that indicate that perhaps your architecture is fighting the model of the web. These problems tend to arise when we use a higher-level web framework to abstract ourselves away from the underlying web technologies (HTML, CSS, JavaScript) and the properties of HTTP (statelessness, client-server). Stefan argued that by attempting to overcome these problems, web frameworks ultimately evolve into primitive web-like architectures that foolishly try to re-solve the problems that the web itself has already solved. It’s much easier to work with the web rather than fight against it.</p> 
 <p>Stefan proposed a hybrid style between traditional server-side UI components and modern <a href="http://en.wikipedia.org/wiki/Single-page_application">single-page applications</a> (SPA) that takes the best characteristics of each, which he dubbed ‘<a href="http://roca-style.org/">Resource-Orientated Client Architecture</a>‘ (ROCA). ROCA is a set of recommendations that describe how your application can be of the web, rather than just on the web. Central to this style is the subtle concept that the UI becomes merely a <a href="http://en.wikipedia.org/wiki/Semantic_HTML">semantic HTML</a> representation of its RESTful service.</p> 
</blockquote><p><a href="http://willhamill.com/2013/03/06/qcon-london---day-one/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Stefan listed common antipatterns and what he saw as irrational complaints about HTTP and the Web. This included working around its statelessness, preventing browser functionality (e.g. opening multiple windows of the same site, breaking back button use, preventing refresh of the page, etc), making ads and images load before article content, and so on. …</p> 
 <p>Stefan argued that we need to focus on the power and capabilities of the Web, as though it is not perfect, no other system comes close - imagine trying to spec out and create a system so pervasive and flexible from scratch! Stefan also argued that pushing all session-state and logic down into a heavy client-side JavaScript page was not the ideal solution, even though it seems the logical opposite of server-side frameworks and things like applets that give the illusion of statefulness.</p> 
 <p>Stefan briefly mentioned ROCA (<a href="http://roca-style.org/">Resource-oriented Client Architecture</a>) as a series of recommendations for more rational use of the web’s intended functionality….</p> 
 <p>We should let people use their browser features! Don’t prevent them from bookmarking pages in your system, for example by using properly constructed and meaningful URLs for resources. When everything in the site is created dynamically and the URL doesn’t change, we’re violating users’ expectations that their browser will behave the same across the web. Browser behaviour shouldn’t be broken by the implementation of one particular web app.</p> 
 <p>HTTP is stateless; embrace it! Not dealing with server-side session stickiness and its associated nightmares frees you up greatly when it comes to horizontal scalability. Stefan described a few approaches for splitting large seemingly-stateful interactions into single interactions and thus maintaining statelessness. This was quite interesting, and I thought of the myriad of briefly-stateful interactions we make with many systems that could be changed in this way (most recently when booking my car’s MOT online, it is an 8-step process, but that need not be necessarily stateful in server session terms).</p> 
 <p>The use of unobtrusive JavaScript enables progressive enhancement, separation of concerns and a baseline good experience for the lowest common denominator. Leaving business logic on the server, to the most reasonable extent, avoids duplication of logic in JS-heavy clients and results in low cohesion.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/timanderson">@timanderson: </a></u>If the browser back and forward buttons don't work right, you've done your web app wrong says Stefan Tilkov #qconlondon</p> 
 <p><u><a href="https://twitter.com/teropa">@teropa: </a></u>Trying to solve a design problem by adding more devs is as effective as trying to solve an algebra problem by chewing bubblegum #qconlondon</p> 
 <p><u><a href="https://twitter.com/timanderson">@timanderson: </a></u>I like JavaScript better than Java says Tilkov #qconlondon, wonder how many agree?</p> 
 <p><a href="https://twitter.com/Squire_Matt">@Squire_Matt: </a>Single page apps are just as bad as webforms type server components. Use the web as it was meant to be used. #QConLondon</p> 
 <p><a href="https://twitter.com/nixer65">@nixer65: </a>Doing web wrong/right at #qconlondon - like the ideas about going back to HTML serving and not endless client side json processing</p> 
 <p><a href="https://twitter.com/Squire_Matt">@Squire_Matt: </a>If you are building a web app, build a web app, not a desktop app in a browser... #qconlondon</p> 
 <p><a href="https://twitter.com/carlalindarte">@carlalindarte: </a>Not all browsers are equal so your UI shouldn't look equal in all browsers. It only needs to look good. #qconlondon</p> 
 <p><a href="https://twitter.com/austin_bingham">@austin_bingham: </a>ROCA: Resource Oriented Client Architecture, Stefan Tilkov's new FLA for doing the web right. #qconlondon</p> 
 <p><a href="https://twitter.com/dthume">@dthume: </a>Just realised that 90% of everything I believe about Web apis came from the various @stilkov talks I've watched. #qconlondon</p> 
 <p><a href="https://twitter.com/steinsli">@steinsli: </a>Loved how @stilkov separated content from design at his web dev speak. #QConLondon #noReadingFromSlides</p> 
 <p><a href="https://twitter.com/stilkov">@stilkov: </a>FWIW, uploaded slides for my #qconlondon “Web Development: You're Doing it Wrong” talk <a href="http://t.co/6iqklmyhOO">http://t.co/6iqklmyhOO</a></p> 
</blockquote><h4><a name="h.fnc5mcxiggf6"></a><a href="http://qconlondon.com/london-2013/presentation/How%20to%20rescue%20our%20kids:%20fixing%20the%20ICT%20crisis%20at%20school">How to rescue our kids: fixing the ICT crisis at school</a><a href="http://qconlondon.com/london-2013/speaker/Simon+Peyton+Jones"> by Simon Peyton Jones</a></h4><p><a href="http://www.davidarno.org/2013/03/06/qcon-london-2013-day-1/">David Arno</a> attended this session:</p><blockquote> 
 <p>Software development has a crisis in the making, in terms of future developers: our kids in school. Whilst computers are fun, the way they are taught in schools, through the ICT curriculum, is dreadfully dull and lacks anything remotely resembling computer science. Children are taught how to create spreadsheets, use a web browser and the like. And that’s it. Over last five years, there has been a drop in both boys and girls doing IT A levels. In 2009, none of the English exam boards offered a computer science GCSE. So a group, called Computing at School Working Group decided to try and fix this. Their aim was both simple and huge: reintroduce proper computer science as a subject to be taught from primary school. Through lobbying government, and with help from the like of the Royal Institute and the Raspberry Pi catching the media’s attention to the matter, things have gone from dire to exciting in just a few years. In 2013, all five awarding bodies now offer CS GCSEs. The depertment for Education is in the process of replacing the ICT curriculum with a Computing curriculum for KS1-4 (5 to 16 year olds). As Simon explained though, this just means we’ve won the air war. We now need to fight the ground war, to get teachers trained to a level where they can teach computing properly. And this really is a “we”. Every developer in the country can help by joining CAS, running after school clubs, helping to mentor teachers, and by offering to help teach computing to primary age children in the classroom. I recently started running a Code Club after school club at my daughters’ school. What about you?</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/andypiper">@andypiper: </a>Loving Simon Peyton Jones analysis of why we need to teach Computer Science – it’s like any elementary science - important base. #qconlondon</p> 
 <p><a href="https://twitter.com/austin_bingham">@austin_bingham: </a>Holy cow! If Simon Peyton Jones were presenting on watching paint dry, I bet it would still be fascinating! #QConLondon</p> 
 <p><a href="https://twitter.com/jmdarley">@jmdarley: </a>Simon Peyton Jones is one of the most passionate people I've ever seen speak. #QconLondon</p> 
 <p><a href="https://twitter.com/charleshumble">@charleshumble: </a>Simon Peyton Jones mentioned http://t.co/2uVAp8AyCK - really interesting ideas on how to teach CS to children #qconlondon</p> 
 <p><a href="https://twitter.com/steinsli">@steinsli: </a>How to rescue our kids: fixing the ICT crisis at school at @qconlondon. Slides styled in Comic Sans, -teacher's most beloved style. Irony?</p> 
 <p><a href="https://twitter.com/andypiper">@andypiper: </a>So much love in the room over Computing in schools! Simon Peyton Jones #qconlondon great community <a href="http://t.co/bAU8i8BPgq">http://t.co/bAU8i8BPgq</a></p> 
 <p><a href="https://twitter.com/capotribu">@capotribu: </a>How to rescue our kids: fixing the ICT crisis at school http://t.co/TmYxE0sUtR &lt; was great, will speak to my daughter's school #qconlondon</p> 
</blockquote><h4><a name="h.fnc5mcxiggf6"></a><a href="http://qconlondon.com/london-2013/presentation/You%20are%20not%20a%20software%20developer!%20-%20Simplicity%20in%20practice">You are not a software developer! - Simplicity in practice</a><a href="http://qconlondon.com/london-2013/speaker/Russell+Miles"> by Russell Miles</a></h4><p><a href="http://willhamill.com/2013/03/06/qcon-london---day-one/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Russell’s talk was quite narrative and described common mistakes made when development teams get bogged down in implementation and the drive for productivity. Russel used an <a href="http://www.impactmapping.org/">impact mapping</a> approach throughout the talk to derive the valuable goals for our efforts, and urged that we draw out assumptions between our current state and the desired end goal, so that the can be tested.</p> 
 <p>Russell made the point that often as developers we question only our implementation options rather than the goal itself. For example, when someone tasks you with writing a mobile app because their goal is “We need an app on the app store” - question that goal rather than getting straight into cracking open your favourite IDE. Why do we need an app? What do they actually mean by that? Will any kind of app do? Seek to understand the business decisions in terms of the value you need to create rather than the productivity you need to have - are we creating an app so that we can increase customer retention? Or are we trying to meet the functionality that a competitor has?</p> 
 <p>Fundamentally, Russell made the point that we are involved not to produce software but to produce valuable change for the business. This resonated with points made in the pre-conference training session on ‘Accelerated Agile’ by <a href="http://dannorth.net/">Dan North</a> that I attended, where Dan described how value to the business is what we need to deliver rather than just the output of software.</p> 
</blockquote><p><a href="http://blog.trifork.com/2013/03/21/qcon-london-2013-simplicity-complexity-and-doodles/">Frank Scholten</a> attended this session:</p><blockquote> 
 <p>His main message: in the last decade we learned to deliver software quite well and now face a different problem:<i>overproduction</i>. Problems can often be solved much easier or without writing software at all. Russel argues that software developers find requirements boring, yet they have the drive to code, hence they sometimes create complex, over-engineered solutions.</p> 
 <p>He also warns of oversimplifying: a solution so simple that the value we seek is lost. His concluding remark relates to a key tenet of Agile development: delivering valuable software frequently. He proposes to instead focus on 'delivering valuable change frequently'. Work on the change you want to accomplish rather than cranking out new features.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/alexbutcher">@alexbutcher: </a>Being an early adopter: you have a poor sense of risk. - Russell Miles #qconLondon</p> 
</blockquote><h4><a name="h.fnc5mcxiggf6"></a><a href="http://qconlondon.com/london-2013/presentation/Performance%20Testing%20Java%20Applications">Performance Testing Java Applications</a><a href="http://qconlondon.com/london-2013/speaker/Martin+Thompson"> by Martin Thompson</a></h4><p><a href="http://blog.trifork.com/2013/03/21/qcon-london-2013-simplicity-complexity-and-doodles/">Frank Scholten</a> attended this session:</p><blockquote> 
 <p>Informative talk about performance testing Java applications. Starts with fundamental definitions and covers tools and approaches on how to do all sorts of performance testing. Martin proposes to use a red-green-debug-profile-refactor cycle in order to really know what is happening with your code and how it performs. Another takeway is the difference between performance testing and optimization. Yes, defer optimization until you need it. But this is not a reason not to know the boundaries of your system. When load testing, use a framework that spends little time on parsing requests and responses.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/jon_moore">@jon_moore: </a>#qconlondon @mjpt777 : &quot;Best way to take out the Death Star would've been to make it parse a bunch of XML...&quot;</p> 
 <p><a href="https://twitter.com/giltene">@giltene: </a>When you want to make load happen, XML is much better than JSON. (paraphrasing @mjpt777 in his #qconlondon performance testing talk)</p> 
 <p><a href="https://twitter.com/trisha_gee">@trisha_gee: </a>People make lame excuses for poor code @mjpt777 #QConLondon</p> 
</blockquote><h2><a name="h.5m8yquno77px"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=768">Building for Clouds</a></h2><h4><a name="h.t2z59o2fcsoc"></a><a href="http://qconlondon.com/london-2013/presentation/Clouds%20in%20Government%20-%20Perils%20of%20Portability">Clouds in Government - Perils of Portability</a><a href="http://qconlondon.com/london-2013/speaker/Gareth+Rushgrove"> by Gareth Rushgrove</a></h4><p><a href="http://willhamill.com/2013/03/06/qcon-london---day-one/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Gareth described the deployment process for GOV.UK, the new front page for the UK government designed to replace and improve upon DirectGov and BusinessLink. The deployment pipeline treats configuration and networking as code, including configuration management and automation using Puppet. It’s clear that automation has resulted in a very safe and low-friction deployment process as evidenced by the frequency and stability of GOV.UK releases. Check out the <a href="https://twitter.com/GDS_Badger">GDS Badger of Deploy</a> on Twitter to see that they’ve made 848 production releases since launch in the 17th of October. Impressive!</p> 
 <p>Avoiding platform lock-in is a major concern for GDS, as they’re tasked with spending taxpayer money in order to get the best deal for the requirement to host various sites, transactions and platforms and they do take it seriously. Lock-in imposes risks due to the reliance on a single vendor and gives the vendor power in the supplier-consumer relationship. Having learned lessons from government being treated as a feeding trough by the likes of &pound;Billion contracts with Big Named vendors (my words here, not his ;) ), portability in the software solution is very important.</p> 
 <p>Gareth compared the various capabilities of cloud service providers such as Amazon and Rackspace, and how there is a difficulty in comparison when the various APIs of each provider’s services use such different language or in some cases the same langauge to talk about distinct terms. Avoiding platform lock-in is a big thing for GDS and lock-in comes in flavours other than the most obvious technology support ones such as capability lock-in when you rely on services or features that only one vendor provides or (implicit) capacity lock-in when you’re so big that there aren’t really any other options than the likes of Amazon (e.g. Netflix aren’t going to realistically be able to move their systems to another provider).</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/bluefloydlaci">@bluefloydlaci: </a>Portability matters. Cloud providers. Vendor lock-in. Common denominator not enough, standards needed. At #QConLondon</p> 
</blockquote><h3><a name="h.t2z59o2fcsoc"></a><a href="http://qconlondon.com/london-2013/presentation/Extending%20CloudFoundry%20with%20new%20Services">Extending CloudFoundry with new Services</a><span> by</span><a href="http://qconlondon.com/london-2013/speaker/Chris+Hedley"> Chris Hedley</a><span>,</span><a href="http://qconlondon.com/london-2013/speaker/Andrew+Crump"> Andrew Crump</a></h3><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/grantjforrester">@grantjforrester: </a>HA support in CloudFoundry? In roadmap. #qconlondon</p> 
 <p><a href="https://twitter.com/davidlaing">@davidlaing: </a>Notes on how to add your own custom service to your cloud foundry PaaS instance - <a href="https://t.co/Le0i21wEil">https://t.co/Le0i21wEil</a> #qconlondon</p> 
</blockquote><h3><a name="h.t2z59o2fcsoc"></a><a href="http://qconlondon.com/london-2013/presentation/Racing%20Thru%20the%20Last%20Mile:%20Cloud%20Delivery%20&amp;%20Web-Scale%20Deployment">Racing Thru the Last Mile: Cloud Delivery Web-Scale Deployment</a><a href="http://qconlondon.com/london-2013/speaker/Alex+Papadimoulis"> by Alex Papadimoulis</a></h3><p><a href="http://willhamill.com/2013/03/06/qcon-london---day-one/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Alex’s talk was an interesting look at the difference between typical, smaller, enterprise deployment and ‘web-scale’ deployment. Web-scale is the term used to describe the scope and size of the challenges encountered by platforms and products used by and served to vastly more users than typical applications. Think Facebook, Google, Twitter and Netflix - the problems they encounter trying to design and maintain systems for millions or billions of people are quite different to those encountered by an in-house enterprise application developer responsible for deploying their ‘customer portal’ or the likes to another thousand users.</p> 
 <p>In all web-scale systems with publicised details, the most obvious difference from other applications is that they are inevitably decomposed into a multitude of services and interacting components. This decomposition reduces dependency and enables parts of the product to be upgraded or deployed separately. When you reach the scale of having hundreds or thousands or hundreds of thousands of servers with deployed components, the probability that a component somewhere has failed asymptotically approaches 1. One of the most interesting things approaches to handling this in a service-oriented architecture that I’ve read was about is the <a href="http://techblog.netflix.com/2012/07/chaos-monkey-released-into-wild.html">Netflix Chaos Monkey</a> which Netflix use to test robustness and durability of their systems.</p> 
 <p>Alex described other problems that web-scale systems have in deployment, including strategies for rollout of upgrades (half and half, random selection of servers, rolling wave) in order to ensure zero downtime. The web-scale systems involved have very different constraints compared to your office’s Sharepoint document system when going down for half an hour at 1am on Sunday is going to be noticed by a million users (think any time Twitter is down, for example). Interestingly Alex mentioned how Twitter use a bittorrent-like system to push out updates to their servers in chunks and spread updates throughout their network of machines.</p> 
 <p>Alex argued that the best way to reduce pain in deployment is to do it often, and the best way to test your failure plans is to actually enact them. You don’t want to be one of those nightmare scenarios you’ve read about where someone has to restore from a backup tape for the first time and then realises that the wrong thing has been being backed up for months. This is similar to the principles proposed in Continuous Delivery - if something is fragile, dangerous and difficult then don’t postpone it; do it more often. When you do deployments frequently then you become more proficient, you tend to automate things and you tend to have fewer changes between deployments.</p> 
 <p>Rollbacks are often a cause of great pain in deployments, but I agree with Alex that the best way to do a rollback is not to create custom rollback scripts and reverse-deltas, but instead to run the deployment process for the previous, working version of the app (and that way you know the process is tested much more often).</p> 
</blockquote><h2><a name="h.6r4awc59b9lq"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=765">Real Startups</a></h2><h3><a name="h.l7n8xqyx18ci"></a><a href="http://qconlondon.com/london-2013/presentation/How%20to%20turn%20startup%20ideas%20into%20reality%20by%20taking%20money%20from%20strangers">How to turn startup ideas into reality by taking money from strangers</a> by <a href="http://qconlondon.com/london-2013/speaker/Ian+Brookes">Ian Brookes</a></h3><p><a href="http://airportcafe.net/2013/03/11/qcon-2013-my-takeaways/">Kevin Hodges</a> attended this session:</p><blockquote> 
 <p>When presenting, care but don’t be evangelical<br /> Need to sell “FUND ME”, they are investing in you, not necessarily the product<br /> Stick to a single page, if you can’t “sell it” with that then they are not the investor for you<br /> First impressions are everything, need to be WOW<br /> Code faster, measure faster, learn faster<br /> Tell stories, woven with details of success and failure<br /> Make sure you chase them afterwards, bordering on stalking, they need to see enthusiasm<br /> Know where you sit in the market<br /> Get everything into 12 minutes:<br /> 1. Problem<br /> 2. Attractive market<br /> 3. Unique advantage<br /> 4. Compelling investment</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/carlalindarte">@carlalindarte: </a>Listening to Ian Brookes on how to turn your IT business ideas into reality. Interesting insights of this entrepreneur #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Pitching is not about the product. It's about you. It's also not about the stats, it's about stories. &quot;You got to wow them&quot; #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Reason why 68% of investors turned founders down: Indifferent first meeting. The speed dating analogy seems apt #qconlondon</p> 
 <p><a href="https://twitter.com/carlalindarte">@carlalindarte: </a>It's not about the technology you'll use for your business idea, it's about how you will take it to the market. #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Innovative technology may make investors wary, because they don't know if it works. &quot;There's a balance there&quot; #qconlondon</p> 
 <p><a href="https://twitter.com/carlalindarte">@carlalindarte: </a>How successfully sell business ideas?1Focus on the real problem 2Know your market 3Your unique advantage 4How you'll get money! #qconlondon</p> 
</blockquote><p>&nbsp;</p><h2><a name="h.xf8hw0rervoy"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=771">Creative Thinking &amp; Visual Problem-solving</a></h2><h3><a name="h.fldfwzmaiabf"></a><a href="http://qconlondon.com/london-2013/presentation/Ideas,%20not%20Art:%20Drawing%20Out%20Solutions">Ideas, not Art: Drawing Out Solutions</a><a href="http://qconlondon.com/london-2013/speaker/Heather+Willems"> by Heather Willems</a></h3><p><a href="http://mechanitis.blogspot.ro/2013/03/qcon-day-one.html">Trisha Gee</a> attended this session:</p><blockquote> 
 <p><a href="http://qconlondon.com/london-2013/speaker/Heather+Willems">Heather Willem's</a> session encouraged us to doodle throughout.&nbsp; In fact, forced us to.&nbsp; Right up front she addresses the fact that doodling is seen as a lack of attention, as a waste of time.&nbsp; And I realised, sitting there in the audience with my iPad and stylus, that I did feel guilty drawing away while someone talked at me.&nbsp; But it was a brilliant exercise in unblocking some of those creative juices, and letting us see the power in visual information.&nbsp; Perfect is not important, pictures are powerful.</p> 
</blockquote><p><a href="http://blog.trifork.com/2013/03/21/qcon-london-2013-simplicity-complexity-and-doodles/">Frank Scholten</a> attended this session:</p><blockquote> 
 <p>Heather Willems shows us the value of communicating ideas visually. She started the talk with an entertaining discussion of the benefits of drawing in knowledge work. Diagrams and visuals help us to retain information and helps group discussion. The short of it: it's OK to doodle. In fact it is encouraged!</p> 
 <p>The second part of the talk was a mini-workshop where we learned how to create our own icons and draw faces expressing basic emotions. These icons can form the building blocks of bigger diagrams.</p> 
</blockquote><h3><a name="h.fldfwzmaiabf"></a><a href="http://qconlondon.com/london-2013/presentation/Machine%20Me">Machine Me</a><a href="http://qconlondon.com/london-2013/speaker/Fernando+Orellana"> by Fernando Orellana</a></h3><p><a href="http://restreaming.me/2013/03/">Dušan Omercevic</a> attended this session:</p><blockquote> 
 <p>One thing that I see frequently is people willing to do something but being incapable of doing the first step. They have ambition, skill, and knowledge to accomplish something great but they keep pondering about what their first step should be, while months and years are passing away. At <a href="http://qconlondon.com/london-2013/">QCon London</a> <a href="http://fernandoorellana.com/">Fernando Orellana</a> presented a very simple, but highly effective approach to the <a href="http://en.wikipedia.org/wiki/Kick_start">kick start</a> problem. Fernando suggestion is to take a piece of paper and just draw a random doodle on it. Then you take a deep look at doodle until you start seeing things in it and then you just complete the picture.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/charleshumble">@charleshumble: </a>A robot that visualizes our dreams. http://t.co/jygwQNQtfw #qconlondon - by @polyfluid <a href="http://t.co/hOXVrowuir">http://t.co/hOXVrowuir</a></p> 
</blockquote><h2><a name="h.o8i9jqtufgmj"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=769">Handheld Banking</a></h2><h3><a name="h.l2v9jo5w9dpz"></a><a href="http://qconlondon.com/london-2013/presentation/Put%20a%20UI%20Developer%20in%20a%20Bank;%20See%20what%20happens">Put a UI Developer in a Bank; See what happens</a><a href="http://qconlondon.com/london-2013/speaker/Horia+Dragomir"> by Horia Dragomir</a></h3><p><a href="http://blog.caplin.com/author/richardccaplincom/">Richard Chamberlain</a> outlined the <a href="http://blog.caplin.com/2013/03/06/qcon-2013-day-one-end-of-day-review/">main ideas</a> in the talk:</p><blockquote> 
 <p>Banks have top developers</p> 
 <p>If you want a good UX you need to hire a good UI developer</p> 
 <p>Build apps for your customers</p> 
 <p>Huge release cycles for teams providing services for your apps are a pain</p> 
 <p>QA need to work with the team and not to the spec</p> 
 <p>Tools and equipment. There’s little point in developing a web application if you don’t have firefox and chrome installed. Your web devs need to test on all versions of browsers and all the devices they are going to support. They also need an IDE that isn’t eclipse or visual studio. They will also need stackoverflow to google for weird IE work-arounds.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/carlalindarte">@carlalindarte: </a>Banks build super reliable apps that look awful Horia Dragomir @hdragomir speaker at #qconlondon UI developer</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>People who go from startups to corporate environments make themselves redundant because they optimize everything. #qconlondon @hdragomir</p> 
</blockquote><h3><a name="h.l2v9jo5w9dpz"></a><a href="http://qconlondon.com/london-2013/presentation/Testing%20iOS%20Apps">Testing iOS Apps</a><a href="http://qconlondon.com/london-2013/speaker/Graham+Lee"> by Graham Lee</a></h3><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-1.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>Graham Lee (<a href="http://twitter.com/secboffin">@secboffin</a>) gave a high-level talk through the testing frameworks available to iOS developers. The tools included <a href="https://github.com/calabash">Calabash</a>,<a href="http://cukes.info/">Cucumber</a>, <a href="http://cocoadev.com/wiki/OCUnit">OCUnit</a> (built into Xcode and also known as SenTestingKit) as well as browser-based tools such as Safari’s web inspector.</p> 
</blockquote><p><a href="http://blog.caplin.com/2013/03/06/qcon-2013-day-one-end-of-day-review/">Mike Salsbury</a> attended this session:</p><blockquote> 
 <p>The talk highlighted several different testing frameworks that could be used to test iOS applications and via WebView.&nbsp; The last was probably the most interesting to me, as it highlighted a way of using WebView so that you can utilise your existing JavaScript testing framework to test iOS apps embedded within web views.&nbsp; This isn’t necessarily exactly what we want to do, but could be a very interesting approach for CI.</p> 
 <p>Another CI friendly approach would be to use Catch, which is available on Github.&nbsp; The other approach was to use the normal embedded tools.&nbsp; E.g. XCUnit and Instruments.&nbsp; Although one twist was downloading the Network Link Conditioner tool to simulate network latency.</p> 
 <p>Calabash was a BDD style approach using Ruby and the spec approach.&nbsp; That would fit in nicely with some of our other frameworks in style.</p> 
</blockquote><h3><a name="h.l2v9jo5w9dpz"></a><a href="http://qconlondon.com/london-2013/presentation/The%20Future%20of%20Mobile%20Banking">The Future of Mobile Banking</a><a href="http://qconlondon.com/london-2013/speaker/Michael+Nuciforo"> by Michael Nuciforo</a></h3><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>For banking mobile will replace your memory. Like it did for phone numbers #qconlondon</p> 
 <p><a href="https://twitter.com/carlalindarte">@carlalindarte: </a>Mobile has achieved things one third faster than desktop Internet. #qconlondon 'The future of mobile banking'</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Banks are becoming mobile operators. Operators are becoming banks. #qconlondon</p> 
 <p><a href="https://twitter.com/carlalindarte">@carlalindarte: </a>On average an active mobile banking user will log in 20 times a month. They have quickly moved from once a month to once a day. #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Banks losing sales because they've forgotten to do sales in the mobile channels, and that's where users are going. #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Banking in 2015 #qconlondon <a href="http://t.co/Ku7wlAmN0m">http://t.co/Ku7wlAmN0m</a></p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Banks are waking up to the fact that they have a lot of data about what people are buying -&gt;collab with retailers on offers etc #qconlondon</p> 
 <p><a href="https://twitter.com/carlalindarte">@carlalindarte: </a>One of the constrains of mobile banking: still treated as a project and not as a channel. That causes lack of investment #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>UK/europe is basically replicating what has been done in Asia in mobile banking #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Key takeaways in &quot;The Future of Mobile Banking&quot; #qconlondon <a href="http://t.co/evmKZgUHpR">http://t.co/evmKZgUHpR</a></p> 
</blockquote><h2><a name="h.f82qdjju0be7"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=781">Building Web Apis: Opening &amp; Linking Your Data</a></h2><h3><a name="h.rmwujzf0ac6t"></a><a href="http://qconlondon.com/london-2013/presentation/Introducing%20the%20BBC's%20Linked%20Data%20Platform%20and%20APIs">Introducing the BBC's Linked Data Platform and APIs</a><a href="http://qconlondon.com/london-2013/speaker/David+Rogers"> by David Rogers</a></h3><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-2.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>This covered how the BBC are using graph databases and RDF to link data and events for their news and sports platforms, so that when an author is writing an article it will auto-suggest tags based on the content of the text, and those tags will then semantically link the story with other areas and parts of the BBC.</p> 
 <p>Some of the problems included how to uniquely identify the people involved – for example, there were many athletes which shared a name with another athlete at the games – as well as how to regionally associate stories. For categories such as counties the boundaries are known, but for voting areas (which change over time and can be quite complex) the problem is largely unsolved.</p> 
</blockquote><p><a href="http://blog.caplin.com/2013/03/07/qcon-2013-day-two-end-of-day-review/">Mike Salsbury</a> attended this session:</p><blockquote> 
 <p>There was World Cup 2010, Olympics 2012, all towards creating a Platform with semantic roots, that might be available as an open API sometime in the near future.&nbsp; We got a full overview of the development and thinking behind the API, and where they’d like to take it next.</p> 
 <p>There was Scala, the triple store graph database and lots about linked data.&nbsp; The database is full of Subject, Predicate, Object triads, and no tables or rows.&nbsp; You can access it with SparQL construct graphs, and these queries can be represented as WebService endpoints (I think).</p> 
</blockquote><p><a href="http://airportcafe.net/2013/03/11/qcon-2013-my-takeaways/">Kevin Hodges</a> attended this session:</p><blockquote> 
 <p>Concept abstraction (maybe use for Exodus)<br /> Use of triples to link common concepts or content (check out “Triplestore”)<br /> Pages are generated dynamically from the most recent tags in the triple store, the subject and object get tagged with a “relation”<br /> Content is tagged when it is generated<br /> Statistical stuff is still done separately<br /> Triplestore holds canonical data, “facts” on products<br /> Reads need to be scaled =&gt; caching<br /> Not big data, just well organised<br /> GeoNames, check this out<br /> Use of Mashery to make the data “open”, aids rate limiting and manage clients</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/stilkov">@stilkov: </a>Interesting idea for being able to provide a SPARQL endpoint without risk: an EC2 AMI that you can use @daverog #qconlondon</p> 
</blockquote><h3><a name="h.rmwujzf0ac6t"></a><a href="http://qconlondon.com/london-2013/presentation/The%20Why,%20What%20and%20How%20of%20Open%20Data">The Why, What and How of Open Data</a> by <a href="http://qconlondon.com/london-2013/speaker/Jeni+Tennison">Jeni Tennison</a></h3><p><a href="http://www.redcorona.com/conference/qcon2013/day2.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>Jeni is an advocate of open data, and in this talk she laid out some reasons for us to join in within our own data.</p> 
 <p>Good data should be reusable – consumable by several different applications or modules – and combinable – an application should be able to read data from multiple sources and work with all of it. Most services are designed to be linked to other services, via data streams, and offer data through application-specific APIs. Using a well defined standard format makes it easy to pass data between services, whether that data is open or not.</p> 
 <p>Most current data, even that which is publically available, is not open. Open data has to be available to everyone, to do anything with it, for example using a Creative Commons attribution licence. (Share-alike licences, more like the GPL, are also available, but they restrict use cases to some degree.)</p> 
 <p>Why would a company which generates or provides data want to make it open? The benefits for everyone else are clear, but in the case of a non-altruistic business entity, there must be an incentive for the company too. Providing open data allows other companies or individuals to provide additional services, for example mobile applications or visualisations. As long as the data source is required to be attributed, this can extend brand awareness and user base. Collaborative editing and updated of data can also produce excellent and accurate output, if the user base has an interest in keeping it up to date; for example Wikipedia or OpenStreetMap. Offloading some of that data maintenance onto users lowers the cost of maintaining the same quality.</p> 
 <p>Whether to open up, and what data to open, has several considerations. Primary data, which is generated at high cost or effort, can have commercial value high enough that it can not make sense to open it up. But most companies generate large amounts of 'secondary data', which is a side effect of other processes (for example transactional data, information in CRMs etc), which can be opened up if it doesn't contain personal data. Any data referring to individual people is likely to have data protection concerns and again may not be eligible for open distribution.</p> 
 <p>Open data is still an experiment: we don't know exactly which business model works the best, how best to measure the usage of data or how to find open data when we want some. But Jeni asks us to consider the benefits that opening some data up can provide to our own businesses, as well as society at large.</p> 
</blockquote><h3><a name="h.rmwujzf0ac6t"></a><a href="http://qconlondon.com/london-2013/presentation/Building%20APIs%20by%20building%20on%20APIs">Building APIs by building on APIs</a><span> by</span><a href="http://qconlondon.com/london-2013/speaker/Paul+Downey"> Paul Downey</a><span>,</span><a href="http://qconlondon.com/london-2013/speaker/David+Heath"> David Heath</a></h3><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/alblue">@alblue: </a>Design principles by @govuk <a href="https://t.co/Mv4DwFLHkn">https://t.co/Mv4DwFLHkn</a> #qconlondon</p> 
 <p><a href="https://twitter.com/alblue">@alblue: </a>Putting APIs first: http://t.co/KrADZkD0Jc from @GovUK at #qconlondon</p> 
 <p><a href="https://twitter.com/alblue">@alblue: </a>Government digital service design manual (work in progress) https://t.co/bNm54x1d2z #qconlondon</p> 
</blockquote><h3><a name="h.rmwujzf0ac6t"></a><a href="http://qconlondon.com/london-2013/presentation/Building%20Hypermedia%20APIs%20with%20HTML">Building Hypermedia APIs with HTML</a><a href="http://qconlondon.com/london-2013/speaker/Jon+Moore"> by Jon Moore</a></h3><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-2.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>The presentation sounds much more buzzwordy than it actually was; in fact, it was largely a set of common sense and careful use of HTML5 attributes for annotating structured data, along with a demonstration tool to read pages with suitably annotated data.</p> 
 <p>The general format is to encourage the use of HTML5 <em><a href="http://en.wikipedia.org/wiki/Microdata_(HTML)">microdata</a></em>, which is a set of attribute names that can be applied to existing HTML elements, and then processed by a tool that understands how to parse them. These can either be attached to semantic nodes in the structure (such as <code>h1</code> elements) or wrapped with a standalone <code>span</code> tag with an associated attribute value. In this way, it’s possible to encode information in the same representation that a user will use to read the content</p> 
 <p>Jon had a tool written in a scripting language (python or ruby; I forget which) that took an example HTML page and used it to generate a list of elements with semantic data in them. Furthermore, these were then exposed as dynamic properties on an object returned by the caller.</p> 
 <p>The key addition to this talk (over and above being just an HTML5 tutorial) was the use of introspecting forms and the ability to submit standard HTML forms, with ‘arguments’ for the form values that needed to be submitted. This allowed the tool to reach into the HTML and use it to represent not just state (the objects) but also the transitions to other states (by submitting forms and returning the data in that HTML page).</p> 
</blockquote><p><a href="http://www.blackpepper.co.uk/posts/qcon-london-2013/">Mark Hobson</a> attended this session:</p><blockquote> 
 <p>He proposed using HTML itself as the hypermedia representation for RESTful services. This approach has <a href="http://codeartisan.blogspot.co.uk/2012/07/using-html-as-media-type-for-your-api.html">many advantages</a> over JSON or other XML representations, for example: web browsers implicitly become clients of your API; HTML already has comprehensive hypermedia support; and HTML5 provides semantic metadata in the form of <a href="http://en.wikipedia.org/wiki/Microdata_(HTML)">HTML Microdata</a>. He demonstrated a simple command line tool that was able to programmatically explore and use any REST API written to these principals, much like a user can navigate any website. Once again we witness the trend of unifying human and computer interaction with web services.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/jxstanford">@RichardLundDev: </a></u>Building Hypermedia APIs with HTML #qconlondon API doesn't always have to be JSON format. Wise words.</p> 
 <p><u><a href="https://twitter.com/jxstanford">@raymcdermott: </a></u>html5 replaces json as a data format - discoverability FTW #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@BlackPepperLtd: </a></u>Using #html5 as the mediatype for your RESTful APIs is an interesting idea covered by @Jon_moore @QConLondon. Human discoverable apis</p> 
</blockquote><h3><a name="h.rmwujzf0ac6t"></a><a href="http://qconlondon.com/london-2013/presentation/Generic%20Hypermedia%20and%20Domain-Specific%20APIs:%20RESTing%20in%20the%20ALPS">Generic Hypermedia and Domain-Specific APIs: RESTing in the ALPS</a><a href="http://qconlondon.com/london-2013/speaker/Mike+Amundsen"> by Mike Amundsen</a></h3><p><a href="http://www.blackpepper.co.uk/posts/qcon-london-2013/">Mark Hobson</a> attended this session:</p><blockquote> 
 <p>Looking into the future, <a href="https://twitter.com/mamund">Mike Amundsen</a> hypothesised how these ideas may evolve in his talk, “<a href="http://www.infoq.com/presentations/web-api-alps;jsessionid=4BFB339621557270A53472A95B63F41C">Generic Hypermedia and Domain-Specific APIs: RESTing in the ALPS</a>“. He highlighted concern over the <a href="http://www.programmableweb.com/apis/directory">recent explosion</a> in web service APIs, specifically as they tend to be proprietary rather than domain-specific. For example, there are hundreds of shopping APIs but there is no single standardised API to access them all through. Mike proposed that we need a common language to standardise domain-specific APIs, much like <a href="http://schema.org/">schema.org</a> does for domain-specific data, which he calls <a href="http://amundsen.com/hypermedia/profiles/">Application-Level Profile Semantics</a> (ALPS). It is very much a work-in-progress but it has great potential to take us towards the fabled semantic web.</p> 
</blockquote><h2><a name="h.f3pie5krdoou"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=776">Schadenfreude - War Stories</a></h2><h3><a name="h.n6hiu7hdy1un"></a><a href="http://qconlondon.com/london-2013/presentation/The%20inevitability%20of%20failure">The inevitability of failure</a><a href="http://qconlondon.com/london-2013/speaker/Dave+Cliff"> by Dave Cliff</a></h3><p><a href="http://www.redcorona.com/conference/qcon2013/day2.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>Dave comes from a banking background and this presentation talked about failure in real and software systems from a mostly financial perspective. Failures will happen, eventually, in any complex system. He started with several examples of the failure of the financial markets, from the tulip and South Seas bubbles through to the failure of Long Term Capital Management and the May 2010 trough in the Dow Jones index – momentarily the worst one day performance in US market history, although shortly afterwards followed by the <i>best</i> intra-day performance in history as the market recovered.</p> 
 <p>This type of market failure is happening harder and faster due to the rise of algorithmic trading. In the last decade, algorithmic trading programs ('robot traders') have risen from a small, specialist part of the market into the norm; over 70% of all trades are now performed by computers, often with millisecond response times. A small bug in one of these systems can cause a very fast and serious failure; Knight Capital was seriously damaged by mistakenly deploying development environment market simulation to production, costing them $400m, and on a less serious level, automated book pricers on Amazon.com resulted in a second hand book being offered for over $20m.</p> 
 <p>Stock trading has always been based on the latest technology and speed of information: first horse messengers, then pigeons, then telegram and telephone communication, and now the Internet. And technology has always had occasional failures, particular when users become involved, as people can't be rigorously modeled, so even a perfect engineering solution can fail once people are included in the picture: the Millenium Bridge in London was engineered correctly, but was not good for users.</p> 
 <p>Catastrophic failures often happen because of the <i>normalization of deviance</i>. We start out doing something in a safe and controlled way, and make some guesses about what the safe operating parameters are. But every time we go outside those parameters and there is no failure, even though it triggered all our warning alarms and processes, it is natural to expand the 'safe' operating zone to include the new conditions ... <i>even though the risk of failure is greatly increased</i>. The Challenger and Columbia shuttles were both lost to events which were known to be a potential problem, but for which the deviant parameters had become normalized so that the increased risk was repeatedly taken, until a catastrophic failure <i>did</i> occur.</p> 
 <p>This problem is also prevalent in financial trading software engineering. Risk management in a new algorithmic trading program is extremely tight, but as the algorithm gets away with making risky decisions, risk management is relaxed until a catastrophic failure (in financial terms this time) occurs. As we see more algorithmic trading in the markets, we are likely to see more technology-created catastrophic market failures like that one in May 2010 (and Dave lists several other examples of individual markets being destabilised by a failure of an algorithm).</p> 
</blockquote><p><a href="http://blog.trifork.com/2013/03/21/qcon-london-2013-simplicity-complexity-and-doodles/">Frank Scholten</a> attended this session:</p><blockquote> 
 <p>Dave Cliff of the Large Scale Complex IT systems group at University of Bristol warns us about the evergrowing complexity in large scale software systems. Especially automated traders in financial markets. Dave mentions recent stock market crashes as failures. These failures did not make big waves in the news, but could have had catastrophic effects if the market did not recover properly. He discusses an interesting concept, <a href="http://theemtspot.com/2009/10/03/the-normalization-of-deviance/">normalization of deviance</a>.</p> 
 <p>Everytime a safety margin is crossed without problems it is likely that the safety margin will be ignored in the future. He argues that we were quite lucky with the temporary market crashes. Because of 'normalization of defiance' it's only a matter of time before a serious failure occurs. Unfortunately I missed an overview of ways to prevent these kind of problems. If they can be prevented at all. A principle from cybernetics, <a href="http://www.noop.nl/2009/09/only-people-are-qualified-for-control.html">Ashby's law of requisite variety</a>, says that a system can only be controlled if the controller has enough variety in it's actions to compensate any behaviour of the system to be controlled. In a financial market, with many interacting traders, human or not, this isn't the case.</p> 
</blockquote><h3><a name="h.n6hiu7hdy1un"></a><a href="http://qconlondon.com/london-2013/presentation/Painful%20success%20-%20lessons%20learned%20while%20scaling%20up">Painful success - lessons learned while scaling up</a><a href="http://qconlondon.com/london-2013/speaker/Jesper+Richter-Reichhelm"> by Jesper Richter-Reichhelm</a></h3><p><a href="http://airportcafe.net/2013/03/11/qcon-2013-my-takeaways/">Kevin Hodges</a> attended this session:</p><blockquote> 
 <p>1. Always check back on reality<br /> 2. You will make mistakes<br /> 3. Software is easy, data is hard<br /> Ultimately, they looked back having realised they weren’t actually building the right stack, only what they thought was the right stack.</p> 
</blockquote><h2><a name="h.9m3e3gx2uy9p"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=773">Architectural Hangover Cure</a></h2><h3><a name="h.vpq5z69hugpn"></a><a href="http://qconlondon.com/london-2013/presentation/Deleting%20Code%20at%20Nokia">Deleting Code at Nokia</a><a href="http://qconlondon.com/london-2013/speaker/Tom+Coupland"> by Tom Coupland</a></h3><p>Tom Coupland <a href="http://mantree.wordpress.com/2013/03/08/deleting-code-at-nokia-wash-up/">replied to some of the questions</a> the session attendees asked him:</p><blockquote> 
 <p><em>Have you considered datomic to replace mongodb?</em></p> 
 <p>In a word ‘yes’, although i wouldn’t use the word ‘replace’ as really it’s about adding tools to your toolbox or weapons to your war chest, depending on your favoured analogy.&nbsp; Datomic’s really interesting and comes up in our conversations pretty frequently. What hasn’t happen yet it enough investment in learning and experimentation for us to begin the real adoption push.</p> 
 <p><em>How have you found refactoring and maintenance of Clojure across developers for code they didn’t write without static typing and IDE tooling?</em></p> 
 <p>I certainly had some reservations in this area and it was a big concern for us. What i think we’ve found is that it’s not as big a problem as feared. The result of having such a small amount of easily understandable focused code is that maintenance isn’t causing us problems. I think a big part of that is our level of acceptance testing, sometimes it’s a little over the top, but too much is better than too little at the end of the day. Refactoring code, if i’m honest, i’m still slow at and it’s something i really want to improve, it’s not caused too much personal irritation yet though, there’s so much less code ergo there’s less refactoring you want to do.</p> 
 <p><em>Any challenges regarding transactions when moving from an ejb db stack to clojure and mongodb?</em></p> 
 <p>Not as much as you might think. Part of our desire to move away from what we were using in that area was that we didn’t have any complex transactional needs and yet had to pay the cost of tools that provided those abilities. This was one of those realisations that comes out of thinking about what does our software ‘really’ do and whats the minimal tooling we need to get that done.</p> 
 <p><em>Was the 71% decrease compared with the beginning ejb or the spring stack?</em></p> 
 <p>That comparison was made between an EJB3 service and the clojure rewrite.</p> 
 <p><em>Are you saying that unit tests are not necessary if you know for sure what the code does?</em></p> 
 <p>Uh, not really. When writing clojure, particularly when repl driving the code, your testing it all the time as you create it. Now you could argue that at the end of that process you could codify the testing you’ve done, but i’ve started to view unit tests as a bit of straight jacket for code, they slow down your ability to change it. What i prefer is acceptance testing, taking the view that i don’t really care how the service goes about doing what i want, just that it does do what i want.</p> 
 <p><em>Do you have a legacy of all the technologies you use along the way? How do you deal with that?</em></p> 
 <p>There is legacy that gets built up along the way, but there’s an advantage of the small service approach that these things tend not to need much change, after a while they just sit there reliably doing what they do. Of course occasionally you have to go there and that’s when it worth considering a rewrite of the service to a newer style. However you can’t always justify the cost and that’s when you just have to put your professional hat on and do what needs doing. Of course each of those occasions adds weight to the rewrite side of the scales and eventually they’ll tip in your favour.</p> 
 <p><em>How did you convince your senior managers to make these changes?</em></p> 
 <p>Persuasion. There’s an interesting book about driving technical change from the pragmatic programmers. In brief, you have to relate to their worries and fears, pre-empt them as much as possible, accept the ones that are real and tell them your going to take on the responsibility to see the worries don’t come true and make them believe (in) you. You’ve got to sell it to them basically and selling things to people is a bit of an art.</p> 
 <p><em>Did you find any problems/issues when adopting clojure?</em></p> 
 <p>Obviously there’s loads that could be said here because issues is a very broad term. Problems, though, we didn’t have many. The big problems are mental ones, your learning a new way to think and persuading other people of the virtue of new ideas, but that’s not so much to do with clojure, those problems exist in any adoption.</p> 
 <p><em>Did you find the tooling and the ecosystem around clojure mature enough?</em></p> 
 <p>Yes. The ecosystem is vibrant, and full of cheerfully helpful people that are passionate about the language. If i had to choose one thing that really made a big different its Sam Aarons Emacs Live project, this just took a way a lot of the emacs learning required and gave the whole endeavour a huge boost.</p> 
 <p><em>How hard was the clojure learning curve for you and junior devs adoption time in terms of keeping a clean and concise codebase?</em></p> 
 <p>Hard. It’s not easy, its just simple <img alt=";)" src="http://www.infoq.com/mag4media/repositories/fs/articles/QCon-London-2013/en/resources/icon_wink.gif;jsessionid=4BFB339621557270A53472A95B63F41C?m=1129645325g" _href="img://icon_wink.gif?m=1129645325g" _p="true" /> Collaboration and communication are key for a successful adoption, sharing your new clojure code with as many people as possible. Something personal that i realised was that with all my efforts to improve my OO code, by breaking things down (i liked the decorator pattern a lot!), keeping my state nicely contained and not mucking about with it too much, all the good things your supposed to do, i was actually laying the ground work for learning a function style. Then when someone showed me clojure it just seemed like a better way to express those ideas; same concepts, far better way of writing them!</p> 
 <p><em>How did you train up all your existing Java developers with Clojure? How did you sell this idea to business, given that this would take out many man-days to transition to a new language?</em></p> 
 <p>We bought a lot of books and spread them around. Started having the lunch time meet ups and showed it really working for us. A lot of it people self learned in their own time, others used their 20% time to experiment. We didn’t really do any formal like ‘training’, it was mooted and agreed to be a good idea, but in the end it hasn’t happened and the point were it would be useful is passing.</p> 
 <p>On the man-days point you have to give yourself (and them) a dead line. Essentially saying ‘we think this will work, but if by this point it isn’t, we’ll still have to produce the goods with our current stuff’. You have to earn their trust and make them believe in your ability to pull this thing off.</p> 
 <p><em>Has the number of lines of test code increased with the adoption of closure? Have the number of bugs found in production increased?</em></p> 
 <p>Not really, we had a strong acceptance testing ideal before, we still do now. The line of test code has decreased massively as there’s very few unit tests and the acceptance tests are really concise. Bugs in production havn’t changed at all.</p> 
 <p><em>Why didn’t you liked java in a first place? Why you were trying to substitute it with other language?</em></p> 
 <p>In a nut shell i wanted to reduce the amount of time i spent typing out my solution to problems. I want to solve the businesses problems and deliver value, by reducing the amount of pure manual labour involved in expressing solutions is a good thing. Also i started to feel that java was actually hiding the solution to problems, not making them clear. Once you start to see your system as just a flow of data that you apply a few modifications to, you see that java (and objects in general) is not a great tool for expressing that.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/trisha_gee">@trisha_gee: </a>Make sure people know what new technology is coming, so they're ready for it, and therefore less resistent @tcoupland #QConLondon</p> 
 <p><a href="https://twitter.com/nemanjavuk">@nemanjavuk: </a>From 5751 #java #ejb3 #hibernate code lines to 1674 #clojure lines with 71% more efficiency! @tcoupland #QConLondon</p> 
</blockquote><h2><a name="h.53pdglitvq0r"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=775">Agile in Actuality: Stories from the Front Line</a></h2><h3><a name="h.d4m2m5eq9dt6"></a><a href="http://qconlondon.com/london-2013/presentation/People%20over%20Process:%20Applying%20it%20in%20real%20world%20software%20development">People over Process: Applying it in real world software development</a><a href="http://qconlondon.com/london-2013/speaker/Glen+Ford"> by Glen Ford</a></h3><p><a href="http://willhamill.com/2013/03/07/qcon-london---day-two/http://willhamill.com/2013/03/07/qcon-london---day-two/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Glen Ford’s talk was about applying the principle of <em>individuals and interactions over processes and tools</em> in real terms, and how the impact of considering the human factors involved in development can make a real difference in team performance. Glen began by recounting from his experience as a team lead of a time when he was given feedback illustrating that his impression of how he led the team was different from how the team were experiencing it and that he wished he had been given the feedback sooner. Glen encouraged us to constantly seek feedback rather than waiting for it, and actually apply it to ourselves.</p> 
 <p>In a high performing team (especially a team with many experienced members) there is often significant inertia to change, so overpowering that inertia really requires making people emotionally invested in change. In order to give your people direction, you need to sell them on the vision and relate your short term plans back to that vision to demonstrate its relevance. Glen said that we must have a stated motivation to work effectively, and that if you can’t understand the reason for doing something (in terms of the vision) then perhaps you shouldn’t be doing it.</p> 
 <p>The processes used to guide the team are a set of concepts and not the law; the better your interactions with the people involved then the less you will require the process to instruct or control. This was very much an emphasis of <a href="http://en.wikipedia.org/wiki/Theory_Y">MacGregor’s Theory Y</a> over Theory X. Giving your people the right reasons to do something means they’ll usually make the right decision.</p> 
</blockquote><p><a href="http://blog.trifork.com/2013/03/13/qcon-london-2013-agile-in-actuality-open-data-latin-as-a-programming-language/">Sven Johann</a> attended this session:</p><blockquote> 
 <p>He shared his experience from being a tech lead at a start-up. He recognized that his team's doing Scrum as a ritual act, without asking why they're doing certain things. They discovered that a process isn't a rule of law, but rather a set of concepts. Instead of following rules, they formed a team vision and a <em>why</em> for everything they do. If you don't find a <em>why</em>, don't do it.&nbsp; In their specific context, they couldn't find a <em>why</em> for estimations, so they skipped it. Finding a<em>why</em> also encourages communication and the more communication they had, the less process they needed. The best and most open communication is among team members, which know each others strengths, weaknesses and quirks. So they decided to do not break teams apart, but rather to form long-running teams, which eventually got hyper-productive.</p> 
</blockquote><h3><a name="h.d4m2m5eq9dt6"></a><a href="http://qconlondon.com/london-2013/presentation/Climbing%20out%20of%20a%20crisis%20loop:%20How%20a%20critical%20BBC%20back-end%20team%20reigned%20in%20a%20workflow%20crisis-to-crisis%20cycle">Climbing out of a crisis loop: How a critical BBC back-end team reigned in a workflow crisis-to-crisis cycle</a><span> by</span><a href="http://qconlondon.com/london-2013/speaker/Rafiq+Gemmail"> Rafiq Gemmail</a><span>,</span><a href="http://qconlondon.com/london-2013/speaker/Katherine+Kirk"> Katherine Kirk</a></h3><p><a href="http://willhamill.com/2013/03/07/qcon-london---day-two/http://willhamill.com/2013/03/07/qcon-london---day-two/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Katherine began her talk by describing the situation of one of the teams in the BBC working on a high-demand backend media service. When she was brought in after previous managers had quit, she knew that there was a massive percentage of time spent firefighting and a huge gulf between the expectations the team were setting and their ability to deliver, given the quality of the system, the time spent on urgent fixes and communication issues.</p> 
 <p>Katherine described how her first action was actually to absorb the situation rather than diving in and proclaiming new strategies as some higherups had expected of a new manager. This seems like a personally risky but very wise move, as better decisions can be made with deeper understanding rather than a knee-jerk reaction. She collaborated with the team to understand their problems and their frustration with estimation &amp; planning work that could never all be delivered in the required time, and then ensured that the expectations of the team were reset so that they instead could under-promise and over-deliver.</p> 
 <p>Planning was reduced and capacity was projected based on a more realistic understanding of what can actually be tackled and how much time must be spent on urgent fixes. Team members were rotated through dev/ops/test/firefighting workstreams on a two-week basis, which I think is a great idea. This spread knowledge around and also reduced the perception amongst the team that some people got to do the “new” stuff and some people just got to fix bugs.</p> 
 <p>The team used finer grained boards to display more accurate progress - ‘done’ became two columns of ‘development complete’ and ‘in review’ in order to eliminate the typical progress update of ”I’m nearly done”. Being open and truthful both within the team and in the team’s capacity and progress to others was important to improve communication. Katherine also described how they defined all the implicit and assumed parts of the process in order to ensure they could properly track what work needed to go into particular actions. This is one of <a href="http://en.wikipedia.org/wiki/Kanban_(development">Kanban</a>#Six_core_practices)’s core principles in “make policies explicit”.</p> 
 <p>Katherine’s main push was to improve the communication and to try to empower the team that they could solve the problems on their own; that they would essentially become self-managing. A good test of this would be if a manager of the team could take a few days’ leave during a week without having to necessarily have a replacement step in for the entire time. A common theme during this talk as with most of the talks on Thursday was of following the <a href="http://agilemanifesto.org/principles.html">agile principles</a> rather than any particular strict process.</p> 
</blockquote><h3><a name="h.d4m2m5eq9dt6"></a><a href="http://qconlondon.com/london-2013/presentation/Between%20Fluffy%20Bunnies%20and%20Command%20&amp;%20Control:%20Agile%20Adoption%20in%20Practice">Between Fluffy Bunnies and Command &amp; Control: Agile Adoption in Practice</a><a href="http://qconlondon.com/london-2013/speaker/Benjamin+Mitchell"> by Benjamin Mitchell</a></h3><p><a href="http://willhamill.com/2013/03/07/qcon-london---day-two/http://willhamill.com/2013/03/07/qcon-london---day-two/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Ben started by describing an agile team he had led in an organisation that had previously had bad experience with agile, so when running his team they were actually having their standups in secret. I can understand why this was done, in order to ensure the team can actually be productive without a top-down command being used to force them into ineffective practices, but as Ben said, you can’t be open and transparent when you’re hiding in the stairwell to have a meeting.</p> 
 <p>Ben described a few of the things he had done to try and encourage open communication; people avoid embarassing or threatening truths so it was important to make negative views discussable. Reducing the barriers to people raising problems was important - for example having the question “what wasted your time today?” being a stock question at a standup meeting gets people being more direct about it. One nice touch was to implement the ‘two hand rule’ at standup meetings to ensure people are being concise and relevant: if at standup someone is saying something you think too long, detailed, irrelevant, etc then just put your hand up. When two people have put their hands up, the person currently blabbering on will take their issue offline, no questions asked. This is a good suggestion to ensure smoother flow of the standup and prevents it from turning into a 20-minute affair.</p> 
 <p>Ben had in one team noticed poor morale regarding progress and productivity, which turned out to be because the entire product backlog had been stuck up to the left of the board. This meant that team members looked at their progress for that sprint and at a glance only saw that there was a huge amount of work still to do. I’ve heard this before on the Agile NYC podcast when a team was depressed by the insanely long and detailed product backlog. I think there are two issues there in terms of the need only being to illustrate the current sprint backlog in terms of glance &amp; go progress on the board, but also a hugely detailed and long product backlog may be a symptom of too much analysis.</p> 
 <p>When it came to making decisions about the process and the project, Ben said that we should explain the observations and inferences that lead us to make suggestions; say what you have seen and ask what others think about it in order to draw out your own assumptions and to encourage communication. When it comes to negotiating with business owners, it is best to show people rather than just telling them. Demonstrate your progress and negotiate based on the real data to hand.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/chickoo75">@chickoo75: </a>People blame others, systems and &quot;deny that they are denying&quot; #qconlondon @benjaminm</p> 
 <p><a href="https://twitter.com/pablojimeno">@pablojimeno: </a>How we think we act and how we tell others we act is different to how we actually act. @benjaminm #QconLondon&Acirc;&nbsp;</p> 
 <p><a href="https://twitter.com/janerikcarlsen">@janerikcarlsen: </a>Everyone is for the truth, as long as the truth is not embarrasing or frightening #qconlondon</p> 
</blockquote><h3><a name="h.d4m2m5eq9dt6"></a><a href="http://qconlondon.com/london-2013/presentation/Accelerating%20Agile:%20hyper-performing%20without%20the%20hype">Accelerating Agile: hyper-performing without the hype</a><a href="http://qconlondon.com/london-2013/speaker/Dan+North"> by Dan North</a></h3><p><a href="http://willhamill.com/2013/03/07/qcon-london---day-two/http://willhamill.com/2013/03/07/qcon-london---day-two/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>I’ve just made a few bullets under the points that Dan described in his talk:</p> 
 <ol> 
  <li>Learn the domain (use BA to educate devs not as permanent conduit) 
   <ul> 
    <li>Devs sent on same domain course as real business people!</li> 
   </ul> </li> 
  <li>Prioritise risky over valuable 
   <ul> 
    <li>Opportunity cost - when doing X be aware of every other Y you could be doing and if Y is more valuable, change</li> 
    <li>Within MVP, order doesn't really matter so do risky first</li> 
   </ul> </li> 
  <li>Plan as far as you need 
   <ul> 
    <li>Review your planning horizon</li> 
   </ul> </li> 
  <li>Try something different 
   <ul> 
    <li>Assume there is something you haven't tried that could benefit you</li> 
    <li>Different languages to get different perspectives, likewise programming styles</li> 
   </ul> </li> 
  <li>Fire, aim, ready 
   <ul> 
    <li>Get something in front of actual users for actual feedback</li> 
    <li>Showcase frequently</li> 
   </ul> </li> 
  <li>Build small, separate pieces 
   <ul> 
    <li>DRY is the enemy of decoupled (counterintuitive perhaps but be aware)</li> 
   </ul> </li> 
  <li>Deploy small separate pieces 
   <ul> 
    <li>Make component deployment quick</li> 
    <li>Make product deployment consistent</li> 
    <li>Make components self describing and environments unsurprising</li> 
   </ul> </li> 
  <li>Prefer simple over easy 
   <ul> 
    <li>Don't always just bring in big, complex things just because it's a one line dependency</li> 
    <li><a href="https://github.com/mfoemmel/fig">A cool little dependency/package management tool called Fig</a></li> 
   </ul> </li> 
  <li>Make the trade-offs 
   <ul> 
    <li>build v buy v oss</li> 
    <li>Framework v roll your own (e.g logging via System.out.println)</li> 
   </ul> </li> 
  <li>Share the love 
   <ul> 
    <li>Code Reviews - keep quality up, spread knowledge</li> 
    <li>Learning lunches</li> 
    <li>Great On-boarding</li> 
   </ul> </li> 
  <li>Be okay with failure 
   <ul> 
    <li>Be broad-minded, see bigger picture of business significance of actions</li> 
    <li>Think about the product rather than the project</li> 
    <li>Progress via experiments</li> 
   </ul> </li> 
  <li>There are always 12 steps 
   <ul> 
    <li>Delivering in this fashion can be addictive!</li> 
   </ul> </li> 
 </ol> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/jxstanford">@teropa: </a></u>Prioritise risky over valuable. Find where the dragons lie. #qconlondon @tastapod</p> 
 <p><u><a href="https://twitter.com/jxstanford">@jgrodziski: </a></u>#qconlondon &quot;learn the domain&quot; : seed the team with a domain expert, study trading like a trader, practise trading with the traders</p> 
 <p><u><a href="https://twitter.com/jxstanford">@benjaminm: </a></u>I have sat in a room for 2 days, coming up w 400 stories, with ratings of risk and other made up stuff @tastapod's confession #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@AgileSteveSmith: </a></u>DRY is the enemy of decoupled &quot;DRY within a bounded context&quot; Amen! @tastapod at #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@jgrodziski: </a></u>#qconlondon @tastapod step 6 of hyper-performing agile: &quot;build small, separate pieces&quot; and share memory by communicating</p> 
 <p><u><a href="https://twitter.com/jxstanford">@laura_jagger: </a></u>If you never rollback, you never have to solve the problems of a rollback - the way forward may look like a revert #qconlondon @tastapod</p> 
 <p><u><a href="https://twitter.com/jxstanford">@teropa: </a></u>Make the tradeoffs. &quot;Does logging really need a framework?&quot; #qconlondon @tastapod</p> 
 <p><u><a href="https://twitter.com/jxstanford">@klangberater: </a></u>My key learning from @tastapod talk: as soon as you are religious about something, you are on the wrong path #tdd #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@octoberclub: </a></u>think product development not project delivery @tastapod #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@shuttlebrad: </a></u>May need to lock my team in a room to watch @tastapod’s #QConLondon talk. Urgently.</p> 
 <p><u><a href="https://twitter.com/jxstanford">@portixol: </a></u>Another theme of this years #qconlondon is using functional programming paradigms in Java. @tastapod recommended <a href="http://t.co/duM7FoCevx">http://t.co/duM7FoCevx</a></p> 
</blockquote><h3><a name="h.d4m2m5eq9dt6"></a><a href="http://qconlondon.com/london-2013/presentation/Yanking%20business%20into%20testing%20-%20with%20lots%20of%20vegetables">Yanking business into testing - with lots of vegetables</a><span> by</span><a href="http://qconlondon.com/london-2013/speaker/Gojko+Adzic"> Gojko Adzic</a><span>, </span><a href="http://qconlondon.com/london-2013/speaker/Lukas+Oberhuber">Lukas Oberhuber</a></h3><p><a href="http://willhamill.com/2013/03/07/qcon-london---day-two/http://willhamill.com/2013/03/07/qcon-london---day-two/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Lukasz and Gojko made observations about the difficulties in the team structure and organisation. One of the biggest problems was that separating development from testing leads to much longer delivery cycles. This happens even when you pretend that you’re agile “because we’re doing sprints” and you do all your development in one sprint and throw it over the wall to be tested in the next. The grief you’re causing yourself here is that it’s at least one sprint before you can tell that your work isn’t actually done and needs fixing. Seems obvious to some but some organisations have a real problem in bringing testing within the development process and leave it after the fact.</p> 
 <p>Testing is not done to prevent business risk, because this at best just creates inertia. Testing is done to enable change - it should provide a safety net and feedback. Tests should be isolated from unnecessarily testing implementation when they should be testing outcome. Sure, unit tests are going to be testing implementation details but higher level tests shouldn’t be relying on really low level stuff. If your test steps describe just how to test something and not what it is you’re actually testing then you’re doing it wrong. The test should be for the action and should not in most cases describe a long workflow.</p> 
 <p>Instability in automated testing is like kryptonite for applications. “Just run it again, that one always fails” means you’ve got a test that is worth less than no test, because it’s giving false negatives. Ensure that your integration tests are testing how components interact with each other, not the business logic. This should be done at a higher semantic level of acceptance testing.</p> 
</blockquote><h2><a name="h.33bqpnv4x5nu"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=770">Next Generation Mobile Apps</a></h2><h3><a name="h.50wmn9f3ri53"></a><a href="http://qconlondon.com/london-2013/presentation/New%20capabilities%20of%20HTML5%20browsers">New capabilities of HTML5 browsers</a><a href="http://qconlondon.com/london-2013/speaker/Maximiliano+Firtman"> by Maximiliano Firtman</a></h3><p><a href="http://www.davidarno.org/2013/03/13/qcon-london-2013-day-2/">David Arno</a> attended this session:</p><blockquote> 
 <p>Developing for mobile has three key problems:</p> 
 <ol> 
  <li>There are hundreds of browser variations out there, with different behaviours and different features. Max cited various examples, such as different versions of the Android browser baked into different versions of Android, most of which cannot be upgraded; the fact that Chrome on iOS is effectively a skin on top of Safari; and how in iOS, the “web view” version of Safari runs a completely different JavaScript engine to the browser. Then there’s browsers like Silk (on Kindle devices) and the variations in IE between Windows 8, Windows RT and Windows Phone. And so the list goes on.</li> 
  <li>HTML5 is in draft and in flux. Many browsers can claim to be HTML5 compatible, yet offer completely different behaviours, when experimental feature APIs are used for example.</li> 
  <li>Screen-size hell. Different devices offer wildly varying resolutions and screen sizes. Rendering an HTML app well in all these resolutions is a massive challenge.</li> 
 </ol> 
 <p>Max offered some great advice on dealing with these issues, the absolutely most important of which is never, ever, ever try and detect the device and simply serve up a fully featured experience to those browsers you’ve chosen to properly support and a reduced experience for everything else. It’s a lazy and stupid approach that will frustrate users when newer versions of their browser/OS appear that fully support your app, which you haven’t tested against. Instead, use feature detection (via JavaScript frameworks like <a href="http://modernizr.com/">Modernizr</a> if you wish) and the <a href="http://en.wikipedia.org/wiki/Responsive_web_design">responsive web design</a> &amp; <a href="http://en.wikipedia.org/wiki/Progressive_enhancement">progressive enhancement</a> patterns to serve an adaptive experience that utilises as many of the user’s browser capabilities as possible. Oh, did I mention that you should never use device detection?</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/reteganc">@reteganc: </a>There are around 200 mobile browsers .. wow. @qconlondon</p> 
 <p><a href="https://twitter.com/reteganc">@reteganc: </a>All HTML5 features impl. in mobile browsers are in draft .. because HTML5 specs are not ready/final. @qconlondon</p> 
 <p><a href="https://twitter.com/reteganc">@reteganc: </a>Chrome for iOS is actually a Safari with Chrome look. @qconlondon</p> 
 <p><a href="https://twitter.com/reteganc">@reteganc: </a>HTML5 for mobile.. Don't use browser detection but feature detection. @qconlondon</p> 
</blockquote><h3><a name="h.50wmn9f3ri53"></a><a href="http://qconlondon.com/london-2013/presentation/Architecting%20PhoneGap%20Applications">Architecting PhoneGap Applications</a><a href="http://qconlondon.com/london-2013/speaker/Christophe+Coenraets"> by Christophe Coenraets</a></h3><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>When building on #phonegap, keep your app browser-runnable -&gt; when you have a problem, you can use chrome dev tools. #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Nice to see the horrible 300ms click delay problem on mobile web getting some attention. #qconlondon</p> 
 <p><a href="https://twitter.com/teropa">@teropa: </a>Some performance numbers for options in removing elements from a web page #qconlondon <a href="http://t.co/WnG0gXEqnW">http://t.co/WnG0gXEqnW</a></p> 
</blockquote><h2><a name="h.h0ewjjv8mk2x"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=780">Finance (Design &amp; Architecture)</a></h2><h3><a name="h.cw9w9z8jp2q4"></a><a href="http://qconlondon.com/london-2013/presentation/High%20Performance%20Messaging%20for%20Web-Based%20Trading%20Systems">High Performance Messaging for Web-Based Trading Systems</a><a href="http://qconlondon.com/london-2013/speaker/Frank+Greco"> by Frank Greco</a></h3><p><a href="http://blog.caplin.com/2013/03/07/qcon-2013-day-two-end-of-day-review/">Mike Salsbury</a> attended this session:</p><blockquote> 
 <p>This was all about the history of ajax, comet and websocket. We’ve been part of and innovating in this space for over a decade. His vision for websocket is that with a secure, standard port, full duplex way of communicating over the web, we’re moving to SOA going outside corporate firewalls. Food for thought. He also said to “not program at the socket level” but build your application-level logic (resend, failover, etc..) on top of websocket.</p> 
</blockquote><h3><a name="h.cw9w9z8jp2q4"></a><a href="http://qconlondon.com/london-2013/presentation/How%20NOT%20to%20Measure%20Latency">How NOT to Measure Latency</a><a href="http://qconlondon.com/london-2013/speaker/Gil+Tene"> by Gil Tene</a></h3><p><a href="http://www.redcorona.com/conference/qcon2013/day2.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>Gil is the CTO of Azul, who make a fast, low latency and low pause time JVM (Zing). In this presentation he explained how naive measurements of latency and response time can lead to incorrect results and poor decision making.</p> 
 <p>Before deciding what measurements to take, it's important to consider why we want to measure response times. What features of the response time distribution do we care about? When a system is loaded, it doesn't have a fixed response time as a function of load; typically, the distribution of 'hiccups' (pauses where response times are anomalously long) is multimodal as different types of 'freeze' take effect. These distributions can't be modelled accurately by average and standard deviation, the whole shape of the distribution is important.</p> 
 <p>Different applications have different requirements for latency behaviour. A critical system may have absolute limits on what the worst case response time can be, which in a way makes measuring performance easy: the only factor you care about is the maximum time. But for 'soft' real time applications, like algorithmic trading, or interactive systems where the requirement boils down to 'don't annoy the users', the performance percentiles when under projected maximum load is what matters. So before investing time into measuring response times under load, it's important to establish the actual performance percentile requirements of the application. The idea of 'sustainable throughput' is the maximum frequency of requests that can be serviced while satisfying the latency requirements, so it makes no sense without knowing the requirements.</p> 
 <p>One of the most common problems in measuring response times is the Coordinated Omission Problem: observations don't get missed at random, and it's disproportionally the bad answers that get missed out. Most load testing frameworks create lots of threads or processes, each of which streams requests at the target. That means that if a request takes an unusually long time, the thread or process is waiting for it to return, and not submitting more requests – thereby failing to record as many results during a bad time! This can seriously affect the accuracy of measurements; if you are submitting requests every 10ms, and there is a 'hiccup' of 1 second every 10 seconds, you are failing to record 100 bad results in that time. The 99% latency in this scenario is really 1 second, but a measuring tool will record it as 10ms! An unreasonable difference between the 99% value and the maximum value can be a good indication that your load test has this problem.</p> 
 <p>Before running a measuring tool against a real system that you're interested in, it's a good idea to create a synthetic system with known hiccup behaviour (for example deliberately turning it off for some time), and make sure that the monitoring tool you are using correctly characterises that system. If it doesn't, Gil offers the <a href="https://github.com/giltene/HdrHistogram">HdrHistogram</a> library which can characterise response time results correctly.</p> 
 <p>Finally, Gil ended with some comparisons of servers running Azul's Zing JVM against those using the standard one – using non-normalised charts because, as he puts it, &quot;it's really hard to depict being 1000&times; better in 100 pixels&quot;.</p> 
</blockquote><p><a href="http://blog.caplin.com/2013/03/07/qcon-2013-day-two-end-of-day-review/">Mike Salsbury</a> attended this session:</p><blockquote> 
 <p>When measuring latency, don’t measure the average and standard deviation. He showed that a dataset with latency spikes – or “hiccups” as he put them get smoothed by average and standard deviation. All systems have hiccups, whether it’s garbage collection, database re-indexing, resizing memory allocations. They are all things you have to pay for on a regular basis and they introduce Latency. You need to measure max latency and percentiles. With all this data you can tell if there are hiccups.</p> 
 <p>Another thing missed in latency testing is “co-ordinated omission”, where previous requests take longer and the test clients wait for the previous request to complete before requesting again. This creates a smaller, less accurate dataset.</p> 
 <p>In reality, if you’re latency testing you should try a test where you create a hiccup by pausing the machine and see if your results can pick it up.</p> 
 <p>He also showed jHiccup – <a href="http://www.azulsystems.com/jHiccup">http://www.azulsystems.com/jHiccup</a>. A tool that adds a thread to a running JVM, sleeps for a millisecond, wakes up and measures if it actually was a millisecond since it slept. If it was longer, there will have been a hiccup and we can now measure that.</p> 
</blockquote><h2><a name="h.9f4hvbt99gdd"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=772">Architectures of the Small &amp; Beautiful</a></h2><h3><a name="h.ixdhxgg5is37"></a><a href="http://qconlondon.com/london-2013/presentation/Startup%20Architecture:%20how%20to%20lean%20on%20others%20to%20get%20stuff%20done">Startup Architecture: how to lean on others to get stuff done</a><a href="http://qconlondon.com/london-2013/speaker/Robbie+Clutton"> by Robbie Clutton</a></h3><p><a href="http://airportcafe.net/2013/03/11/qcon-2013-my-takeaways/">Kevin Hodges</a> attended this session:</p><blockquote> 
 <p>Small beautiful architectures<br /> “Don’t allow your codebase to evolve into a big ball of mud”<br /> Make it work, make it right, make it fast – Kent Beck<br /> Create features with a hypothesis around how they impact<br /> Make sure the hypothesis is easily validated<br /> Write code that is always production ready and easy to change<br /> <strong>Lesson 1</strong>, simple user testing is simple, don’t assume anything and always be validating<br /> <strong>Lesson 2</strong>, Use tools to discover simple mistakes, passing tests doesn’t ensure production ready, use SQL Explain on slow queries<br /> <strong>Lesson 3</strong>, Shorten the request/response cycle, do the minimal amount of stuff possible. “perceived performance is more important that actual performance” (conditional loading etc)<br /> <strong>Lesson 4</strong>, Focus on your differentiators, don’t over engineer stuff<br /> <strong>Lesson 5</strong>, Simple elegant design can prevent complex architecture creep<br /> <strong>Lesson 6</strong>, Feature flags, offer resilience as well as a way to offer features<br /> “complex should just be lots of simple”</p> 
</blockquote><p><a href="http://www.redcorona.com/conference/qcon2013/day3.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>A common problem that almost all systems run into at some point is complaints that the system is 'too slow'. This can be addressed by using profiling tools to find the slowest part of the application, and then concentrating efforts on that section. Caching can improve performance, but it can be difficult to do it correctly, for example finding all the places where a cache item should be invalidated is not easy. Resorting to a cache can also hide poorly written code, as it will still be slow, it just won't get run as often. Mark Pacheco made a similar point about the pre-rebuild Songkick architecture in his <a href="http://www.redcorona.com/conference/qcon2013/day3.htm#pacheco">talk later on Friday</a>.</p> 
 <p>If you have dependencies on other services in your application request-response cycle (or the equivalent in an interactive application), they should be 'weak dependencies'. Robbie shared an example of a web application which had a bug recorded against it as users not being able to register; it turned out that the problem was with the mailing list provider used for signing people up to newsletters, but it had been coded in as a hard dependency, and being unable to connect to it was causing the whole registration process to fail. Wherever possible, calls to third party services should be done in the background or deferred if they can't be executed immediately, and the main application flow be allowed to continue.</p> 
 <p>A related point is that web applications should load the primary content first, and then pull in secondary content (ads, links to recent news, Twitter feeds etc), so if some piece of secondary data isn't available, the main content is still showed to the user. The perceived performance of a system (for a website, receiving the content that you want to read) is often more important than the actual performance (completed page load time).</p> 
 <p>The most expensive resource you have is time, particularly in a small agile team, so it doesn't make sense to spend time replicating something that another tool or library already does, particularly if you only have time to make a poor implementation. Just buy and use the tool! It's generally not possible to build an adequate replacement in the time that is available for the cost of the tool, and it makes sense to concentrate on the functionality that will differentiate your application from the rest of the market, not the functionality that everyone has. And only implement what you really need ... which means you need to ask questions of the customer to find out what that minimum set actually is.</p> 
 <p>One approach to maintain performance of a system under load is to follow the lead of <i>The Guardian</i> with their emergency mode: if load starts to get too high to offer the full experience to all requests, instead of rejecting requests, disable expensive but secondary features so that the main content can always be served.</p> 
 <p>Architecture should be allowed to evolve: refactoring should occur on a design level as well as a code level. Don't create abstractions and general solutions until you're sure you will need them – creating an abstract general solution takes work, and if it isn't needed then that is wasted effort. A specific case can always be refactored into a general one later if it <i>is</i> needed.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/jxstanford">@teropa: </a></u>#guardian achieves zero downtime deployment by serving static content from a CDN during deployment breaks. @robb1e #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@matlockx: </a></u>robb1e &quot;refactor continuously&quot; yay, all know that but how many r doing that? a must! ;) #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@jgrodziski: </a></u>#qconlondon @robb1e &quot;spend your time wisely&quot; work on your core domain, use off-the-shelf components anywhere else. don't reinvent the wheel.</p> 
 <p><u><a href="https://twitter.com/jxstanford">@teropa: </a></u>when we see a puzzle to solve,it tends to get the better of us.Should spend our time more wisely-can I buy it instead? #qconlondon @robb1e</p> 
 <p><u><a href="https://twitter.com/jxstanford">@pjwalstrom: </a></u>good quotes from @robb1e at #qconlondon: &quot;Only two hard problems in Computer Science: cache invalidation and naming things.&quot; Phil Karlton</p> 
</blockquote><h3><a name="h.ixdhxgg5is37"></a><a href="http://qconlondon.com/london-2013/presentation/Inside%20Lanyrd's%20Architecture">Inside Lanyrd's Architecture</a><a href="http://qconlondon.com/london-2013/speaker/Andrew+Godwin"> by Andrew Godwin</a></h3><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-3.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>They have a highly available architecture which allows them to evolve the site, and have the ability to put the site into read-only mode with cached content should the back ends suffer from any issues (or upgrades). They deploy content continuously (several times a day) and roll out new features with feature switches that allow some parts of the stack to be switched on or off depending on the user or group that they are associated with. This doesn’t do A/B testing in the strict sense, but does mean that the beta users get to see the new features before the wider audience against production data, so that they can get a feel for what works and what doesn’t work before it goes live.</p> 
</blockquote><h3><a name="h.ixdhxgg5is37"></a><a href="http://qconlondon.com/london-2013/presentation/Green%20shoots%20in%20the%20brownest%20field:%20Being%20a%20startup%20in%20Government">Green shoots in the brownest field: Being a startup in Government</a><a href="http://qconlondon.com/london-2013/speaker/Mat+Wall"> by Mat Wall</a></h3><p><a href="http://willhamill.com/2013/03/08/qcon-london---day-three/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Mat described the evolution of the tech stack of the GOV.UK platform, and how it was not necessarily intended from the start to be a platform but rather a solution to a problem. Mat described that letting the developers involved make most of the technical decisions rather than a traditional approach to ‘strategic architecture’ had enabled them to solve problems faster and with the most suitable tool for each part of the problem rather than being prescriptive and restrictive about implementation details.</p> 
 <p>Mat illustrated how the architecture had changed most in terms of the interactions between the components within the publishing platform, and how simplicity has been important in solving just the problem at hand. Mat argued that the involvement of the developers as the actual problem solvers and as trained professionals rather than just keyboard bashers was critical to good communication and the kind of working environment that was necessary to keep productive, talented people at work as opposed to the kind of bureaucratic environment that has in the past often driven many people away from the public sector. Having the developers well integrated with the rest of the team (architects, product owners, deliver managers) gave them the context and information needed to make the right decisions, rather than simply isolating the developers from the outside entirely.</p> 
 <p>Mat also described how making some tradeoffs or using a ‘good enough for now’ approach was involved in keeping momentum, rather than stopping work and getting mired down in external dependencies and having to work to outside parties’ deadlines. Mat’s example of this was a project currently in progress to develop a system for individual online electoral registration, which relies on integration with approximately 400 local authority based Electoral Registration Officers (EROs), and also with the Department for Work &amp; Pensions (DWP) in order to provide confirmation of identity data. As an aside, Mat made the point that this kind of integration was happening across many new government transaction projects because contrary to what you may infer from the tabloids - there is in fact no one ‘big government database’!</p> 
 <p>In the above project, integration with EROs and DWP was necessary for the team to progress with integrating and testing their services but the dependency on an actual electrical datalink between these third parties would be a major impediment to the team’s momentum and would significantly delay progress. In the interim, instead, the arrows on the diagram (as it were) were in fact connected not yet with a secure connection but with “high bandwidth, long-latency” transport: a secure motorcycle courier. Data was delivered encrypted via a vehicle in order for progress to be made. The motorbike diagram got a laugh from the audience but the real importance is in making the trade-off allowed the team to maintain momentum. This example was particularly poignant for me as the team that I’ve had the privilege to be working with for the last 9 months has been this project and the effect on us was that we that at the time we could make significant progress without having to seriously delay the integration phase of the project.</p> 
</blockquote><h3><a name="h.ixdhxgg5is37"></a><a href="http://qconlondon.com/london-2013/presentation/How%20we%20scaled%20Songkick%20for%20more%20traffic%20and%20more%20productive%20development">How we scaled Songkick for more traffic and more productive development</a><a href="http://qconlondon.com/london-2013/speaker/Marc+Pacheco"> by Marc Pacheco</a></h3><p><a href="http://www.redcorona.com/conference/qcon2013/day3.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>Their initial architecture was a typical one for a web startup: a mySQL database, fronted onto by a web application layer that did everything else – not just the web site itself but also auxiliary functions like their scraping and data ingest tools. That meant that a change to any part of the site's functionality required them to redeploy everything, and the unknown dependencies within the web layer meant that changing one part of the site could break things in a completely different part. Their builds would take hours, even using an Amazon EC2 cluster, there were complex relationships between supposedly disparate parts of the system, and the dependency graph became very unwieldy (Mark showed it to us, and it was so dense you could hardly see the lines).</p> 
 <p>They decided they needed to re-architect it to allow for scalability, to allow their development effort to be applied to functionality, not fixing bugs, and to speed up their release cycle so that they could get new features into production faster. That is a big decision: re-architecting takes a long time, and it isn't guaranteed that the outcome will be better than what already exists. There is also the consideration of whether to re-architect within the framework of the existing system, or whether it would be faster to simply start again with the knowledge gained from the first system.</p> 
 <p>If you are going to do a major redesign, there are some important points. The design work should be collaborative across the whole team, just as development is. Clear names need to be chosen for objects within the design, and agreed upon by everybody (from developers through to managers, product people and salesmen, so that discussions about what work needs doing are clear for everyone. The existing feature set needs to be looked at and you need to decide what can be cut out from the new system, and what the minimum acceptable set of features is for the first release of the new system. And, if it's possible, the redesign should be done piecewise, so that the whole system is always in a working state of some kind – an application that is taken down so it can be rebuilt, or for which development stops and the old version is left up until the new one is finished, is likely to lose custom.</p> 
 <p>Songkick decided to move to a strongly decoupled service model. They created a collection of Sinatra (Ruby server technology) applications which deal with the database, and accept requests via HTTP containing either JSON or form-encoded data, returning JSON. Their web application, a Ruby on Rails app, acts as a client to these services, and doesn't have a direct connection to the database. They also redesigned the object model for individual pages, moving to an MVC approach, and their page model now consists of components, which themselves may be made up of elements. Elements can be used in different contexts, and they pick up data from the context they are in (from the page model or the component model).</p> 
 <p>They also chose to link assets together by convention. A component model class name matches the name of the CSS to be applied to that component, to any JavaScript file that needs to be included with that component, and to a directory for any static assets (e.g. images) it uses. That means that it is very clear what needs to be looked at if a component needs changing or removing.</p> 
 <p>The result was a radical improvement in productivity, with a release cycle ten times faster; much better performing code (they removed all of their internal cache code and page load times didn't change); a code base that halved in size, partly due to having fewer but better targeted tests; much faster builds, down from over an hour on a cluster to under 10 minutes on a single machine; and a more collaborative, evidence-based development process.</p> 
</blockquote><h3><a name="h.ixdhxgg5is37"></a><a href="http://qconlondon.com/london-2013/presentation/Architecture%20of%20the%20Triposo%20travel%20guide">Architecture of the Triposo travel guide</a><span> by</span><a href="http://qconlondon.com/london-2013/speaker/Jon+Tirsen"> Jon Tirsen</a><span>, </span><a href="http://qconlondon.com/london-2013/speaker/Douwe+Osinga">Douwe Osinga</a></h3><p><a href="http://willhamill.com/2013/03/08/qcon-london---day-three/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Triposo’s main difference is that their travel guides are algorithmically generated rather than by hand, which means that they can collate and aggregate incredible amounts of data, gaining insights into sights, restaurants, events etc from a larger scale view….</p> 
 <p>The details of Triposo’s application development and deployment process was an interesting insight into how a company of their small size can regularly push updates for 80~ apps to the iTunes App Store.</p> 
 <p>The team is distributed and communicates mostly via Google Hangouts or similar, but it was very important to have the team come together often in order to build social connections and camaraderie. Douwe showed photos from a project kick-off meetup when the development team had all gotten together in Gran Canaria. I’ve read a few other articles about distributed teams and it seems that having the ability to get everyone in the one place for dinner, drinks and a bit of fun does have a positive impact on communication and relationships in the team (where often the distance and separation can be detrimental). Triposo have a focus on expanding their product through experimentation which is done at company hackathons and the results are either built into the product or given away to the community via the <a href="http://www.triposo.com/labs">Triposo Labs site</a>.</p> 
 <p>Triposo’s data aggregation and build process (for they are one; each app must work offline) is based largely upon crawling open data such as Open StreetMap, Wikitravel and Wikipedia for places and other sources for inclusion in the app, but also makes use of knowledge gained from crawling across closed data that can’t be used directly within the app. For a simple example, the more photos found on Flickr of a given place can be used to determine how popular a site is with tourists. Much more detailed analysis and other inferences are made with these kinds of data sets and while my notes here are unfortunately sparse it was very interesting.</p> 
 <p>The data, once aggregated, is sync’d with Dropbox and accessed by the build server. Build, signing, testing and app store submission of the 80~ apps are orchestrated by a set of VMs as the process for each app takes over an hour and would be infeasible to do singly. This enables Triposo to send an app to the app store for each major city/region which is necessary for SEO reasons because their competitors all sell single region apps and otherwise a global Triposo app won’t end up the search results.</p> 
</blockquote><p><a href="http://blog.trifork.com/2013/03/13/qcon-london-2013-agile-in-actuality-open-data-latin-as-a-programming-language/">Sven Johann</a> attended this session:</p><blockquote> 
 <p>The presenters, former Googlers and ThoughtWorkers are avid travelers and wanted to know, if they can do better then the common travel guides like Lonely Planet &amp; Co. So they started what they learned at Google: crawl the web, aggregate, match, and rank. They send their crawlers to fetch gigabytes of travel related content from all kinds of sources like Wikitravel, Wikipedia, Facebook, Open Street Maps, Flickr and some more.</p> 
 <p>Once they have all the data, it's time to parse. From each source they extract information about the places like villages, cities and countries, and the points of interest (restaurants, museums, shops, trees, etc). They're looking for patterns to create one bucket of information for a particular place from all the various sources they crawled. After this phase they end up with exactly one record for each place or point of interest that has all the information from any of the sources they've used. Now it is time to rank and these ideas were pretty cool. Among other things, they extract meta data from Flickr pictures like where and when the pictures were made. That brings them interesting information about possible events, e.g. there are many pictures around 52&deg;38'N 4&deg;45'E, but only from April to September and only Fridays between 10.00–12.30 a.m. There must be something interesting! That's the cheese market in Alkmaar. So, if your on a trip in Amsterdam, your Triposo travel app proposes you a day trip to Alkmaar on Friday (with my Lonely Planet book I usually see that only when it is already too late).</p> 
</blockquote><h2><a name="h.kazr2u1pzgyy"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=782">The Modern Web Stack</a></h2><h3><a name="h.2flkyhc41361"></a><a href="http://qconlondon.com/london-2013/presentation/Visualizing%20Information%20with%20HTML5">Visualizing Information with HTML5</a><a href="http://qconlondon.com/london-2013/speaker/Dio+Synodinos"> by Dio Synodinos</a></h3><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-3.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>He covered using techniques like CSS3 transitions and 3D transformations, as well as Canvas and WebGL drawing. There were also some cool demos, such as <a href="http://graphicpeel.com/cssiosicons">http://graphicpeel.com/cssiosicons</a> which shows a screenshot that looks very much like the iOS home screen, but with icons that are entirely CSS based. There were also some Canvas demos, such as <a href="http://browserquest.mozilla.org/">BrowserQuest</a>, a graphical adventure rendered in a Canvas.</p> 
 <p>There were also some other JavaScript libraries mentioned, such as <a href="http://raphaeljs.com/">Rapha&euml;l</a>,<a href="http://processingjs.org%3eprocessing.js%3c/a%3E,%3Ca%20href=">D3.js</a> (again), and <a href="http://fabricjs.com/">Fabric.js</a> (providing Canvas with fallback to SVG).</p> 
</blockquote><p><a href="http://blog.caplin.com/2013/03/09/qcon-2013-day-three-end-of-day-review/">Richard Chamberlain</a> attended this session:</p><blockquote> 
 <p>35,000 years ago the cave painters used their cutting edge technology to express themselves:&nbsp; fingerpainting.&nbsp; Today we have a number of low and high level tools to visualize with on the web:&nbsp; CSS, SVG, Canvas, WebGL; as well as Raphael, processing.js and D3.</p> 
 <p>We walked through examples of consuming and repackaging data with pure CSS3, or mediated by JavaScript, via heatmaps of the most forked and most watched projects on github.&nbsp; We were then shown a comparison of the relative merits of SVG, Canvas and WebGL as the low level options. Something new for me here, google happily indexes SVG, useful if you’ve got data in a diagram you need indexed.</p> 
 <p>Raphael produces SVG output which automatically falls back to VML on older browsers.</p> 
 <p>Processing can be implemented in pure JavaScript or Processing compiled to JavaScript.</p> 
 <p>D3 was the most interesting though, as it binds data to the DOM and then applies data driven transformations from then on.&nbsp; It also includes beautiful ready to use layouts.&nbsp; We were shown visualizations for navigating into graphs, and Radar charts.</p> 
</blockquote><h3><a name="h.2flkyhc41361"></a><a href="http://qconlondon.com/london-2013/presentations/show_presentation.jsp?oid=5099">Rich HTML/JS applications with knockout.js and no server</a><a href="http://qconlondon.com/london-2013/speaker/Steven+Sanderson"> by Steven Sanderson</a></h3><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-3.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>Steven Sanderson (<a href="http://twitter.com/stevensanderson">@stevensanderson</a>) from Microsoft showed a demo of using <a href="http://knockoutjs.com/">Knockout JS</a> to wire up UI models with underlyin events, so that an object model could be used in the browser to render content whilst at the same time reacting to changes in the model. I’ve seen this approach before in other libraries like Objective-J and <a href="http://sproutcore.com/">SproutCore</a> (which seems to have passed on, much like iCloud has). The difference with Knockout.JS seemed to be that it was a much more natural fit for JavaScript, without having to go into many details as to the underlying framework.</p> 
 <p>The second part of the demo was how to wire up Microsoft Azure services so that they could drive the JavaScript app, by exposing a NoSQL type DB with REST CRUD operations directly from the JavaScript app itself. The fact that all this existed within a ready-to-go Azure console was a pretty slick part of the demo (and subliminal advertising) – but Steven also had a demo in the Apple app store using PhoneGap as a web view for the same JavaScript app that he had developed (or at least, a previously created version of the same).</p> 
</blockquote><h2><a name="h.nzdbrybn6jsd"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=777">Finance, Technology &amp; Implementation</a></h2><h3><a name="h.2c29hnvpc8pq"></a><a href="http://qconlondon.com/london-2013/presentation/In-Memory%20Message%20&amp;%20Trade%20repositories">In-Memory Message &amp; Trade repositories</a><a href="http://qconlondon.com/london-2013/speaker/John+T+Davies"> by John T Davies</a></h3><p><a href="http://blog.caplin.com/2013/03/09/qcon-2013-day-three-end-of-day-review/">Richard Chamberlain</a> attended this session:</p><blockquote> 
 <p>We started with a brief history and the increased regulation required post 2008 and Dodds-Frank and EC legislation.&nbsp; This coupled with the explosion in the volume and complexity of trades to be stored means a rethink of the data layer is necessary.&nbsp; Derivatives are now ubiquitous and the FpML they are based on can be Byzantine in their complexity.</p> 
 <p>The established data storage is all relational in structure, but now the majority of data that is required to be stored is hierarchical.&nbsp; In a sense there are two options, but with either a bridge has to be built.&nbsp; Either the relational databases stay and they do little more than becomes indices to&nbsp; CLOBs of hierarchical data, or there is a need to look at Graph and NoSQL databases.&nbsp; The RDBMSs will become difficult to search, and performance is the key here.&nbsp; Alternatively the Graph and NoSQL databases may be a better architectural solution, but they do not yet have a good search query structure.</p> 
</blockquote><h3><a name="h.2c29hnvpc8pq"></a><a href="http://qconlondon.com/london-2013/presentation/Consumerisation%20-%20what%20does%20it%20mean%20to%20a%20developer?">Consumerisation - what does it mean to a developer?</a><a href="http://qconlondon.com/london-2013/speaker/Chris+Swan"> by Chris Swan</a></h3><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/jxstanford">@andypiper: </a>“</u>Hybrid is NOT the best of both worlds” - end up doing more coding to tailor for platforms @cpswan #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@andypiper: </a></u>heh - not a hybrid strategy http://t.co/NzukgHgvy3 @cpswan #qconlondon</p> 
</blockquote><h3><a name="h.2c29hnvpc8pq"></a><a href="http://qconlondon.com/london-2013/presentation/The%20technology%20behind%20an%20Equity%20Trade">The technology behind an Equity Trade</a><a href="http://qconlondon.com/london-2013/speaker/John+O%27Hara"> by John O'Hara</a></h3><p><a href="http://blog.caplin.com/2013/03/09/qcon-2013-day-three-end-of-day-review/">Richard Chamberlain</a> attended this session:</p><blockquote> 
 <p>This was a great and detailed talk about how the Equity markets work across the world.&nbsp; Apparently equities are the second simplest asset class after FX.&nbsp;&nbsp; NYSE was the biggest market by value, but India the biggest by volume.&nbsp; A pointer to the way exchanges may change in the future.</p> 
 <p>Then we were introduced to the range of trading types within equities from Single Orders through to High Frequency Trading, the UAVs of the financial world, via Program, basket trades and algorithmic trading engines.&nbsp; No doubt these are all meat and drink to the Business, but the talk started with the observation that the IT guys are often told ‘what’ to do, rather than ‘why’.&nbsp; …</p> 
 <p>We were then taken through the lifecycle of a trade, and also made aware of the quote from Goldman Sachs that described one of it’s goals as to be a ‘low cost provider’.&nbsp; McKinsey also had a report on ‘The Triple Transformation’.&nbsp; All encouraging investment banks to take risks with technology to cope with the sea change in their volumes of trades and the reduced profits to them of managing those trades.</p> 
 <p>Some of the same NoSQL and in memory solutions were name checked again when the actual technologies in use were displayed.&nbsp; The conclusion was that we may be entering a new era of banking technology.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/jxstanford">@m4tthall: </a></u>large global banks have approx 10 billion dollars annual technology costs #QConLondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@m4tthall: </a></u>we are embarking on a new era of banking technology, some of the biggest challenges in IT will lie in banks John O'Hara #QConLondon</p> 
</blockquote><h2><a name="h.jbugzfqr7kgd"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=764">Big Data NoSQL</a></h2><h3><a name="h.gx9nrjkiop00"></a><a href="http://qconlondon.com/london-2013/presentation/Big%20Data:%20Making%20Sense%20of%20it%20all!">Big Data: Making Sense of it all!</a><a href="http://qconlondon.com/london-2013/speaker/Jamie+Engesser"> by Jamie Engesser</a></h3><p><a href="http://blog.trifork.com/2013/03/13/qcon-london-2013-agile-in-actuality-open-data-latin-as-a-programming-language/">Sven Johann</a> attended this session:</p><blockquote> 
 <p>Jamie Engesser from HortonWorks pointed out, that we should really, really do Big Data for a reason and not because it's cool.</p> 
</blockquote><h3><a name="h.gx9nrjkiop00"></a><a href="http://qconlondon.com/london-2013/presentation/The%20Past,%20Present,%20and%20Future%20of%20NoSQL">The Past, Present, and Future of NoSQL</a><a href="http://qconlondon.com/london-2013/speaker/Matt+Asay"> by Matt Asay</a></h3><p><a href="http://willhamill.com/2013/03/08/qcon-london---day-three/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>Matt is employed by 10gen, the makers of MongoDB and gave a talk on the emergence of NoSQL, the state of the union and briefly commented on where he thinks the future for these technologies lie. Matt described the history of data storage without SQL (which is not new!) and how the introduction of SQL in the 1970s was a great leap forward in decoupling the data storage schema design from the query design.</p> 
 <p>However more and more companies are discovering the lessons learned by web-scale systems like Facebook, Google and Craigslist: that traditional SQL based relational data stores can’t scale to cope with today’s huge data sets. The NoSQL paradigm emerged from a resistance to hammer the square peg of RDBMS into the round hole of loosely structured, sometimes complexly linked, sometimes unlinked, huge scale data….</p> 
 <p>Matt described how for many modern organisations, NoSQL is the new normal. For example at The Guardian their data persistence technology of choice is now MongoDB for ease of use and scalability, and to choose something different on a new tech project requires justifying why not to use it (which I’m sure is quite different to many organisations’ approach in this area).</p> 
 <p>Matt suggested that the future of data storage lies in the ‘polyglot persistence’ paradigm; to have simultaneously multiple data storage styles in use for different parts of the business’ data as per what best fits that data and the way it is used. For example, storing highly related data like recommendations or travel itineraries in a graph database, website user comments in a document store and HR records in the RDBMS. Horses for courses - not just the current flavour of the month for every problem!</p> 
</blockquote><p><a href="http://www.redcorona.com/conference/qcon2013/day3.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>Like many 'big new ideas', that of the schemaless, non-relational database is not entirely new, but takes inspiration from the past. Before the introduction of SQL, NASA developed IMS for their Apollo program in 1969. The schemaless approach meant that thought needed to be put into query design up front, at the same time as application planning. What SQL brought to the table was the ability to think about the schema and the data structure up front, but allow query design to be done later, speeding up the planning phase.</p> 
 <p>So what has changed to provide pressure in the present day for a change to the SQL/relational model? Very large relational databases (very large amounts of data, or numbers of relational connections) become hard to update or change – it took Craigslist <i>3 months</i> to complete a tiny schema change in their RDB! The advance of storage technology, bandwidth and Internet connectivity means that large web companies now receive more data and load than a RDB can cope with; the big data revolution began with companies like Google and Facebook trying to find something that would deal with their needs. And as business systems become more people-oriented, the data that needs to be stored becomes more flexible and less suitable for storage in a fixed record format.</p> 
 <p>NoSQL is moving into the mainstream. Major online companies like Amazon and Netflix use NoSQL databases for their user-oriented data storage, e.g. for their recommendation system, and this type of user-centric data is where their focus and innovation are directed, not their record-based billing systems and accounts (where a relational model will always continue to be the right answer). News media is an area where companies need to be flexible and agile, as nobody really knows what the future of news media will be, and several news sites use NoSQL databases. And more companies are reaching the limits of a single relational database on a single server, so the ability of NoSQL solutions to be scalable on commodity servers is a big advantage.</p> 
 <p>So what of the future? Matt sees a future where NoSQL becomes the 'new normal': in the majority of cases, the choice of data storage mechanism is quite an open one, and both a relational and non-relational database would be a valid option; in those cases, he sees companies choosing NoSQL databases as their standard. A few mainstream organisations have already made this decision; The Guardian is one of them. NoSQL database implementations have come of age in the present day, and are now general purpose, high performance and easy to use. They are not suitable for everything – Matt was very clear throughout the presentation that the relational database will always have its place – but they are already a reasonable choice for most situations. As they become more mature, they will become the default choice for the majority case for a lot more organisations.</p> 
</blockquote><h3><a name="h.gx9nrjkiop00"></a><a href="http://qconlondon.com/london-2013/presentation/A%20little%20graph%20theory%20for%20the%20busy%20developer">A little graph theory for the busy developer</a><a href="http://qconlondon.com/london-2013/speaker/Jim+Webber"> by Jim Webber</a></h3><p><a href="http://www.redcorona.com/conference/qcon2013/day3.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>Until recently there was a trend of not only storing data in a database, but performing calculations there too, via stored procedures. But as consumer hardware gets faster and more powerful, complex queries aren't necessarily run against the database any more; instead, data is extracted from the database by simple lookups and processed elsewhere. This means that we are free to optimise databases only for storage and simple reading operations, not complex joins and queries.</p> 
 <p>Several other talks in this stream were about non-relational systems that acted as some kind of key-indexed storage, which is easy to look up by its index, but hard to write cross-cutting queries for. Jim introduced the idea of a different way of looking at data storage – have the data model store not only data points, but connections between data objects as a graph. Graph traversal allows for individual queries to return very quickly, but the maximum throughput of queries per time period is lower than for a NoSQL database.</p> 
 <p>In Neo4j, they use a 'property graph model': nodes have arbitrary properties associated with them, and relationships connect two nodes in a directed way (for a two way link, two relationships are created) with a label and other properties. There is no schema applied to the nodes or edges within a graph, each one can have different properties.</p> 
 <p>Graph theory tells us some useful properties of dynamic graphs, especially social ones, that allow us to make predictions and perform retrospective analysis of a network. The first is that a dynamic graph naturally closes triangles: if A has some relationship with B and also with C, then B and C will naturally develop some kind of relationship, and the relationship between B and C will be such as to maintain structural balance within the triangle. These concepts of 'triadic closure' and 'structural balance' are powerful in making predictions: by constructing a graph of existing relationships, and closing each triangle with an appropriate type of link to maintain structural balance, a representation of all the implicit relationships can be made. Jim demonstrated this with a graph of allies and enemies in the mid 19th century, closed all the triangles and showed that it matched the sides in WW1.</p> 
 <p>Another important property is known as the 'Local Bridge Property': if a node has two or more strong links, any further connections it makes will be 'weak relationships' or 'bridges' to other parts of the network. Bridges are useful predictive tools when considering how to partition a network, as they will usually break first.</p> 
 <p>A new way of representing data requires a new type of query language in order to get useful results from it. Neo4j uses a query language called Cypher, which has matching clauses based on relationships between nodes in the network and given starting nodes. By choosing appropriate starting nodes for a query, different questions can be asked of the database, but unlike a traditional indexed model, all queries of the same complexity will be roughly equally fast (and the numbers for graph traversal speed Jim claimed were impressive, of the order of microseconds for simple relationship following). A graph-based data model is applicable for a wide variety of applications so this type of storage deserves a closer look, in my opinion.</p> 
</blockquote><h3><a name="h.gx9nrjkiop00"></a><a href="http://qconlondon.com/london-2013/presentation/Approximate%20methods%20for%20scalable%20data%20mining">Approximate methods for scalable data mining</a><a href="http://qconlondon.com/london-2013/speaker/Andrew+Clegg"> by Andrew Clegg</a></h3><p><a href="http://www.redcorona.com/conference/qcon2013/day3.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>We don't necessarily think about it, but characterising large data sets is difficult. <code>select distinct</code> or frequency analysis type queries on a large distributed data source are hard and expensive, particularly when the distinct list doesn't fit in memory. Approximate methods are ways of answering this type of question in an approximate, probabilistic way, usually parallelisably, and with a predictable error, while only storing a small summary of the data which is many times smaller than the full data set. Applying approximate methods to a data set will generally increase the CPU load, although not necessarily in the case of a distributed database where CPU time is used to serialise and deserialise information sent between shards, but database servers are often not running at full CPU load in any case.</p> 
 <p>The first example was that of set membership: given an index on a table, and an element, is the element in the table? In a small data case it is simple to set up a hashtable of the index and call<code>hashtable.contains(element)</code>, but this breaks down when the set becomes large. Instead, we can store with the table a <a href="http://en.wikipedia.org/wiki/Bloom_filter">Bloom filter</a> of the index, which is a bitfield of size <i>n</i>, and define <i>k</i> hash functions which each return 0 to <i>n</i>-1. An item has a characteristic set of bits, with <i>k</i> bits turned on, those being the result of running each hash function on that item. When an item is added to the table, the filter is updated with that item's bits; when an item is looked up, if all the bits in the index's filter corresponding to that item are not set, it is not in the index. Existing databases already use this method as a preliminary filter to return false quickly on a lookup that fails.</p> 
 <p>Next he talked about an approximate cardinality measure, i.e. how many distinct elements a set has. The simplest version of probabilistic counting simply looks at the longest run of trailing zeros in the result of running a hash function on every data item; the estimated cardinality is as simple as 2<sup>n</sup>. As simple as this method appears, by using several hash functions and combining them all in a final answer, an answer with a low error can be produced.</p> 
 <p>The next example was of frequency estimation. Similar to the Bloom filter, the <a href="http://en.wikipedia.org/wiki/Count-Min_sketch">count-min sketch</a> algorithm uses several hash functions which return indices into an array. This time, the array is of integers, initialised to 0; when an item is added to the index list, the values corresponding to each of the indices of its hash function are incremented. When looking an item up to find its approximate frequency, each value in the count array corresponding to returns from the hash functions is looked up, and the lowest is returned (because the minimum value of those values is the number of times this item is present, but they could be higher due to other items with the same hash function result). As well as having a tunable error rate (based on the number of hash functions and the size of the array), this method has the useful property that it is more accurate for high counts, which are likely to be the items that are more important to the application.</p> 
 <p>Finally Andrew talked about the similarity search: finding items that are similar to the one we are looking at. Similar is usually defined as having a low distance in some multi-dimensional distance space, and calculating exact values for that distance can often be expensive. An approximate method requires a suitable locality-sensitive hash function, which (unlike a good normal hash function) will return similar values for items which are nearby in terms of that distance. An example for cosine distance is the 'random hyperplane' algorithm: for a hash of <i>n</i> bits, <i>n</i> hyperplanes are constructed in the space, and for each one that a point is above, the appropriate bit is set to 1. There are other hash functions that approximate other real distance algorithms.</p> 
</blockquote><h2><a name="h.pq1mewx0oxjc"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=767">Making the Future</a></h2><h3><a name="h.dd5qdgia1b85"></a><a href="http://qconlondon.com/london-2013/presentation/Physical%20Pi">Physical Pi</a><span> by</span><a href="http://qconlondon.com/london-2013/speaker/Romilly+Cocking"> Romilly Cocking</a><span>, </span><a href="http://qconlondon.com/london-2013/speaker/Steve+Freeman">Steve Freeman</a></h3><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-3.html">Alex Blewitt</a> attended this session:</p><blockquote> 
 <p>Steve and Romilly had created a Pi-driven robot … They didn’t only have a Pi but also a connection with Arduino boards using the I2C communications protocol, with the Pi being the brains to the Arduino’s limited but functional slave system. With all the software being coded in Python, it makes interacting with other devices much easier than it was in the past.</p> 
</blockquote><h3><a name="h.dd5qdgia1b85"></a><a href="http://qconlondon.com/london-2013/presentation/Here%20Comes%20Wearable%20Technology!">Here Comes Wearable Technology!</a><a href="http://qconlondon.com/london-2013/speaker/Rain+Ashford"> by Rain Ashford</a></h3><p><a href="http://quick2wire.com/2013/03/thumbs-up-for-qcon-london/">Romilly Cocking</a> reported on this session:</p><blockquote> 
 <p>Wearable tech has some very significant applications. She told us abut research that's helping people on the Autistic spectrum to better understand the mood of others. She also talked about her work in the area of the Quantified Self (<a href="http://quantifiedself.com/">QS</a>) movement.</p> 
</blockquote><p><a href="http://blog.caplin.com/2013/03/09/qcon-2013-day-three-end-of-day-review/">Richard Chamberlain</a> attended this session:</p><blockquote> 
 <p>Started off talking about history of cyborgs and going over the work of early wearable computing genius Steve Mann with a brief detour via Robocop and also noting that watches were the first wearable tech. Picked up a lot of tech to investigate later.</p> 
 <ul> 
  <li>Quantified self –<a href="http://quantifiedself.com/">http://quantifiedself.com/</a> – community about measuring everything about yourself for better understanding</li> 
  <li>Lilypad – <a href="http://arduino.cc/en/Main/ArduinoBoardLilyPad">http://arduino.cc/en/Main/ArduinoBoardLilyPad</a> – arduino for textiles</li> 
  <li>Shrimping – <a href="http://shrimping.it/blog/">http://shrimping.it/blog/</a> – Super cheap arduino substitute</li> 
 </ul> 
 <p>She also demoed a lot of her work. Some of which can be seen here:<a href="http://rainycatz.wordpress.com/2012/10/22/baroesque-barometric-skirt/">http://rainycatz.wordpress.com/2012/10/22/baroesque-barometric-skirt/</a> . Most of it achieved by a lilypad and some conductive thread to make circuits in clothing.</p> 
</blockquote><h2><a name="h.r8drmwfb15ov"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=766">Attracting Great People</a></h2><h3><a name="h.gffrt4exjzfb"></a><a href="http://qconlondon.com/london-2013/presentation/Hire%20Education%20-%20making%20interviews%20rock">Hire Education - making interviews rock</a><span> by</span><a href="http://qconlondon.com/london-2013/speaker/Trisha+Gee"> Trisha Gee</a><span>,</span><a href="http://qconlondon.com/london-2013/speaker/Dan+North"> Dan North</a></h3><p><a href="http://airportcafe.net/2013/03/11/qcon-2013-my-takeaways/">Kevin Hodges</a> attended this session:</p><blockquote> 
 <p><em>Recruiter</em><br /> Message on the job advert must be inclusivity<br /> Where are you advertising?<br /> What are we actually hiring for?<br /> <em>Interviewer</em><br /> Try and give the interviewee a good experience<br /> Both you and the candidate must be sure, gear the conversation towards booths parties happiness<br /> Clear that’s a 2-way conversation<br /> Offer opportunities for feedback<br /> Is this person smart enough?<br /> Don’t hire yourself…<br /> Look for evidence, experiential, hypothetical, credential, opinion</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><u><a href="https://twitter.com/jxstanford">@teropa: </a></u>In an interview: &quot;Write me a singleton&quot; &quot;I can't, on moral grounds&quot; #qconlondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@vwggolf3: </a></u>If you hire someone because you don't have reasons for saying NO you must improve the way you recruit #qconlondon #hr advice by @trisha_gee</p> 
</blockquote><h3><a name="h.gffrt4exjzfb"></a><a href="http://qconlondon.com/london-2013/presentation/NoHR%20Hiring">NoHR Hiring</a><span> by</span><a href="http://qconlondon.com/london-2013/speaker/Martijn+Verburg"> Martijn Verburg</a><span>,</span><a href="http://qconlondon.com/london-2013/speaker/Zoe+Slattery"> Zoe Slattery</a></h3><p><a href="http://willhamill.com/2013/03/08/qcon-london---day-three/">Will Hamill</a> attended this session:</p><blockquote> 
 <p>In this discussion Kim and Martijn described important ways to focus on seeking out getting the right people.</p> 
 <p>When assessing a CV, often given the template nature and the somewhat boring list of technology acronyms it can be easier to tell whether the person fits and actually cares about applying for the job from their cover letter. Unfortunately when using external recruiters this won’t be included and the CV may be reformatted (or worse) to fit their template. However a good cover letter can tell the business that a candidate has actually investigated what it is that the business does, what they expect from the job and in plain English tells a little more than the ‘10 years Java, 5 years .Net’ does.</p> 
 <p>Analysing a candidate’s CV is a great way to derive questions for an interview. Use the technologies they’ve listed or the projects they’ve worked on to ask open ended and relevant questions. By relevant, Kim and Martijn mean to avoid the kind of gimmicky “how would you implement a merge sort” basic algorithmic questions (unless the job in question actually relies upon this kind of very low level algorithmic knowledge), or something that any real developer will likely just turn to Google to answer when doing their day job.</p> 
 <p>In a telephone interview Kim warned not to answer closed questions that could be quickly Googled while the candidate stalls, which is a good suggestion. ….</p> 
 <p>Martijn mentioned the utility of checking up public profiles on Github and Stack Overflow to check out candidates’ contributions, though not holding it against the candidate if they didn’t get involved in such public-facing activities. Martijn also implored the audience not to use anything they read on the candidate’s Facebook page to influence their impressions (unless they’re clearly doing something awful like kicking a load of babies) because both of the inappropriate sway an opposing opinion may have on you and also out of sheer respect for privacy.</p> 
 <p>In terms of judging the candidate at interview it’s very important to have a technical person in the interview (most tech companies do this already) and if possible, someone on the team for which the opening is being advertised. Fundamentally after all the logic tests, CV questions, “tell us a time you had to deal with problems on a project” style stuff you should be asking yourself the most important question: “would I want to work with this person?”…</p> 
 <p>Kim and Martijn also argued that many businesses don’t make it easy on themselves by way of creating uselessly vague or acronym-drenched job specs, without going into much effort to actually attract, inform and convince candidates why they should work there….</p> 
 <p>Kim and Martijn also described how as a business getting involved in the developer community has no drawbacks but great advantages in terms of getting your brand and your work out in front of exactly the kind of people you want to hire. Attending or sponsoring user groups and conferences is especially a good way to get exposure from the most talented and engaged people - who are inevitably already employed!</p> 
</blockquote><h2><a name="h.6zuocdzdap8a"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=813">NoSQL Solutions Track</a></h2><h3><a name="h.o1jnf0k56phs"></a><a href="http://qconlondon.com/london-2013/presentation/Moderated%20NoSQL%20Panel">Moderated NoSQL Panel</a> by <a href="http://qconlondon.com/london-2013/speaker/Alvin+Richards">Alvin Richards</a>, <a href="http://qconlondon.com/london-2013/speaker/Chris+Molozian">Chris Molozian</a>, <a href="http://qconlondon.com/london-2013/speaker/Andrew+Elmore">Andrew Elmore</a>, <a href="http://qconlondon.com/london-2013/speaker/Ian+Robinson">Ian Robinson</a></h3><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/m4tthall">@m4tthall: </a>NoSql - &quot;seeing a lot of companies moving from batch reporting to real time analytics&quot; easier said than done :-) #QConLondon</p> 
</blockquote><h3><a name="h.xqdz3wp0a6aj"></a><a href="http://qconlondon.com/london-2013/presentation/Scaling%20for%20Humongous%20amounts%20of%20data%20with%20MongoDB">Scaling for Humongous amounts of data with MongoDB</a> by <a href="http://qconlondon.com/london-2013/speaker/Alvin+Richards">Alvin Richards</a></h3><p><a href="http://blog.caplin.com/2013/03/06/qcon-2013-day-one-end-of-day-review/">Richard Chamberlain</a> attended this session:</p><blockquote> 
 <p>Before this talk I was skeptical about NOSQL databases in a production environment. Alvin showed off some good features of mongoDB that makes it something to investigate further. Auto-sharding and balancing of data between shards is a cool feature. Also the theory of “don’t love each piece of data equally” was good. With mongoDB you can specify when writing how much replication your data needs to have until you consider the operation complete. Non-important data can just be written to memory on the primary server, with mustn’t lose data you can specify that the data needs to be replicated to a secondary server in a different data centre before it’s complete. This increases latency, but you’re pretty sure you won’t lose it. This is available via the insert API.</p> 
</blockquote><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/matlockx">@matlockx: </a>#MongoDB #QConLondon auto balancing data between shards is a +1</p> 
</blockquote><h3><a name="h.vf8khjxbhe16"></a><a href="http://qconlondon.com/london-2013/presentation/Becoming%20Polyglot;%20Putting%20Neo4j%20into%20production%20and%20what%20happened%20next">Becoming Polyglot; Putting Neo4j into production and what happened next</a> by <a href="http://qconlondon.com/london-2013/speaker/Toby+O%27Rourke">Toby O'Rourke</a></h3><p>Twitter feedback on this session included:</p><blockquote> 
 <p><a href="https://twitter.com/wsbfg">@wsbfg: </a>Notes on Becoming polyglot - putting neo4j into production. Toby O'Rourke. <a href="https://t.co/MDUH6qia0X">https://t.co/MDUH6qia0X</a> #qconlondon</p> 
</blockquote><h3><a name="h.jyi3tjphxh4u"></a><a href="http://qconlondon.com/london-2013/presentation/Eventual%20Consistency%20in%20the%20Real%20World">Eventual Consistency in the Real World</a> by <a href="http://qconlondon.com/london-2013/speaker/Chris+Molozian">Chris Molozian</a></h3><p><a href="http://www.redcorona.com/conference/qcon2013/day1.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>The core idea of his talk is <i>eventual consistency</i>: the idea that a distributed database will eventually contain the same data on every node, and that temporary inconsistency is okay. The CAP Theorem proves that you cannot have all three of Consistent, Available and Partition-tolerant data; a distributed case is by definition partitioned, so that means that a distributed solution must trade consistency off against availability. (Availability in this context means the degree to which the system is able to accept select and update requests on any node.) If we choose consistency, then we have 'eventual availability – and in reality, if a system is not highly available (i.e. if any node of the distributed system we connect to cannot accept our request), the system is not usable, so we must prioritise availability and sacrifice some consistency. That is, for an available distributed data solution, eventual consistency is inevitable. Fortunately, <a href="http://pbs.cs.berkeley.edu/">eventual consistency is usually okay in the real world</a>, and it is already used in well known distributed systems like Facebook.</p> 
 <p>Eventual consistency works by allowing any node to accept an update at any time, and pushing that update to a number of replicating nodes. Eventually the update will propagate through the entire distributed database. However, this means that updates can happen in a different order on different nodes. The ideal solution is a data model where providing the same updates in a different order results in the same final state; Chris calls this outcome &quot;Strong Eventual Consistency&quot; and it is currently the subject of Basho's research effort. However, until this is perfected, accepting eventual consistency also means accepting data divergence or conflict from differently ordered updates.</p> 
 <p>The question then becomes: how best to resolve these conflicts? Riak uses a concept they call a <i>vector clock</i>, which acts rather like version control revision numbers. When submitting an update, the update is tagged with the identifier of the last known state for that record. If two different nodes try to update the same record with two different updates that have the same parent state, that means that two clients have tried to update the record at the same time, and conflict resolution will be triggered. (Conflicting updates can also occur if a network has been split due to infrastructure failure, and then connection is re-established; this situation, and the state mismatches it can cause, is well known to IRC users as a 'netsplit'.) This 'sibling' resolution is context dependent so Riak's API lets the application layer define how to resolve conflicts in different cases.</p> 
 <p>The overall message is that eventual consistency is acceptable, it is in fact unavoidable for a distributed database, and we should use the appropriate methods to get the best out of it.</p> 
</blockquote><h3><a name="h.9zcuer74mrdi"></a><a href="http://qconlondon.com/london-2013/presentation/Financial%20Big%20Data%20-%20Loosely%20Coupled,%20Highly%20Structured">Financial Big Data - Loosely Coupled, Highly Structured</a> by <a href="http://qconlondon.com/london-2013/speaker/Andrew+Elmore">Andrew Elmore</a></h3><p><a href="http://www.redcorona.com/conference/qcon2013/day1.htm">Richard Smith</a> attended this session:</p><blockquote> 
 <p>This one was about how relational databases don't fit the bill for storing information about financial transactions that come in a very non-tabular format.</p> 
 <p>The SWIFT message formats used for recording inter-bank end user transactions (e.g. sending money to a business abroad to pay for services) are tree structured. The message contains several blocks; the main content block contains sections, some of which may be optional or repeated; they contain fields which similarly may not always be present or which may be present several times; and so on. The format is several levels deep, and at no point is there a guarantee that a particular field will be present in every message. It's also versioned, as the formats are updated frequently. This is obviously a poor fit for a traditional RDB and its idea of records containing values for a fixed set of fields (columns in a tabular view).</p> 
 <p>Several solutions have been tried in order to manage this data. Firstly, some consumers simply extract only the fields that they are interested in, and store that in an RDB. This works, but data is permanently lost, which could be losing value from future re-analysis of stored data with new ideas. Others tried storing the message records in XML, but although this preserves the tree nature of the data, it is not easily indexable and it is not the format that the consuming code will want to use. The ideal world would be an object tree in the target environment (i.e. Java objects for a Java program, populated structures to a C++ program, etc), in an indexable database type container to permit querying.</p> 
 <p>Naturally the presenter's company sells just such a solution, particularly targeted at financial messaging! Their system has predefined type mappings for the financial message types used in the talk. The general concept is that a grammar is specified for the input format, and incoming messages are parsed and translated into an object tree, which is then stored in the data source.</p> 
 <p>Andrew then moved on to the advantages of using an event-driven data processing paradigm. In a typical flow-based architecture, scalability only happens in one place (the number of streamed processing units you have), even though some parts of the process are probably more resource intensive than others. By having each processing unit small and self-contained, taking data from one storage pool, processing it in some way and returning it to another, and having the data storage pools dispatch events to request processing to occur, each step of the processing becomes scalable and potentially distributable. This is very similar in idea to the pub-sub (publish/subscribe) model of multiple worker processes typically seen in the Q world, and in my time at First Derivatives I saw how easy that makes it to scale and distribute the processing units.</p> 
 <p>Storing objects in your database has some big advantages. You can use any object properties in indexing and querying, and you can store exception objects or other state-holding rich failure objects in it to get the most possible information about unsuccessful execution cases. But it can also result in very large record sizes (and of course the data objects must be serialisable in order to distribute the database).</p> 
 <p>Distributing an object database also raises the questions of how to manage notification (i.e. dispatching events to request a processing agent takes on a data object), and how to deal with exceptions, when the system is spread across multiple instances. These problems have already been looked at in solution that use conventional RDSs, but they are more immediately obvious when the object tree is integrated with the data storage and when the database and application are distributed together.</p> 
</blockquote><h2><a name="h.obcdaan4m36"></a><a href="http://qconlondon.com/london-2013/tracks/show_track.jsp?trackOID=863">Solution Track Thursday 2</a></h2><h3><a name="h.fjvsplqovixn"></a><a href="http://qconlondon.com/london-2013/presentation/Big%20Data%20@%20Skype">Big Data @ Skype</a> by <a href="http://qconlondon.com/london-2013/speaker/Bryan+Dove">Bryan Dove</a></h3><blockquote> 
 <p><a href="https://twitter.com/sean_wilkes">@sean_wilkes: </a>#bigdata at Skype #QConLondon 4533. Embrace failure. We're doing a bunch of tough things and you learn more this way. An #agile principal!</p> 
 <p><a href="https://twitter.com/tkalkosinski">@tkalkosinski: </a>#skype big data team is 7 people total! Impressive by Bryan Dove on #QConLondon</p> 
 <p><a href="https://twitter.com/portixol">@portixol: </a>Good question at the Big Data @skype session #qconlondon - How do you educate the stakeholders on how to embrace failure?</p> 
 <p><a href="https://twitter.com/portixol">@portixol: </a>Answer: Even when we fail the time to fix is shorter - push code every day #qconlondon</p> 
</blockquote><p>&nbsp;</p><h2><a name="h.bzvlqdqb9z13"></a>Events</h2><p>Alex Blewitt attended the <a href="http://alblue.bandlem.com/2013/03/qcon-day-1.html">Atlassian Angry Nerds Party</a>:</p><blockquote> 
 <p>Atlassian sponsored the end-of-day party in the associated hall, which has the benefit of being right next door to the conference venue as well as a fairly sizable space in which to congregate. There were also several games-style tables, including football table and an air hockey table. The beer was probably more plentiful than the finger food, but none the less was a pleasant way to end the evening, as I talked for some time with Graham Lee about the evoluion of the Nextstep platform and reminscing about ye olden times.</p> 
</blockquote><h2><a name="h.n979tv53huxz"></a>Opinions about QCon</h2><p>Opinions expressed on Twitter included:</p><blockquote> 
 <p><u><a href="https://twitter.com/charleshumble">@charleshumble: </a></u>#qconlondon are making videos of all the talks available to attendees within hours. That's awesome!</p> 
 <p><a href="https://twitter.com/tomayac">@tomayac: </a>Conference location matters! Analyzing #QConLondon imgs/vids from social networks&acirc;†’5 out of top10 about view. #TomsPhD <a href="http://t.co/IZUF9U8YLm">http://t.co/IZUF9U8YLm</a></p> 
 <p><a href="https://twitter.com/andypiper">@andypiper: </a>Dateline: London #qconlondon @ Queen Elizabeth II Conference Centre <a href="http://t.co/HiTeKEc6EX">http://t.co/HiTeKEc6EX</a></p> 
 <p><a href="https://twitter.com/hatofmonkeys">@hatofmonkeys: </a>Fantastic day on the cloud track at #qconlondon . Great speakers, talks and questions. Many thanks to all involved!</p> 
 <p><a href="https://twitter.com/toughplacetogo">@toughplacetogo: </a>Free beer! #qconlondon #boom</p> 
 <p><a href="https://twitter.com/Kanzo007">@Kanzo007: </a>#QConlondon is fantastic, and now provided with my amazing free t-shirt from #atlassian it's even better! :D <a href="http://t.co/RYlZqlLmZp">http://t.co/RYlZqlLmZp</a></p> 
 <p><u><a href="https://twitter.com/jxstanford">@arungupta: </a></u>Beerapalooza and snacks keeping lots of geeks happy at #QConLondon Enjoy courtesy of @OTN_Events_EMEA <a href="http://t.co/C51kP8QWkQ">http://t.co/C51kP8QWkQ</a></p> 
 <p><u><a href="https://twitter.com/jxstanford">@madspbuch: </a></u>Enjoying my time at #QConLondon , delicious food :-D</p> 
</blockquote><h2><a name="h.fa6a8d1ctdbs"></a>Takeaways</h2><p><a href="http://quick2wire.com/2013/03/thumbs-up-for-qcon-london/">Romilly Cocking</a> shared his impression on QCon:</p><blockquote> 
 <p>QCon was well organised, very well attended, and packed with interesting talks. If you're a software professional, or interested in what top professionals do, then QCon is a must. And if you can't wait till next year, you can find this year's talks (and other excellent material) available on <a href="http://www.infoq.com/;jsessionid=4BFB339621557270A53472A95B63F41C">InfoQ</a>.</p> 
</blockquote><p><a href="http://alblue.bandlem.com/2013/03/qcon-day-3.html">Alex Blewitt</a> shared his impression on QCon London 2013:</p><blockquote> 
 <p>New this year was the immediate availability of the videos on the same day as the conference. Prior years have drip-fed them out from the conference via InfoQ over the next six months, but this time raw video footage was available as early as the same evening. This was great for the conference goers who missed out an opportunity to see something (and would otherwise have forgotten had it not been immediately available). Once they’re edited with the slides in situ, they’ll be made available on InfoQ as well. The immediate access videos were only available to paying conference guests, though there was some interest in making a separate video pack available to purchase – if you have any thoughts on that, contact Floyd or I can pass messages on to him. …</p> 
 <p>What is clear is that it’s QCon’s biggest year ever. We expanded to more floors than before and had a higher footfall than any previous year I recall. And one of the things that makes QCon great is the diversity of talks with a wide range of industries (and government!) represented. Which other conference can you go from a robotic Pi to a massively distributed architecture talk and meet some of Computer Science’s greats into the bargain?</p> 
 <p>See you next year.</p> 
</blockquote><p>Twitter was flooded with impressions on QCon, including:</p><blockquote> 
 <p><a href="https://twitter.com/jaumejornet">@jaumejornet: </a>Each #QConLondon I got a book from @developerfocus, probably the best gift anyone can give you Thanks guys, u rock! <a href="http://t.co/xNu5cMZGma">http://t.co/xNu5cMZGma</a></p> 
 <p><a href="https://twitter.com/markgibaud">@markgibaud: </a>Awesome day at #qconlondon. So inspired, narrowed it down to about 8402658 things I want to try out next.</p> 
 <p><a href="https://twitter.com/floydmarinescu">@floydmarinescu: </a>Feels surreal to already be able to watch the presentations from #qconlondon from today - in video already :) <a href="http://t.co/LWGdJxvLB0">http://t.co/LWGdJxvLB0</a></p> 
 <p><u><a href="https://twitter.com/jxstanford">@skillsmatter: </a></u>Thank you #qconlondon for 3 fantastic days!</p> 
 <p><u><a href="https://twitter.com/jxstanford">@dthume: </a></u>#qconlondon draws to a close once more. Props to all the staff; the organisation, and the nosh, were as top notch as ever.</p> 
 <p><u><a href="https://twitter.com/jxstanford">@BlackPepperLtd: </a></u>The #QConLondon conference has been a great few days. Lots of good content. Lots of great people. Thanks to all involved.</p> 
 <p><u><a href="https://twitter.com/jxstanford">@CaplinTech: </a></u>Aaaaand it's over. Bye bye #qconlondon thanks for the knowledge, new tools/techniques, new connections and free beer.</p> 
 <p><u><a href="https://twitter.com/jxstanford">@matlockx: </a></u>Great open space talk with @pniederw Thanks again Peter! #QConLondon</p> 
 <p><u><a href="https://twitter.com/jxstanford">@EdMcBane: </a></u>Great open space with @benjaminm @trisha_gee @IsraKaos and many others, talking about hiring great people. Too bad #QConLondon is over</p> 
 <p><u><a href="https://twitter.com/jxstanford">@garethr: </a></u>One thing I've taken away from #qconlondon is a realisation that Erlang has got popular in certain interesting circles</p> 
 <p><u><a href="https://twitter.com/jxstanford">@dthume: </a></u>#qconlondon - over for another year :( 11.8 months 'til I can talk about interesting stuff again with folk who share the love.</p> 
 <p><u><a href="https://twitter.com/jxstanford">@PauliciPop: </a></u>Awesome #qconlondon was awesome <a href="http://t.co/lpmkdUN2Sz">http://t.co/lpmkdUN2Sz</a></p> 
</blockquote><h2><a name="h.35fvkqrobfh"></a>Conclusion</h2><p>&nbsp;</p><div class="clearer-space"></div><br><br><br><br><br><br></body></html>