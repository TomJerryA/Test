<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>What’s Next in Software Analytics</h3><p><i><a href="http://www.computer.org/portal/web/computingnow/software"><img align="left" _p="true" _href="img://IEEE-software-logo.jpg" alt="" src="http://www.infoq.com/resource/articles/whats-next-in-software-analytics/en/resources/IEEE-software-logo.jpg" /></a>This article first appeared in </i><strong><a target="_blank" href="http://www.computer.org/portal/web/computingnow/software"><i>IEEE Software</i></a><i> </i></strong><i>magazine and is brought to you by InfoQ &amp; IEEE Computer Society.</i></p>
<p>&nbsp;</p>
<p>For this special issue, we asked a panel of six established experts in software analytics to highlight what they thought were the most important, or overlooked, aspect of this field. They all pleaded for a much broader view of analytics than seen in current practice: software analytics should go beyond developers (Ahmed Hassan) and numbers (Per Runeson). Analytics should also prove its relevance to practitioners (Abram Hindle, Martin Shepperd). There are now opportunities for &quot;natural&quot; software analytics based on statistical natural language processing (Prem Devanbu). Lastly, software analytics needs information analysts and field agents like Chloe O’Brian and Jack Bauer in the TV show 24 (Sunghun Kim). Enjoy! —<i>Tim Menzies and Tom Zimmermann, guest editors</i></p>
<h2>Software Analytics: Going beyond Developers</h2>
<p><strong>Ahmed E. Hassan</strong></p>
<p>Software analytics (SA) brings the notion of business intelligence to the software industry through fact-based decision support systems. Today, SA primarily focuses on helping individual developers with mundane coding and bug-fixing decisions by mining developer-oriented repositories such as version control systems and bug trackers. For instance, we can automatically determine the risk-the &quot;bugginess&quot; - of a code change by mining the actual risk caused by prior changes<sup>1</sup>.</p>
<p>Future SA research must look beyond these mundane tasks for SA to become a powerful, strategic, decision-making instrument. SA needs to service a project's various stakeholders-its marketing, sales, support, and legal teams-not just developers. It must go beyond mining developer-oriented repositories, to artifacts and knowledge across a project’s various facets. Traditionally-mined code repositories should be mined and linked with other customer-facing repositories, such as operation logs, transcripts from customer support calls, blog posts, and video reviews.</p>
<div id="lowerFullwidthVCR"></div>
<p>Such a multifaceted view of SA would enable it to support more impactful business-level decisions instead of the usual, &quot;Is this file buggy, and which developer can fix it?&quot; Only then can we help developers and their managers reason more strategically about the importance of a piece of code and its impact on user satisfaction and revenue, assist support staff when answering customer calls through the linking of error logs to video tutorials, help marketers better target their ad campaigns based on field usage data, and guide sales staff in pricing features by understanding the inherent value that customers associate with each feature.</p>
<h2>Proving Relevance to Practitioners</h2>
<p><strong>Abram Hindle</strong></p>
<p>The low-hanging fruit of software analytics -measurement and reporting- is a resounding success. Modern software services such as GitHub, BitBucket, Ohlol, Jira, FogBugz, and the like employ wide use of visualization and even bug effort estimation. We can pat ourselves on the backs even if those developers never read a single one of our papers.</p>
<p>Yet the sweeter fruit of software analytics is spoiling: data-mining techniques are oblivious to the software domain. I see a future in software analytics where layers of context are taken into consideration: the domain of software development (nonfunctional requirements, environments, tools, idioms, and so on), the domain of the software itself (databases, applications, and so on), and the context of the overall software project (requirements, glossary, architecture, community, and so on). For example, the n-gram models used by natural language processing ignore the source code’s nested structure, but we need to incorporate this knowledge into our data-mining techniques. Thus, we need to stop blindly utilizing the latest data-mining tools and instead try to modify and configure them for software analytics.</p>
<p>I get a rush from an increase in precision or recall for bug duplication or commit classification, but what I don't get is confidence that this improvement is relevant to practitioners. Software analytics has to prove its relevance by showing its cost effectiveness versus the alternative, which is doing nothing. Doing nothing can be amazingly efficient. We need to evaluate these techniques with practitioners in mind. We don’t need to evaluate if 10 percent more precision is meaningful for a bug triage or a manager-we need to evaluate if it's cost-effective.</p>
<p>The future of software analytics is in proving relevance to practitioners, proving the cost effectiveness of our techniques, and addressing the need for tools and techniques that leverage our knowledge of software engineering to provide more meaningful and less superficial software analytics.</p>
<h2>Mere Numbers Aren't Enough</h2>
<p><strong>Per Runeson</strong></p>
<p>In recent years, software analytics has gained increasing interest from the software engineering community. This is a very good development toward a &quot;systematic, disciplined, quantifiable approach to the development … of software&quot;, as stated in the ISO610.12 definition of software engineering. However, numbers aren't enough. The questions raised in software engineering are rarely sufficiently answered by a &quot;4&quot; or a function &quot;y = 3.1x + 2&quot;. Numbers and equations are important to capture relations in the data, but for practical use, they must be accompanied with interpretation and visualization.</p>
<p>Interpretation of software analytics takes the findings of the number crunching into the real software engineering world of flesh and blood, organizations and company cultures, business and market. Mostly, it's a transfer from the quantitative domain to the qualitative domain. But let's say that software analytics find a negative correlation between project manager experience and project failure. Does that imply we should only have inexperienced managers? No, there's a third factor-project complexity. Experienced managers run more complex projects, which are more likely to fail! This interpretation process is exactly what's needed to make software analytics useful.</p>
<p>Visualization is another means of taking software analytics numbers into managers' domains. Although most software managers are technically and analytically skilled, they don't have time to dig into the details, so they need visualization approaches to fully grasp the findings. Graphs and charts generated by statistics and spreadsheet tools are a good start, but more research is needed on how to bring the message out of the software analytics to those who make decision based on them. The visualization is what will make the software analytics powerful. Basically, we should keep doing research in software analytics, but let's not forget about the interpretation and the visualization.</p>
<h2>Three Questions for Analytics</h2>
<p><strong>Martin Sheppard</strong></p>
<p>The use of advanced machine learning and statistical methods to data mine various software engineering artifacts such as source code and change data has become a growth industry. Many interesting and useful models and discoveries are being made, but these kinds of approaches aren't without dangers. As researchers, we should ask ourselves the following three questions.</p>
<p>First, how much better is my model performing than a naive strategy, such as guessing or using the modal class? This might seem like an unnecessary question, but if analysis is restricted to outperforming another model or result, then there's a danger that we might end up with a model that’s merely less bad than a dreadful model! If this seems far-fetched, I can vouch for it: Stephen MacDonell and I recently demonstrated that some previously published predictive models based on a combination of regression to the mean and case-based reasoning actually performed worse than simple guessing using permutation<sup>2</sup>. Naive benchmarks also have the advantage of being simple to use.</p>
<p>Second, how practically significant are the results? Typically, this is judged by using effect sizes<sup>3</sup>. But one of the dangers of focusing on null hypothesis significance testing and reporting p values, as is customary, is that when n is very large, which for data analytics is often the case, then even very small effects can become highly significant in the statistical sense (though not in the practical sense). Because our goal is to discover practically useful results, it's important not to become distracted by <i>p</i> values.</p>
<p>Third, how sensitive are the results to small changes in one or more of the inputs? We need to remind ourselves that we're dealing with noisy and uncertain data, so it's important to be aware of the impact on the model when, say, you have small measurement errors in one of the inputs. Sensitivit analysis is a means of systematically analyzing this kind of vulnerability<sup>4</sup>. It equips end users with the knowledge that a model critically depends on a particular input, so that they at least have the option of investing extra effort in ensuring its accuracy.</p>
<h2>Toward &quot;Natural&quot; Software Analytics</h2>
<p><strong>Prem Devanbu</strong></p>
<p>Analytics can be viewed as the discipline of designing and estimating statistical models of software phenomena, and then using those models to help programmers. From this elevated platform, we envision an entirely new and different frontier of research: using models from statistical natural language processing for a new kind of analytics.</p>
<p>Natural languages such as English are complex, intricate, and expressive; any random Shakespearean sonnet will convince you of that. And yet, what most people write and say, most of the time, is highly repeatable and predictable. This mundanity of everyday language use, coupled with large online corpora, have made the statistical natural language processing (SNLP) revolution<sup>5</sup> possible, yielding incredible devices like Google Translate and Siri.</p>
<p>Over the past year or so, we've found that, surprisingly, code is no different<sup>6</sup>. While algorithms books bulge with amazing feats of programming prowess, most everyday code is simple and highly predictable. Indeed, we've been able to adapt standard n-gram models from statistical NLP to code, and train them on hundreds of millions of LOC. Using the entropy-based measures common in SNLP, we discovered that code is actually between 8 and 16 times more predictable than English.</p>
<p>We've already built two demonstration tools to exploit this fact. First, we showed that, even with a simple <i>n</i>-gram model, we could significantly improve the performance of the powerful builtin Eclipse suggestion engine. Second, we found that statistical modeling can be used within the Dasher framework<sup>7</sup> to allow programmers with limited mobility to input code using just gestures.</p>
<p>But wait, there's more:</p>
<ul> 
 <li>It might be possible to implement code summarizations or retrieval (and even porting) as a <i>translation task</i>.</li> 
 <li>It's likely that search-based software engineering methods can be improved by leveraging the highly skewed nature of programs' probability distributions (most possible programs, in fact, never occur in the wild).</li> 
 <li>We also believe that with a large enough training corpora of annotated code, we can cast some static analysis problems as translation tasks.</li> 
</ul>
<p>There's a lot to do, and we urge you to join us!</p>
<h2>Wanted: Assistance from Information Analysts</h2>
<p><strong>Sunghum Kim</strong></p>
<p>I'm a huge fan of spy thrillers such as <i>Mission: Impossible</i> and the TV series 24. The field agents are amazing: they fearlessly stay focused on missions and make the right decisions at the right time. They’re the heroes, but we shouldn’t neglect the information analysts (such as Chloe on 24) who usually sit behind a computer terminal at HQ. These people provide critical information, such as the backgrounds, strengths, and weaknesses of the people, places, and eventualities faced by the field agents. Without the information analysts, it's hard to imagine a successful mission. In fact, it's the information analysts who are the real heroes.</p>
<p>Unfortunately, when our software field agents (developers) fight against the bad guys, they don't have the assistance of information analysts available to them. Developers have to figure out all the necessary information about what and where and how to change the software by themselves. Consequently, it's not surprising to see many unsuccessful missions.</p>
<p>We need to provide the services of information analysts to developers and assist them in making the right decisions. Although excellent information analysts such as Chloe are in short supply, the good news is that software analytics can serve more or less the same function. Like human information analysts, software analytics can continually provide contextual information based on developers' current tasks. Decent information visualization and computer-human interaction technologies can help present this information efficiently.</p>
<h2>References</h2>
<p>1. E. Shihab et al., &quot;An Industrial Study on the Risk of Software Changes&quot;, <i>Proc. ACM SIGSOFT Symp. Foundations of Software Eng.</i> (FSE 12), ACM, 2012.<br /> 2. M. Shepperd and S. MacDonell, &quot;Evaluating Prediction Systems in Software Project Estimation&quot;,<i> Information &amp; Software Technology</i>, vol. 54, no. 8, 2012, pp. 820–827.<br /> 3. P. Ellis, <i>The Essential Guide to Effect Sizes: Statistical Power, Meta-Analysis, and the Interpretation of Research Results</i>, Cambridge Univ. Press, 2010.<br /> 4. A.Saltelli, S. Tarantola, and F. Campolongo, &quot;Sensitivity Analysis as an Ingredient of Modeling&quot;, <i>Statistical Science</i>, vol. 15, no. 4, 2000, pp. 377–395.<br /> 5. K. Sparck Jones, &quot;Natural Language Processing: A Historical Review&quot;, <i>Current Issues in Computational Linguistics: In Honour of Don Walker</i>, Kluwer, 1994.<br /> 6. A. Hindle et al., &quot;On the Naturalness of Software&quot;, <i>Proc. Int'l Conf. Software Eng.</i> (ICSE), IEEE, 2012.<br /> 7. S.A. Wills and D.J.C. MacKay, &quot;DASHER: An Efficient Writing System for Brain-Computer Interfaces?&quot;, <i>IEEE Trans. Neural Systems and Rehabilitation Eng.</i>, vol. 14, no. 2, 2006, pp. 244–246.</p>
<h2>About the Authors</h2>
<p><strong>Ahmed E. Hassan</strong> is the NSERC BlackBerry Software Engineering Chair. NSERC is the Natural Sciences and Engineering Research Council of Canada, Canada's federal funding agency for university-based research. Hassan leads the Software Analysis and Intelligence Lab (SAIL) at the School of Computing, Queen's University, Canada, and has been a driving force behind the mining software repositories community and its associated conference (http://msrconf.org). Contact him at ahmed.hassan@gmail.com.</p>
<p><strong>Abram Hindle</strong> is an assistant professor of computing science at the University of Alberta. He works on problems relating to mining software repositories, improving software engineering-oriented information retrieval with contextual information, and the impact of software maintenance on software power consumption. Contact him at abram.hindle@ softwareprocess.es.</p>
<p><strong>Per Runeson</strong> is a professor in software engineering at Lund University and leader of its Industrial Excellence Centre for Embedded Applications Software Engineering. Contact him at per.runeson@ cs.lth.se.</p>
<p><strong>Martin Shepperd</strong> is professor of software technology at Brunel University, London, and associate editor of the journal Empirical Software Engineering. He is a Fellow of the British Computer Society. Contact him at martin.shepperd@brunel.ac.uk.</p>
<p><strong>Prem Devanbu</strong> is a professor of computer science at the University of California, Davis. He received a PhD from Rutgers. Contact him at devanbu@cs.ucdavis.edu or via www.cs.ucdavis. edu/~devanbu.</p>
<p><strong>Sunghum Kim</strong> is an assistant professor at the Hong Kong University of Science and Technology. His research area is software engineering, focusing on software evolution, software analytics, repository data mining, development social network mining, program analysis, and empirical studies. Contact him at hunkim@cse.ust.hk.</p>
<p><i><a href="http://www.computer.org/portal/web/computingnow/software"><img align="left" _p="true" _href="img://1IEEE-software-logo.jpg" alt="" src="http://www.infoq.com/resource/articles/whats-next-in-software-analytics/en/resources/1IEEE-software-logo.jpg" /></a>This article first appeared in </i><a target="_blank" href="http://www.computer.org/portal/web/computingnow/software"><i>IEEE Software</i></a><strong><i> </i></strong><i> magazine. </i><i><a target="_blank" href="http://www.computer.org/portal/web/computingnow/software">IEEE Software</a>'s</i> <i>mission is to build the community of leading and future software practitioners. The magazine delivers reliable, useful, leading-edge software development information to keep engineers and managers abreast of rapid technology change. </i></p>
<p>&nbsp;</p>
<p>&nbsp;</p><br><br><br><br><br><br></body></html>