<p>.NET Native is an attempt from Microsoft to reduce the start up times and memory footprint of Windows Store applications.</p>
<p>Speculation about this project started to circulate in November last year when some noticed that a certain Windows Store app had a much faster start up time. Known internally as Project N, .NET Native improves the performance of .NET applications by precompiling managed code into native one using the Microsoft’s C++ back-end infrastructure. This technology is different from NGen&nbsp;(Native Image Generator)&nbsp;or dynamic compilation for Store apps.</p>
<p>The .NET Native toolchain initially generates MSIL which is then processed by the C++ optimizer generating MDIL (Machine-Dependent IL), according to Mani Ramaswamy, Project Manager of the .NET Native team, who provided technical details in a Channel 9 interview. The native app is statically linked against Mrt100.dll which is just a few hundred KB in size, according to Shawn Farkas, Dev Lead. Mrt100.dll represents a minimum CLR, refactored and optimized for static compilation. So, when the application starts up it runs against this minimal CLR without loading the entire .NET runtime, without involving any JIT compilation.</p>
<p>Applications can still use <code>dynamic</code> to access objects whose type is decided at run time. This is made possible by discovering during code optimization and keeping all the possible types that might be accessed at run time, said Ramaswamy. Also, the standard background garbage collection is used.</p>
<p>These optimizations have increased the start up time up to 60%, while the memory footprint has been lowered by 15%, according to Ramaswamy. .NET Native is currently a preview and is targeted at Windows Store apps, but the team intends to&nbsp;extend it to the general desktop .NET apps.</p>
<p>Not much changes for the .NET developer. There are no machine abstractions introduced at the application level, and the entire developing-debugging experience remains the same. What changes is the build. One needs to generate separate builds for specific hardware platforms, of which two are already supported - ARM, x86-64bit –, while support for the x86-32bit is to come soon. One should expect 1-2 minutes longer build times due to optimizations.</p>
<p>Not everything works right now. MSDN has a section for Compiling Apps with .NET Native, including a page on migrating apps to .NET Native. There are some differences in the runtime, dealing with dynamic programming and reflection, a number of unsupported scenarios and APIs, and differences in working with Visual Studio.</p>
<p>To enable native code one needs Visual Studio 2013 Update 2 RC&nbsp;and the .NET Native SDK.</p>