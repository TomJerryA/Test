<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Building a RESTful Web Service with Spring Boot to Access Data in an Aerospike Cluster</h3><p>Spring Boot is a powerful jump start into Spring. It allows you to build Spring based applications with little effort on your part.<br /> <br /> Aerospike is a distributed and replicated in-memory database optimized to use both DRAM and native flash/SSDs.<br /> <br /> Aerospike also has high reliability and is ACID compliant. Developers can quickly scale their database cluster from two nodes to twenty nodes without bringing down the database service.</p>
<h2>What you will build</h2>
<p>This article will take you through creating a simple RESTful web service with Spring Boot.<br /> <br /> You will build a service that accepts an <a href="http://localhost:8080/as/test/flights/getAll/1234">HTTP GET</a> request.&nbsp;It responds with the following JSON:</p>
<pre>
{&quot;expiration&quot;:121023390,&quot;bins&quot;:{&quot;DISTANCE&quot;:2446,&quot;DEST_CITY_NAME&quot;:&quot;New York&quot;,&quot;DEST&quot;:&quot;JFK&quot;,&quot;YEAR&quot;:2012,&quot;ORI_AIRPORT_ID&quot;:&quot;14679&quot;,&quot;DEP_TIME&quot;:&quot;802&quot;,&quot;DAY_OF_MONTH&quot;:12,&quot;DEST_STATE_ABR&quot;:&quot;NY&quot;,&quot;ORIGIN&quot;:&quot;SAN&quot;,&quot;FL_NUM&quot;:160,&quot;CARRIER&quot;:&quot;AA&quot;,&quot;ORI_STATE_ABR&quot;:&quot;CA&quot;,&quot;FL_DATE&quot;:&quot;2012/01/12&quot;,&quot;AIR_TIME&quot;:291,&quot;ORI_CITY_NAME&quot;:&quot;San Diego&quot;,&quot;ELAPSED_TIME&quot;:321,&quot;ARR_TIME&quot;:&quot;1623&quot;,&quot;AIRLINE_ID&quot;:19805},&quot;generation&quot;:1}</pre>
<p>The data you will use is commercial flight details (included in the sample code (SP: Add the link to zip file), is a data file flights_from.csv. It contains approximately one million flight records.</p>
<p>There are also many features added to your application out-of-the-box for managing the service in a production (or other) environment. This functionally comes from Spring, (see the Spring guide: <a href="http://spring.io/guides/gs/rest-service">Building a RESTful web service</a>.)</p>
<h2>What you will need</h2>
<ul> 
 <li>A favorite text editor or IDE</li> 
 <li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK 7</a> or later</li> 
 <li><a href="http://maven.apache.org/download.cgi">Maven 3.0+</a></li> 
 <li><a href="http://www.aerospike.com/aerospike-3-client-sdk/">Aerospike Java SDK 3.0+</a></li> 
</ul>
<h2>Set up the project</h2>
<p>You can use any build system you like when building applications with Spring, but the <a href="https://maven.apache.org/">Maven</a> code is included here. If you are unfamiliar with Maven refer to the Spring guide: <a href="http://spring.io/guides/gs/maven">Building Java Projects with Maven</a>.</p>
<p>You will also need to build and install the Aerospike Java client into your local Maven repository. Download the source distribution, unzip/untar it and run the following Maven commands:</p>
<div id="lowerFullwidthVCR"></div>
<pre>
 <ul>   
  <li>mvn install:install-file -Dfile=client/depends/gnu-crypto.jar -DgroupId=org.gnu -DartifactId=gnu-crypto -Dversion=2.0.1 -Dpackaging=jar</li>
  <li>mvn clean</li>
  <li>mvn package</li>         
 </ul></pre>
<h3>Create the directory structure</h3>
<p>In the project of your choosing, create the following subdirectory structure:</p>
<p>-&gt;src<br /> &nbsp; &nbsp;-&gt;main<br /> &nbsp; &nbsp; &nbsp;-&gt;java<br /> &nbsp; &nbsp; &nbsp; &nbsp;-&gt;com<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-&gt;aerospike<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;client<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-&gt;rest</p>
<h3>Create a Maven pom</h3>
<p>Create a maven pom.xml file in the root directory of your project with the following code:</p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; 
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;groupId&gt;com.aerospike&lt;/groupId&gt;
      &lt;artifactId&gt;aerospike-restful-example&lt;/artifactId&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;0.5.0.M4&lt;/version&gt;
    &lt;/parent&gt;
      &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
        &lt;/dependency&gt;
            &lt;!-- Aerospike client. --&gt;
        &lt;dependency&gt;
              &lt;groupId&gt;com.aerospike&lt;/groupId&gt;
              &lt;artifactId&gt;aerospike-client&lt;/artifactId&gt;
              &lt;version&gt;3.0.9&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- Apache command line parser. --&gt;
        &lt;dependency&gt;
              &lt;groupId&gt;commons-cli&lt;/groupId&gt;
              &lt;artifactId&gt;commons-cli&lt;/artifactId&gt;
              &lt;version&gt;1.2&lt;/version&gt;
        &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;properties&gt;
      &lt;start-class&gt;com.aerospike.client.rest.AerospikeRESTfulService&lt;/start-class&gt;
  &lt;/properties&gt;

  &lt;build&gt;
      &lt;plugins&gt;
          &lt;plugin&gt; 
              &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; 
              &lt;version&gt;2.3.2&lt;/version&gt; 
          &lt;/plugin&gt;
          &lt;plugin&gt;
              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
              &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
          &lt;/plugin&gt;
      &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;repositories&gt;
      &lt;repository&gt;
          &lt;id&gt;spring-snapshots&lt;/id&gt;
          &lt;name&gt;Spring Snapshots&lt;/name&gt;
          &lt;url&gt;http://repo.spring.io/libs-snapshot&lt;/url&gt;
          &lt;snapshots&gt;
              &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;/snapshots&gt;
      &lt;/repository&gt;
  &lt;/repositories&gt;
  &lt;pluginRepositories&gt; 
      &lt;pluginRepository&gt;
          &lt;id&gt;spring-snapshots&lt;/id&gt;
          &lt;name&gt;Spring Snapshots&lt;/name&gt;
          &lt;url&gt;http://repo.spring.io/libs-snapshot&lt;/url&gt;
          &lt;snapshots&gt;
              &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;/snapshots&gt;
       &lt;/pluginRepository&gt;
  &lt;/pluginRepositories&gt;

&lt;/project&gt;</pre>
<p>It looks scary, but it really isnâ€™t.</p>
<h3>Create a JSON translator class</h3>
<p>The Aerospike API will return a Record object and it will contain the generation, expiry and bin values of the record. But you want to have these values returned in JSON format. The easiest way to achieve this is to use a translator class.</p>
<p>Create a translator class with the following code. It is a generic class that will translate an Aerospike Record object to a JSONObject.</p>
<pre><font color="#408080">src/main/java/com/aerospike/client/rest/JSONRecord.java</font>
package com.aerospike.client.rest;
import java.util.Map;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import com.aerospike.client.Record;
/**
* JSONRecord is used to convert an Aerospike Record
* returned from the cluster to JSON format
*
*/
@SuppressWarnings(&quot;serial&quot;)
public class JSONRecord extends JSONObject {
      @SuppressWarnings(&quot;unchecked&quot;)
      public JSONRecord(Record record){
            put(&quot;generation&quot;, record.generation);
            put(&quot;expiration&quot;, record.expiration);
            put(&quot;bins&quot;, new JSONObject(record.bins));
            if (record.duplicates != null){
                  JSONArray duplicates = new JSONArray();
                  for (Map&lt;String, Object&gt; duplicate : record.duplicates){
                        duplicates.add(new JSONObject(duplicate));
                  }
                  put(&quot;duplicates&quot;, duplicates);
             }
       }
}</pre>
<p>This class is not complicated and is very generic. You may wish to specialize your JSON translation for specific records.</p>
<h3>Create a resource controller</h3>
<p>In Spring, REST endpoints are Spring MVC controllers. The following code handles a GET request for /as/{namespace}/{set}/getAll/1234 and returns the Flight record whose key is 1234, where {namespace} is the path variable for the Aerospike namespace and {set} is the path variable for the Aerospike set.</p>
<pre><font color="#408080">src/main/java/com/aerospike/client/rest/RESTController.java</font>
package com.aerospike.client.rest;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import com.aerospike.client.AerospikeClient;
import com.aerospike.client.Bin;
import com.aerospike.client.Key;
import com.aerospike.client.Record;
import com.aerospike.client.policy.Policy;
import com.aerospike.client.policy.WritePolicy;

@Controller
public class RESTController {
      @Autowired
      AerospikeClient client;
    @RequestMapping(value=&quot;/as/{namespace}/{set}/getAll/{key}&quot;, method=RequestMethod.GET)
    public @ResponseBody JSONRecord getAll(@PathVariable(&quot;namespace&quot;) String namespace, 
            @PathVariable(&quot;set&quot;) String set,
            @PathVariable(&quot;key&quot;) String keyvalue) throws Exception {
    Policy policy = new Policy();
    Key key = new Key(namespace, set, keyvalue);
     Record result = client.get(policy, key);
     return new JSONRecord(result);
  }
}</pre>
<p>The difference between a human-facing controller and a REST endpoint controller is the response body will contain data, in your case a JSON object that represents the record read from Aerospike.</p>
<p>The @ResponseBody annotation tells Spring MVC to write the returned object into the response body.</p>
<h3>Create an executable main class</h3>
<p>Implement the main method to create a Spring MVC controller. The easiest way to do this is to use the SpringApplication helper class.</p>
<pre><font color="#408080">src/main/java/com/aerospike/client/rest/AerospikeRESTfulService.java</font>
package com.aerospike.client.rest;
import java.util.Properties;
import javax.servlet.MultipartConfigElement;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

import com.aerospike.client.AerospikeClient;
import com.aerospike.client.AerospikeException;
@Configuration
@EnableAutoConfiguration
@ComponentScan
public class AerospikeRESTfulService {
      @Bean
      public AerospikeClient asClient() throws AerospikeException {
            Properties as = System.getProperties();
            return new AerospikeClient(as.getProperty(&quot;seedHost&quot;), 
                  Integer.parseInt(as.getProperty(&quot;port&quot;)));
      }
      @Bean
      public MultipartConfigElement multipartConfigElement() {
            return new MultipartConfigElement(&quot;&quot;);
      }
      public static void main(String[] args) throws ParseException {
             Options options = new Options();
             options.addOption(&quot;h&quot;, &quot;host&quot;, true, 
                   &quot;Server hostname (default: localhost)&quot;);
             options.addOption(&quot;p&quot;, &quot;port&quot;, true, &quot;Server port (default: 3000)&quot;);
             // parse the command line args
             CommandLineParser parser = new PosixParser();
             CommandLine cl = parser.parse(options, args, false);
             // set properties
             Properties as = System.getProperties();
             String host = cl.getOptionValue(&quot;h&quot;, &quot;localhost&quot;);
             as.put(&quot;seedHost&quot;, host);
             String portString = cl.getOptionValue(&quot;p&quot;, &quot;3000&quot;);
             as.put(&quot;port&quot;, portString);
             // start app
             SpringApplication.run(AerospikeRESTfulService.class, args);
      }
}</pre>
<p>The <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/context/annotation/EnableAutoConfiguration.html">@EnableAutoConfiguration</a> annotation has been added: it provides a load of defaults (like the embedded servlet container) depending on the contents of your classpath, and other things.</p>
<p>It is also annotated with <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/context/annotation/ComponentScan.html">@ComponentScan</a>, which tells Spring to scan the hello package for those controllers (along with any other annotated component classes).</p>
<p>Finally this class is annotated with <a href="http://docs.spring.io/spring/docs/3.2.x/javadoc-api/org/springframework/context/annotation/Configuration.html">@Configuration</a>. This allows you to configure an instance of the <a href="http://www.aerospike.com/java_api/">AerospikeClient</a> as a Spring bean.</p>
<p>There is also a MultipartConfigElement bean defined. This allows you to process POST operations with this service.</p>
<p>Most of the body of the main method simply reads command line arguments and sets system properties to specify the seed host and port of the Aerospike cluster.</p>
<p>Too easy!</p>
<h2>Uploading data</h2>
<p>You may want to upload data to this service. To do this you need to add an additional method to the RESTController class to process the uploaded file. In this example, it will be a CSV file containing flight records.</p>
<pre><font color="#408080">src/main/java/com/aerospike/client/rest/RESTController.java</font>
@Controller
public class RESTController {
   . . . (code omitted) . . .
   /*
    * CSV flights file upload
    */
   @RequestMapping(value=&quot;/uploadFlights&quot;, method=RequestMethod.GET)
   public @ResponseBody String provideUploadInfo() {
       return &quot;You can upload a file by posting to this same URL.&quot;;
   }
   @RequestMapping(value=&quot;/uploadFlights&quot;, method=RequestMethod.POST)
   public @ResponseBody String handleFileUpload(@RequestParam(&quot;name&quot;) String name, 
          @RequestParam(&quot;file&quot;) MultipartFile file){
     if (!file.isEmpty()) {
           try {
                 WritePolicy wp = new WritePolicy();
                 String line = &quot;&quot;;
                 BufferedReader br = new BufferedReader(new InputStreamReader(file.getInputStream()));
                 while ((line = br.readLine()) != null) {
                       // use comma as separator
                       String[] flight = line.split(&quot;,&quot;);

                       /*
                        * write the record to Aerospike
                        * NOTE: Bin names must not exceed 14 characters
                        */
                            client.put(wp,
                                  new Key(&quot;test&quot;, &quot;flights&quot;,flight[0].trim() ),
                                  new Bin(&quot;YEAR&quot;, Integer.parseInt(flight[1].trim())),
                                  new Bin(&quot;DAY_OF_MONTH&quot;, Integer.parseInt(flight[2].trim())),
                                  new Bin(&quot;FL_DATE&quot;, flight[3].trim()),
                                  new Bin(&quot;AIRLINE_ID&quot;, Integer.parseInt(flight[4].trim())),
                                  new Bin(&quot;CARRIER&quot;, flight[5].trim()),
                                  new Bin(&quot;FL_NUM&quot;, Integer.parseInt(flight[6].trim())),
                                  new Bin(&quot;ORI_AIRPORT_ID&quot;, Integer.parseInt(flight[7].trim())),
                                  new Bin(&quot;ORIGIN&quot;, flight[8].trim()),
                                  new Bin(&quot;ORI_CITY_NAME&quot;, flight[9].trim()),
                                  new Bin(&quot;ORI_STATE_ABR&quot;, flight[10].trim()),
                                  new Bin(&quot;DEST&quot;, flight[11].trim()),
                                  new Bin(&quot;DEST_CITY_NAME&quot;, flight[12].trim()),
                                  new Bin(&quot;DEST_STATE_ABR&quot;, flight[13].trim()),
                                  new Bin(&quot;DEP_TIME&quot;, Integer.parseInt(flight[14].trim())),
                                  new Bin(&quot;ARR_TIME&quot;, Integer.parseInt(flight[15].trim())),
                                  new Bin(&quot;ELAPSED_TIME&quot;, Integer.parseInt(flight[16].trim())),
                                  new Bin(&quot;AIR_TIME&quot;, Integer.parseInt(flight[17].trim())),
                                  new Bin(&quot;DISTANCE&quot;, Integer.parseInt(flight[18].trim()))
                            );
                            System.out.println(&quot;Flight [ID= &quot; + flight[0] 
                                                    + &quot; , year=&quot; + flight[1] 
                                                    + &quot; , DAY_OF_MONTH=&quot; + flight[2] 
                                                    + &quot; , FL_DATE=&quot; + flight[3] 
                                                    + &quot; , AIRLINE_ID=&quot; + flight[4] 
                                                    + &quot; , CARRIER=&quot; + flight[5] 
                                                    + &quot; , FL_NUM=&quot; + flight[6] 
                                                    + &quot; , ORIGIN_AIRPORT_ID=&quot; + flight[7] 
                                                    + &quot;]&quot;);
                        }
                        br.close();
                        return &quot;You successfully uploaded &quot; + name;
                  } catch (Exception e) {
                        return &quot;You failed to upload &quot; + name + &quot; =&gt; &quot; + e.getMessage();
                  }
            } else {
                  return &quot;You failed to upload &quot; + name + &quot; because the file was empty.&quot;;
              }
       }
}</pre>
<p>A new method handleFileUpload() responds to a POST and reads the upload stream one line at a time. Each line is parsed and a Key object and several Bin objects are built to form the Aerospike record. Finally the Aerospike put() method is called to store the record in the Aerospike cluster.</p>
<p>Another new method provideUploadInfo() responds to a GET and returns a message indicating uploads are possible.</p>
<h3>Uploading client application</h3>
<p>Uploading can be done any way you desire. But you can use the following standalone java class to upload data to this service.</p>
<pre><font color="#408080">src/test/java/com.aerospike.client.rest/FlightsUploader.java</font>
package com.aerospike.client.rest;
import org.junit.Before;
import org.junit.Test;
import org.springframework.core.io.FileSystemResource;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

public class FilghtsUploader {
      private static final String TEST_FILE = &quot;flights_from.csv&quot;;
      @Before
      public void setUp() throws Exception {
      }

      @Test
      public void upload() {
        RestTemplate template = new RestTemplate();
        MultiValueMap&lt;String, Object&gt; parts = new LinkedMultiValueMap&lt;String, Object&gt;();
        parts.add(&quot;name&quot;, TEST_FILE);
        parts.add(&quot;file&quot;, new FileSystemResource(TEST_FILE));
        String response = template.postForObject(&quot;<a href="http://localhost:8080/uploadFlights">http://localhost:8080/uploadFlights</a>&quot;,
                                                  parts, String.class);
        System.out.println(response);
      }
}</pre>
<h3>Flights Data</h3>
<p>This is real data from 2012. It contains approximately 1 million records, so remember that it will take a few minutes to upload.</p>
<h2>Building and running the Service</h2>
<p>The Maven pom.xml will package the service into a single jar. Use the command:</p>
<p><strong>mvn clean package</strong></p>
<p>This will generate a stand-alone web service application packaged into a runnable jar file in the target subdirectory. This jar file includes an instance of Tomcat, so you can simply run the jar without installing it in an Application Server.</p>
<p><strong>java -jar aerospike-restful-example-1.0.0.jar</strong></p>
<p><img src="http://www.infoq.com/resource/articles/rest-webservice-spring-boot-aerospike/en/resources/Picture1.png" alt="" _href="img://Picture1.png" _p="true" /></p>
<h2>Summary</h2>
<p>Congratulations! You have just developed a simple RESTful service using Spring and connecting it to an Aerospike cluster.</p>
<h2>Complete Example Code</h2>
<p><a href="https://docs.google.com/a/aerospike.com/file/d/0B8luCpttpeaAVkpHZ1NWYy1TbnM/edit?usp=sharing">Example code</a></p>
<h2>Design Considerations</h2>
<p>Access control is currently handled by the application versus the database. Since the authentication process slows down database speeds, virtually all NoSQL databases do not support this function. Most of our customers have prioritized increased speed over an integrated authentication feature.</p>
<p>Another commonly requested feature is a join of two different sets of data. This is challenge faced by all distributed databases because the data for the join is distributed. In this case, the developer has to implement a join in the application.</p>
<h2>About the Author</h2>
<p><strong><img vspace="3" align="left" hspace="3" src="http://www.infoq.com/resource/articles/rest-webservice-spring-boot-aerospike/en/resources/Peter Milne photo.jpg" alt="" _href="img://Peter Milne photo.jpg" _p="true" />Peter Milne</strong> is a seasoned IT professional with extensive experience across the full software development and product life cycles. He has technical skills and management experience with small and large development teams. Peter was most recently a senior solutions architect at Aerospike. Prior to that, he was a senior analyst and programmer at MLC, and was CTO at iTerative Consulting building a Forte/UDS to Java conversion tool with 99.999% accuracy. Peter holds an MSc in distributed computing from the University of Technology, Sydney, as well as several helicopter safety licenses and certificates.</p>
<p>&nbsp;</p><br><br><br><br><br><br></body></html>