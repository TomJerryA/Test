<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Async, LINQ, and the Future of RxJS</h3><p>Reactive Extensions for JavaScript 2.2 includes an optional component for working with asynchronous data sources. Known as rx.async.js, this fulfills the need for binding to events, callbacks, and promises.</p>
<p>For standard events the <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablefromeventelement-eventname-selector">Rx.Observable.fromEvent</a> function simply requires the object holding the event and the event name. For custom events, <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablefromeventpatternaddhandler-removehandler-selector">Rx.Observable.fromEventPattern</a> allows you to pass in separate functions for attaching and detaching the event handler.</p>
<p>Converting a promise to an observable is just as easy. After constructing the promise, wrap it with the Rx.Observable.fromPromise function.</p>
<p>Callbacks are of course an import consideration for JavaScript developers, especially those using Node.js. So Async RxJS offers wrappers for both <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablefromcallbackfunc-scheduler-context-selector">standard</a> and <a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablefromnodecallbackfunc-scheduler-context-selector">Node style callbacks</a>. The latter assumes the first parameter of the callback is used to convey error information.</p>
<p><b>RxJS Future</b></p>
<p>On the roadmap for the future versions is query expression parsing. Like .NETâ€™s LINQ, this will allow developers to create queries at runtime against data sources such as IndexedDB and OData. While OData should cover most scenarios, this could conceivably open the door for the creation of other LINQ-like providers.</p>
<p>Another concern that the Rx wants to address is back pressure. This would allow the Observer to throttle back the source when the incoming messages are too frequent for it to handle.</p><br><br><br><br><br><br></body></html>