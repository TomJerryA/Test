<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Agile e a morte do departamento de QA</h3><p>A Revolu&ccedil;&atilde;o Industrial come&ccedil;ou h&aacute; cerca de 250 anos, quando as m&aacute;quinas come&ccedil;aram a assumir o trabalho humano nas f&aacute;bricas, campos e minas. &Eacute; verdade que isso levou a um grande crescimento econ&ocirc;mico; mas as m&aacute;quinas substitu&iacute;ram o trabalhador mediano, que n&atilde;o conseguiu encontrar outro emprego ou aprender novas habilidades.</p><p>A semelhan&ccedil;a com a atual situa&ccedil;&atilde;o dos testes de QA (Garantia de Qualidade) &eacute; grande. Basta olhar para a explos&atilde;o de empresas especializadas em testes, como a Mercury Interactive, durante a d&eacute;cada de 1990. Os testes de QA, assim como os departamentos de QA, foram os grandes salvadores durante o grande boom da internet na d&eacute;cada de 1990 - quando os softwares estavam sendo produzidos a uma taxa exponencial e precisavam funcionar no momento de seu lan&ccedil;amento.</p><p>No entanto, &agrave; medida que a economia desaceleravam e que o or&ccedil;amento diminu&iacute;a, que o desenvolvimento &aacute;gil se tornava mais difundido, que a demanda por software crescia e os testes automatizados come&ccedil;avam a entrar em cena, o trabalho manual tornava-se mais obsoleto ao longo do tempo. E, como na Revolu&ccedil;&atilde;o Industrial, os testes manuais de QA est&atilde;o amea&ccedil;ados. Muitos analistas de QA est&atilde;o migrando da &aacute;rea de Qualidade de Software para posi&ccedil;&otilde;es de verifica&ccedil;&atilde;o da qualidade atrav&eacute;s de programa&ccedil;&atilde;o e testes de desenvolvimento. A equipe de QA est&aacute; mudando e integrando uma equipe multifuncional. As &aacute;reas de QA e desenvolvimento est&atilde;o se unificando. As paredes est&atilde;o caindo.</p><p>Vamos dar um passo atr&aacute;s e examinar como as coisas costumavam funcionar. O modelo Cascata de desenvolvimento era a escolha da maioria das equipes de desenvolvimento desde a d&eacute;cada de 50. Essa metodologia permitia que os desenvolvedores, primeiramente, focassem seus esfor&ccedil;os na modelagem; e depois na escrita do c&oacute;digo-fonte, o qual posteriormente era repassado &agrave; &aacute;rea de QA para a realiza&ccedil;&atilde;o de testes; e por fim, recebiam este c&oacute;digo de volta com o levantamento de bugs a serem corrigidos.</p><p>Como os desenvolvedores est&atilde;o sempre sob press&atilde;o e nunca dentro do prazo, come&ccedil;aram a contar mais e mais com a equipe de QA para verifica&ccedil;&atilde;o do c&oacute;digo. Isso criou um c&iacute;rculo vicioso. Mais testadores eram contratados, os desenvolvedores acabavam dependendo destes cada vez mais e passavam a testar cada vez menos o seu c&oacute;digo. O problema se agravou, ao ponto de os desenvolvedores pararem de testar seu c&oacute;digo totalmente.</p><p>Isso foi ineficaz tanto para os testadores quanto para os desenvolvedores, retardando o tempo de lan&ccedil;amento do produto ao mercado. Os produtos resultantes falhavam em alcan&ccedil;ar os clientes dentro dos prazos.</p><p>Enquanto isso, em Fevereiro de 2001, quando a bolha das empresas de internet estava explodindo, o <a href="http://manifestoagil.com.br/">Manifesto &Aacute;gil</a> foi publicado e novas formas de pensamento dos desenvolvedores come&ccedil;aram a emergir. Os m&eacute;todos &aacute;geis deram vida nova ao mundo do desenvolvedor, em que se requeria adapta&ccedil;&atilde;o a cada mudan&ccedil;a. E rapidamente, entregar <strong>software funcionando</strong> se tornou o foco das equipes de desenvolvimento. O Agile foca nos testes dos desenvolvedores, em vez de nos testes de QA. Como o Agile continua a se tornar cada vez mais difundido e eficaz, a &aacute;rea de QA se torna menos necess&aacute;ria e mais obsoleta.</p><h2>Mais QA, mais problemas</h2><p>O desenvolvimento de software corporativo &eacute; um empreendimento caro e muito complexo. Por isso, &eacute; muito comum descobrir que os objetivos do plano original n&atilde;o s&atilde;o alcan&ccedil;ados e a gest&atilde;o precisa decidir como responder a essa situa&ccedil;&atilde;o. H&aacute; tr&ecirc;s caminhos que uma companhia pode seguir para gerenciar o tempo de lan&ccedil;amento do produto ao mercado.</p><ol start="1"> 
 <li>Aumentar o or&ccedil;amento - Nem sempre &eacute; poss&iacute;vel colocar mais dinheiro em um projeto, mas, pode ser poss&iacute;vel finalizar o projeto no prazo estimado, levando em considera&ccedil;&atilde;o a <a href="http://pt.wikipedia.org/wiki/Lei_dos_rendimentos_decrescentes">lei dos rendimentos decrescentes</a>. Tamb&eacute;m &eacute; necess&aacute;rio ter em mente que os caminhos cr&iacute;ticos do projeto podem gerar acr&eacute;scimos redundantes nos custos, e que esse n&atilde;o &eacute; um cen&aacute;rio desejado pela gest&atilde;o.</li> 
</ol><ol start="1"> 
 <li>Economizar em funcionalidades - Nem desenvolvedores nem gestores desejam entregar aos clientes menos do que est&atilde;o pagando. Definitivamente, essa n&atilde;o &eacute; uma op&ccedil;&atilde;o para muitas empresas.</li> 
 <li>Diminuir a qualidade - Embora defeitos sejam parte da vida, a qualidade do software &eacute; provavelmente o aspecto mais importante de qualquer produto. Mas a qualidade tamb&eacute;m &eacute; a primeira coisa a ser descartada.</li> 
</ol><p>O resultado &eacute; uma sensa&ccedil;&atilde;o de desequil&iacute;brio. Os desenvolvedores ficam sob press&atilde;o (ou se tornam pregui&ccedil;osos) e criam c&oacute;digos com baixa qualidade. Enquanto isso, a gest&atilde;o est&aacute; cortando a &aacute;rea de QA. H&aacute; uma falha fundamental aqui; esse &eacute; o ponto onde os fundamentos &aacute;geis podem entrar em jogo.</p><h2>Qualidade em Agile</h2><p>Com a popularidade do Agile em alta, desenvolvedores e gestores precisam estar aptos a encontrar o caminho para obter software de alta qualidade. Mas como em qualquer grande empresa, eram, e ainda s&atilde;o, as quest&otilde;es entre os dois lados que precisam ser trabalhadas. Contudo, uma coisa com que todos podemos concordar &eacute; que ambos querem produzir software no menor tempo poss&iacute;vel e, no caso dos gestores, com o menor investimento poss&iacute;vel.</p><p>Depois que a bolha da internet explodiu e a economia voltou a crescer, as companhias sabiam que precisariam desenvolver software bom sem grandes custos. &Eacute; aqui que as coisas se tornaram preocupantes. Como os custos da &aacute;rea de QA poderiam ser justificados?</p><p>Felizmente, o desenvolvimento &aacute;gil prega que os desenvolvedores testem o seu pr&oacute;prio c&oacute;digo. Fazer os testes unit&aacute;rios passarem garante que cada parte do c&oacute;digo avaliado pelos testes resolve o problema em quest&atilde;o. Isso requer esfor&ccedil;o da equipe para trabalhar de maneira integrada. Os gerentes de produto determinam o produto a ser desenvolvido, de forma que as necessidades de seus clientes sejam atendidas. Os desenvolvedores e testadores trabalham juntos para escrever as especifica&ccedil;&otilde;es dos testes. Os desenvolvedores escrevem os testes unit&aacute;rios para garantirem cada parte do c&oacute;digo produzido. Manter c&oacute;digo bem testado &eacute; a &uacute;nica forma de entregar software funcionando, que &eacute; o conceito mais importante do desenvolvimento &aacute;gil. Se escrito de forma correta, um teste unit&aacute;rio, validado, garante que um c&oacute;digo-fonte se comporte da forma que o desenvolvedor pretendia.</p><p>Embora a &aacute;rea de QA ainda tenha o seu valor, efetuando testes de cen&aacute;rios alternativos, os desenvolvedores reconhecem a necessidade de assumir a responsabilidade por seu c&oacute;digo. Um dos pilares do desenvolvimento &aacute;gil &eacute; o software funcionando. O <a href="http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_extrema">XP (eXtreme Programming)</a> inclui o desenvolvimento orientado a testes (TDD) como atribui&ccedil;&otilde;es dos desenvolvedores. Os testes unit&aacute;rios t&ecirc;m como objetivo a verifica&ccedil;&atilde;o de partes do c&oacute;digo, visando um todo melhor atrav&eacute;s dos benef&iacute;cios do feedback instant&acirc;neo e cont&iacute;nuo, que permite que bugs sejam corrigidos de forma r&aacute;pida e barata. Sem uma boa cobertura de testes unit&aacute;rios, &eacute; muito dif&iacute;cil se manter &aacute;gil, pois a arquitetura muda continuamente, e essas mudan&ccedil;as no software ir&atilde;o, em algum momento, conduzir a novos bugs. E sem o conhecimento desses bugs gerados, o desenvolvimento chega ao ponto em que nada funciona.</p><h2>Testes unit&aacute;rios: poss&iacute;vel substituto do QA</h2><p>Os testes unit&aacute;rios s&atilde;o uma forma de testar um peda&ccedil;o espec&iacute;fico de c&oacute;digo para garantir seu funcionamento adequadamente. J&aacute; foi demonstrado que, atrav&eacute;s de testes unit&aacute;rios, podemos verificar mais de 90% do c&oacute;digo produzido. E diferentemente das ferramentas manuais dos analistas de QA, os testes unit&aacute;rios, se corretamente implementados e automaticamente executados, podem evoluir juntamente com os demais artefatos do software, testando o c&oacute;digo-fonte em tempo real.</p><p>N&atilde;o digo que testes unit&aacute;rios s&atilde;o a resposta para todos os problemas de qualidade em desenvolvimento de software. Como uma plataforma para testes de c&oacute;digo, os testes unit&aacute;rios se justificam, pois custam menos, e ajudam a entregar mais rapidamente um software de qualidade. Quando se fala em fazer software de qualidade, os testes unit&aacute;rios automatizados e o TDD s&atilde;o as pr&aacute;ticas mais importantes. Essa pr&aacute;ticas permitem que os desenvolvedores adaptem seus c&oacute;digos para novas funcionalidades e outras altera&ccedil;&otilde;es em tempo real.</p><p>Os testes de QA podem ter sido os salvadores durante a bolha da internet, no final dos anos 90. Mas as empresas logo perceberam a inabilidade das equipes de QA em se ajustarem frente &agrave;s mudan&ccedil;as na arquitetura do software. Um departamento de QA &eacute; respons&aacute;vel por buscar os erros que posteriormente ser&atilde;o passados aos desenvolvedores para ajustes. Por outro lado, os testes unit&aacute;rios, juntamente com o desenvolvimento &aacute;gil, prometem entregar software funcionando no momento em que sai das m&atilde;os do desenvolvedor.</p><h2>E agora, para onde vamos?</h2><p>No t&iacute;tulo deste artigo, deixo a entender que a &aacute;rea de QA est&aacute; morta. Entretanto, ainda podemos observar departamentos e profissionais de QA em empresas de desenvolvimento de software. A quest&atilde;o &eacute;, por quanto tempo essa situa&ccedil;&atilde;o persistir&aacute;? Particularmente, sinto que &eacute; apenas quest&atilde;o de tempo at&eacute; acontecer uma mudan&ccedil;a dram&aacute;tica na dire&ccedil;&atilde;o dos departamentos de desenvolvimento de testes. Isso significa que os desenvolvedores ficar&atilde;o encarregados de testarem seus pr&oacute;prios c&oacute;digos e n&atilde;o poder&atilde;o mais contar com uma &aacute;rea de QA.</p><p>Sim, ainda v&atilde;o existir muitos profissionais de QA trabalhando. Acredito que veremos essas pessoas atuando como parte da equipe de desenvolvimento, ao inv&eacute;s de subordinados a outro departamento. O Agile requer comunica&ccedil;&atilde;o multifuncional, assim como a queda de silos, que n&atilde;o s&atilde;o econ&ocirc;micos nem eficazes. Al&eacute;m dos custos dessa separa&ccedil;&atilde;o serem muito altos, a velocidade &eacute; outro problema de um departamento de QA tradicional. Existe apenas um caminho l&oacute;gico a ser seguido: testes dos desenvolvedores. N&atilde;o significa que a &aacute;rea de QA est&aacute; morta, mas ter&aacute; que se redefinir e se modernizar, n&atilde;o pode continuar como est&aacute;. O departamento de QA ter&aacute; que se mesclar com a equipe de desenvolvimento, colaborando na automa&ccedil;&atilde;o de testes unit&aacute;rios ou, por outra perspectiva, fundir-se &agrave; gest&atilde;o de produtos, a fim de definir um produto que atenda &agrave;s necessidades de seus clientes.</p><p>Conforme vamos em dire&ccedil;&atilde;o &agrave; era da responsabilidade do desenvolvedor, veremos desenvolvedores produzirem software mais limpo, funcionando da forma como deveria e com menos defeitos. Agora est&aacute; nas m&atilde;os das empresas identificar onde podem economizar dinheiro e ao mesmo tempo produzir software de qualidade.</p><hr /><h2>Sobre o autor</h2><p><strong>Eli Lopian</strong> &eacute; fundador e Presidente do <a href="http://www.google.com/url?q=http%3A%2F%2Fwww.typemock.com%2F&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNEBLGoiKtLe8HuRT4XhT02cFTmZGA">Typemock</a>. Antes de fundar a empresa, teve 17 anos de experi&ecirc;ncia em pesquisa e desenvolvimento, em organiza&ccedil;&otilde;es como AMDOCS e DEC, onde era respons&aacute;vel por otimizar o processo de desenvolvimento e liderar a transforma&ccedil;&atilde;o dos ambientes de desenvolvimento para suportar processos e ferramentas eficientes.</p><div class="clearer-space"></div></body></html>