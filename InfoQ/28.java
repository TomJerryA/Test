<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Haxl: Implicit, Concurrent Data Access Using Haskell</h3><p>Facebook has <a href="https://code.facebook.com/projects/854888367872565/haxl/">open-sourced Haxl</a>, a library for efficient, concurrent data-access. The library leverages the traditional strengths of Haskell such as expressive type system, correctness and safety guarantees, as well as GHC's high performance run-time to solve the thorny issue of implicit, concurrent data access.</p>
<p>Haxl simplifies data access to remote data, such as <a href="https://github.com/facebook/Haxl/blob/master/example/sql/readme.md">databases</a> or <a href="https://github.com/facebook/Haxl/blob/master/example/facebook/readme.md">web services</a>. It can automatically batch multiple requests to the same data source, request data from multiple data sources concurrently and also cache previous requests. Jon Purdy, one of the engineers who worked on Haxl,&nbsp;<a href="http://www.reddit.com/r/programming/comments/27sykm/facebook_open_sources_haxl_a_haskell_library_for/ci42tsz">explains</a> -</p>
<blockquote>
 The basic idea here is that you can write na&iuml;ve data fetching code that looks horrifically inefficient—queries in loops, no explicit deduplication—which gets turned magically into efficient concurrent fetching under the hood.
</blockquote>
<p>To use Haxl in your application, you need to create a thin layer that denotes your data source, and describes how to access it.</p>
<p>Haxl uses the Applicative type class to allow computations to be implicitly concurrent. You can read more about how it works in <a href="http://www.haskell.org/wikiupload/c/cf/The_Haxl_Project_at_Facebook.pdf">this presentation</a>.&nbsp;The library can be found <a href="http://hackage.haskell.org/package/haxl">on hackage</a>&nbsp;and you can access the <a href="https://github.com/facebook/Haxl">source code on GitHub</a>.&nbsp;</p>
<p>Haxl is a successor of <a href="https://www.facebook.com/notes/facebook-engineering/fighting-spam-with-pure-functions/10151254986618920">FXL</a>, which solves the same problem. Although FXL also has a pure execution model, it's implementation apparently has performance issues, especially with CPU and memory usage. Using Haskell, with the GHC, was the best alternative. You can learn more about the <a href="https://code.facebook.com/posts/302060973291128/open-sourcing-haxl-a-library-for-haskell/">Story behind Haxl</a> and the use-cases that Facebook currently uses it for.</p><br><br><br><br><br><br></body></html>