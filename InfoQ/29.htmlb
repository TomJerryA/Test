<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>HBase ORM SimpleHBase设计</h3><p>目前企业软件开发占据主流的开发模式为面向对象模式。无论是建立在集合论之上的传统关系型数据库，还是以CAP定理/Hadoop/BigTable为基石的HBase，都面临以下的基本问题：</p>
<ul> 
 <li>如何保存对象到数据存储？</li> 
 <li>如何从数据存储获取对象？</li> 
 <li>如何更新数据存储中的现有数据？数据存储的类型系统和开发语言（Java）的类型系统之间如何相互转换？</li> 
</ul>
<p>简而言之，数据存储如何提供增、删、改、查的服务能力，应用如何方便的使用该能力。关系型数据库给出的答案为SQL，JDBC和各种ORM框架（典型例子为Hibernate和MyBatis）。</p>
<p><img src="http://infoqstatic.com/resource/articles/hbase-orm-simplehbase-design/zh/resources/0604001.png" width="400" alt="" _href="img://null" _p="true" /></p>
<h2>HBase ORM</h2>
<p>ORM即Object-Relational mapping，对于HBase而言不存在Relational，因此该名称不准确，只是ORM做为一个术语使用太过广泛，这里泛指数据存储和Object之间的映射。</p>
<p>HBase的设计和RDBMS差异较大，因此除了上一小节的问题外，还需要解决如下问题：</p>
<ul> 
 <li>如何映射HTable的RowKey？</li> 
 <li>如何映射HTable的bytes到Java类型？</li> 
 <li>如何映射HTable的多版本能力？</li> 
</ul>
<p>本文着重介绍HBase ORM SimpleHBase框架，并和另一个HBase ORM Phoenix（<a href="http://phoenix.incubator.apache.org/">http://phoenix.incubator.apache.org/</a>）做比较。</p>
<div id="lowerFullwidthVCR"></div>
<h2>SimpleHBase简介</h2>
<p>SimpleHBase（<a href="https://github.com/zhang-xzhi/simplehbase">https://github.com/zhang-xzhi/simplehbase</a>）是Java和HBase之间的轻量级中间件，主要包含以下功能：</p>
<ul> 
 <li>数据类型映射：Java类型和HBase的bytes之间的数据转换。</li> 
 <li>简单操作封装：封装了HBase的put,get,scan等操作为简单的Java操作方式。</li> 
 <li>HBase query封装：封装了HBase的filter，可以使用SQL-like的方式操作HBase。</li> 
 <li>动态query封装：类似于mybatis，可以使用xml配置动态语句查询hbase。</li> 
 <li>insert,update支持: 建立在HBase的checkAndPut之上。</li> 
 <li>HBase多版本支持：提供接口可以对HBase多版本数据进行查询,映射。</li> 
 <li>HBase原生接口支持。</li> 
 <li>HTablePool管理。</li> 
</ul>
<h2>设计理念</h2>
<p>Phoenix的设计理念为:We put the SQL back into NoSql。该理念的优点如下：</p>
<ol> 
 <li>SQL做为大众熟悉的API，用户学习成本较低。</li> 
 <li>减少程序员的代码开发量。</li> 
 <li>性能优化对用户透明。</li> 
 <li>兼容既有的基于SQL的工具。</li> 
</ol>
<p>该理念的缺点如下：</p>
<ol> 
 <li>SQL屏蔽了HBase和RDBMS设计上的差别，抽象泄露的风险较高。关于抽象泄露参考<a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html">http://www.joelonsoftware.com/articles/LeakyAbstractions.html</a>。</li> 
 <li>为了SQL兼容，引入了JDBC层。由于RDBM和HBase的设计与模型本身差异较大，引入JDBC后，导致部分HBase的特性难以友好的支持。</li> 
 <li>大部分的应用不会直接使用JDBC，而是使用ORM，技术栈较深，导致抽象泄露问题更加严重。</li> 
</ol>
<p>SimpleHBase的设计理念为：贴近HBase的ORM设计，简化HBase之上的Java app开发。</p>
<p>该理念的优点如下：</p>
<ol> 
 <li>设计紧贴HBase的逻辑模型，提供一站式HBase ORM解决方案。</li> 
 <li>减少程序员的代码开发量。</li> 
 <li>用户友好的HBase特征支持。</li> 
</ol>
<p>该理念的缺点如下：</p>
<p>1. 不兼容SQL，有一定的学习成本。</p>
<p>SimpleHBase和Phoenix的技术栈如下所示。</p>
<p><img src="http://infoqstatic.com/resource/articles/hbase-orm-simplehbase-design/zh/resources/060400.png" width="400" alt="" _href="img://null" _p="true" /></p>
<h2>类型转换</h2>
<p>Phoenix支持如下类型，目前不支持自定义类型。每种类型的序列化(转化为bytes保存到HBase中)和反序列化为固定的方式。 </p>
<table border="1" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td valign="top" width="189"> <p>INTEGER</p> <p>UNSIGNED_INT</p> <p>BIGINT</p> <p>UNSIGNED_LONG</p> <p>TINYINT</p> <p>UNSIGNED_TINYINT</p> <p>SMALLINT</p> <p>UNSIGNED_SMALLINT</p> </td> 
   <td valign="top" width="189"> <p>FLOAT</p> <p>UNSIGNED_FLOAT</p> <p>DOUBLE</p> <p>UNSIGNED_DOUBLE</p> <p>DECIMAL</p> <p>BOOLEAN</p> <p>TIME</p> <p>DATE</p> </td> 
   <td valign="top" width="189"> <p>TIMESTAMP</p> <p>UNSIGNED_TIME</p> <p>UNSIGNED_DATE</p> <p>UNSIGNED_TIMESTAMP</p> <p>VARCHAR</p> <p>CHAR</p> <p>BINARY</p> <p>VARBINARY</p> </td> 
  </tr> 
 </tbody> 
</table>
<p></p>
<p>SimpleHBase支持如下类型。每种类型的序列化和反序列化方式，可以使用SimpleHBas提供的默认方式，也可以用户自定义。 </p>
<table border="1" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td valign="top" width="189"> <p>boolean</p> <p>byte</p> <p>short</p> <p>char</p> <p>int</p> <p>long</p> <p>float</p> <p>double</p> </td> 
   <td valign="top" width="189"> <p>String</p> <p>Date</p> <p>Enum</p> </td> 
   <td valign="top" width="189"> <p>用户自定义类型:</p> <p>通过TypeHandler支持自定义类型扩展。</p> </td> 
  </tr> 
 </tbody> 
</table>
<p></p>
<p>SimpleHBase的rowkey和类型映射如下：</p>
<p><img src="http://infoqstatic.com/resource/articles/hbase-orm-simplehbase-design/zh/resources/0604003.png" width="600" alt="" _href="img://null" _p="true" /></p>
<h2>RowKey支持</h2>
<p>Phoenix把rowkey内化为table的PRIMARY KEY处理。</p>
<p>如 </p>
<table border="1" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td valign="top" width="568"> <p>CREATE TABLE IF NOT EXISTS us_population ( state CHAR(2) NOT NULL, city VARCHAR NOT NULL, population BIGINT CONSTRAINT my_pk PRIMARY KEY (state, city));</p> </td> 
  </tr> 
 </tbody> 
</table>
<p></p>
<p>同时，Phoenix的Salted Tables技术可以解决region server的热点问题。</p>
<p>SimpleHBase认为rowkey的设计是HBase应用设计中最重要的一环。因此，对于RowKey单独建模，给用户提供较高的灵活性。实际上，对于HBase而言，任何可以转换为bytes的对象都可以做为rowkey使用。</p>
<h4>简单场景支持</h4>
<p>对于简单的put,scan,delete场景。</p>
<p>Phoenix提供的方案为：</p>
<p>Java app -&gt; ORM(可选) -&gt; SQL -&gt; phoenix -&gt; HBase</p>
<p>SimpleHBase提供的方案为：</p>
<p>Java app -&gt; SimpleHBase-&gt; HBase</p>
<p>无需SQL这一层，直接用类似如下代码即可实现。 </p>
<table border="1" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td valign="top" width="568"> <p>simpleHbaseClient.putObject(new PersonRowKey(1), person);</p> <p>Person result = simpleHbaseClient.findObject(new PersonRowKey(1),</p> <p>Person.class);</p> </td> 
  </tr> 
 </tbody> 
</table>
<p></p>
<h2>简单SQL支持</h2>
<p>Phoenix做为HBase上面的SQL封装，这块的功能比较丰富。SimpleHBase提供SQL-Like方式的查询。支持常见的简单查询场景。目前，SimpleHBase提供的运算符如下： </p>
<table border="1" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td valign="top" width="95"> <p>lessequal</p> <p>less</p> <p>greaterequal</p> <p>greater</p> <p>notequal</p> <p>equal</p> </td> 
   <td valign="top" width="95"> <p>notmatch</p> <p>match</p> </td> 
   <td valign="top" width="95"> <p>in</p> <p>notin</p> <p>between</p> <p>notbetween</p> </td> 
   <td valign="top" width="95"> <p>isnull</p> <p>Isnotnull</p> <p>Ismissing</p> <p>isnotmissing</p> </td> 
   <td valign="top" width="95"> <p>and</p> <p>or</p> </td> 
   <td valign="top" width="95"> <p>()</p> </td> 
  </tr> 
 </tbody> 
</table>
<p></p>
<h2>复杂SQL支持</h2>
<p>对于group by, join等较为复杂的SQL语法，Phoenix支持，SimpleHBase目前不支持。</p>
<h2>动态SQL支持</h2>
<p>动态查询可以避免应用代码中大量if-else之类的判断，拼接查询条件，提高代码质量。</p>
<p>Phoenix的方案：</p>
<p>引入其他ORM框架(如hibernate或mybatis)。</p>
<p>Simplehbase的方案：</p>
<p>类似mybatis，提供动态查询能力。</p>
<p>目前simplehbase提供的动态查询标签如下： </p>
<table border="1" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td valign="top" width="189"> <p>isNull</p> <p>isNotNull</p> <p>isEmpty</p> <p>isNotEmpty</p> <p>isPropertyAvailable</p> <p>isNotPropertyAvailable</p> </td> 
   <td valign="top" width="189"> <p>isEqual</p> <p>isNotEqual</p> <p>isGreaterThan</p> <p>isGreaterEqual</p> <p>isLessThan</p> <p>isLessEqual</p> </td> 
   <td valign="top" width="189"> <p>Dynamic</p> </td> 
  </tr> 
 </tbody> 
</table>
<p></p>
<h2>HBase时间戳和多版本支持</h2>
<p>Phoenix方案：</p>
<p>时间戳，由HBase管理，或在connection建立时指定一个时间戳，该connection上所有操作就是基于该时间戳。</p>
<p>不支持多版本，只能支持最新值。</p>
<p>Simplehbase方案：</p>
<p>时间戳可以由HBase管理，或者由应用自行指定。版本数，可以选择最新版本，或者多版本支持，由应用指定。 </p>
<table border="0" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td width="72"> <p>rowkey</p> </td> 
   <td width="89"> <p>timestamp</p> </td> 
   <td width="72"> <p>name</p> </td> 
   <td width="72"> <p>Age</p> </td> 
  </tr> 
  <tr> 
   <td width="72"> <p>key1</p> </td> 
   <td width="89"> <p>t4</p> </td> 
   <td width="72"> <p>d</p> </td> 
   <td width="72">&nbsp;</td> 
  </tr> 
  <tr> 
   <td width="72"> <p>key1</p> </td> 
   <td width="89"> <p>t3</p> </td> 
   <td width="72"> <p>c</p> </td> 
   <td width="72"> <p>3</p> </td> 
  </tr> 
  <tr> 
   <td width="72"> <p>key1</p> </td> 
   <td width="89"> <p>t2</p> </td> 
   <td width="72">&nbsp;</td> 
   <td width="72"> <p>2</p> </td> 
  </tr> 
  <tr> 
   <td width="72"> <p>key1</p> </td> 
   <td width="89"> <p>t1</p> </td> 
   <td width="72"> <p>a</p> </td> 
   <td width="72"> <p>1</p> </td> 
  </tr> 
 </tbody> 
</table>
<p></p>
<p>假设name和age映射为一个Person类型对象。SimpleHBase支持如下映射方式：</p>
<ul> 
 <li>一个rowkey对应的所有最新值映射为一个object。<br /> 例：该数据被映射为Person(name=d,age=3)。</li> 
 <li>一个rowkey对应的时间戳范围内(由用户指定)的最新值映射为一个object (Phoenix只提供一个时间戳，而不是时间戳范围) 。</li> 例：指定时间戳范围(左闭右开)为 [t1,t3)，该数据被映射为Person(name=a,age=2)。 
 <li>一个rowkey对应的所有值，以时间戳为维度，映射成一个object list。<br /> 例：指定maxVersion(控制最大版本数)为4,该数据被映射为一个person的列表，按照时间戳排序。 <pre>
Person(name=d)
Person(name=c,age=3)
Person(age=2)
Person(name=a,age=1)</pre> </li> 
 <li>一个rowkey对应的时间戳范围内的所有值，以时间戳为维度，映射成一个object list。 <br /> 例：指定时间戳范围为 [t1,t3)，maxVersion为4,该数据被映射为一个person的列表，按照时间戳排序。 <pre>
Person(age=2)
Person(name=a,age=1)</pre> </li> 
</ul>
<h2>其他</h2>
<p>SimpleHBase中包含了一些HBase特性的封装或增强。</p>
<p>如： </p>
<table border="1" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td valign="top" width="568"> <p>SimpleHBase支持批量put操作，以提升性能。</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="568"> <p>HTable的autoflush设置为false，同时，有一个线程定期做flush。既可以提高应用的吞吐能力，也可以有一定的flush保证。</p> </td> 
  </tr> 
 </tbody> 
</table>
<p></p>
<h2>小结</h2>
<p>目前，SimpleHBase已经在阿里的多个项目中得到应用。从设计理念看，SimpleHBase并不是Phoenix的一个重复轮子，而是有着自己清晰的目标。即贴近HBase的ORM设计，简化HBase之上的Java app开发。同时，又可以把HBase的一些核心概念暴露给用户，方便用户对HBase特性的使用。</p>
<h2>关于作者：</h2>
<p>张信之，支付宝高级工程师，目前负责支付宝消费数据组，西安交通大学计算机科学与技术专业硕士。兴趣广泛，近期工作聚焦在HBase ORM框架Simplehbase上。</p>
<hr />
<p>感谢<a href="http://www.infoq.com/cn/author/谢良">谢良</a>,<a href="http://www.infoq.com/cn/author/梁堰波">梁堰波</a>对本文的审校,<a href="http://www.infoq.com/cn/author/包研">包研</a>对本文的策划。</p>
<p>给InfoQ中文站投稿或者参与内容翻译工作，请邮件至<a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com</a>。也欢迎大家通过新浪微博（<a href="http://www.weibo.com/infoqchina">@InfoQ</a>）或者腾讯微博（<a href="http://t.qq.com/infoqchina">@InfoQ</a>）关注我们，并与我们的编辑和其他读者朋友交流。</p><br><br><br><br><br><br></body></html>