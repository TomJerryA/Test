<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Martin Fowler Presented Workflows of Refactoring</h3><p><a href="http://en.wikipedia.org/wiki/Martin_Fowler">Martin Fowler</a>, author of the book &quot;Refactoring: Improving the Design of Existing Code&quot;, has recently published an <a href="http://martinfowler.com/articles/workflowsOfRefactoring/">article</a> on his website exploring different workflows to effectively integrate refactoring into daily programming work.</p>
<p>He also talks about how to use the different types and suggests that &quot;to use refactoring in its most effective way, you need to combine all the refactoring workflows so that they flow seamlessly into your development work&quot;.</p>
<p>Fowler defines Refactoring as &quot;â€¦a disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behaviour&quot;.</p>
<p>Although Fowler states that refactoring has become a well-known technique, he suggests that most teams need to better understand the different workflows that could be used when refactoring, so they can apply the best one for each situation.</p>
<p>Fowler introduced the &quot;Two Hats&quot; metaphor to explain, or serve as a reminder that during programming tasks sometimes you're adding new features (adding function hat), other times you're improving the quality of your code (refactoring hat). He also states that &quot;during programming you may swap frequently between hats, perhaps every couple of minutes. But...You can only wear one hat at a time&quot;.</p>
<p>In the context of this metaphor, Fowler described the first workflow, probably the most widely used, the &quot;TDD Refactoring&quot;. It is built upon the cycle: from a green state, write a failing test; then, make it work and finally improve the quality of the code.</p>
<p>&quot;Litter-Pickup Refactoring&quot; is the next one. Fowler proposed its usage when a messy area in the code is found. The principle behind it is &quot;by cleaning up code as we work in it, we make things quicker for us the next time we need to work with it. Perhaps even make it quicker to change now&quot;.</p>
<p>Fowler then explained the details of &quot;Comprehension Refactoring&quot;. It is all about making the code easy to understand, and thus cheap to use and maintain. A reference to a <a href="http://pt.wikipedia.org/wiki/Ward_cunningham">Ward Cunningham</a> text was used to complement the idea:</p>
<p>Whenever you have to figure out what code is doing, you are building some understanding in your head. Once you've built it, you should move that understanding into the code so nobody has to build it from scratch in their head again.</p>
<p>He also describes three other workflows, which he says are as important as the first three:</p>
<ul> 
 <li>&quot;Preparatory Refactoring&quot; to apply when you start a new task;</li> 
 <li>&quot;Planned Refactoring&quot; to apply when you have larger areas on problematic code that need dedication attention;</li> 
 <li>&quot;Long-Term Refactoring&quot; to apply when you are about to replace a large module during several iterations.</li> 
</ul>
<p>Have you been refactoring too?</p><br><br><br><br><br><br></body></html>