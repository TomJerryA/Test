<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>iOS Auto Layout with Masonry</h3><p>Open Source project Masonry aims to make Auto Layout code more concise and readable.</p>
<p><a href="https://github.com/cloudkite/Masonry">Masonry</a>, “a light-weight layout framework which wraps Auto Layout with a nicer syntax”, enables a XIB- and Storyboard-free experience. Its creator, Jonas Budelmann, <a href="https://github.com/cloudkite/Masonry#whats-wrong-with-nslayoutconstraints">argues</a> that while Auto Layout is powerful it quickly becomes verbose and unreadable.</p>
<p>Masonry is a domain specific language (DSL) offering all the capabilities provided by Auto Layout with convenience methods for making and updating constraints, accessing attributes, setting priorities and debug support.</p>
<p>Sample code on GitHub is designed to show <a href="https://github.com/cloudkite/Masonry#prepare-to-meet-your-maker">typical usage and Masonry’s succinct syntax</a>:</p>
<pre><p>UIEdgeInsets padding = UIEdgeInsetsMake(10, 10, 10, 10);</p><p>[view1 mas_makeConstraints:^(MASConstraintMaker *make) {<br />&nbsp;&nbsp; make.edges.equalTo(superview).with.insets(padding);<br />}];</p>
</pre>
<p>Central to Auto Layout is the <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutConcepts/AutoLayoutConcepts.html#//apple_ref/doc/uid/TP40010853-CH14-SW2">constraint</a>: a mathematical representation of a relationship between UI elements. Constraints comprise size, relative positions managed by priorities and thresholds. They are <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutConcepts/AutoLayoutConcepts.html#//apple_ref/doc/uid/TP40010853-CH14-SW2">additive</a> making it possible for constraints to <a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/AutolayoutPG/ResolvingIssues/ResolvingIssues.html#//apple_ref/doc/uid/TP40010853-CH17-SW5">conflict</a> and insufficient constraints lead to <a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/AutolayoutPG/ResolvingIssues/ResolvingIssues.html#//apple_ref/doc/uid/TP40010853-CH17-SW7">ambiguity</a>. Both scenarios can throw exceptions.</p>
<p>Programmatic creation of constraints without using Masonry is possible by creating an <a href="https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstraint_Class/NSLayoutConstraint/NSLayoutConstraint.html">NSLayoutConstraint</a> with references to views and specifying attributes and relationships. Apple also provides the <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage/VisualFormatLanguage.html#//apple_ref/doc/uid/TP40010853-CH3-SW1">Visual Format Language</a>; another DSL for describing relationships in text.</p>
<p>Auto Layout is neither mandatory nor exclusive with “springs and struts” still a valid approach. “Springs and struts”, or <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/doc/uid/TP40006816-CH3-SW6">autoresizing masks</a>, determines how a view responds when its parent view changes bounds.</p>
<p>Apple provides <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TransitionGuide/index.html#//apple_ref/doc/uid/TP40013174">compelling reasons to adopt Auto Layout</a>:</p>
<ul> 
 <li>“Springs and struts” requires <a href="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/CreatingViews/CreatingViews.html#//apple_ref/doc/uid/TP40009503-CH5-SW35">code</a> to support multiple orientations, different screen sizes and dynamic content.</li> 
 <li><a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/transitionguide/AppearanceCustomization.html">Dynamic Type</a> in iOS 7 allows users to specify a prefered text size in apps.</li> 
 <li>Supporting both iOS 6 and iOS 7 and their different element metrics.</li> 
</ul>
<p>Auto Layout is not without fundamental issues. Apple provides <a href="https://developer.apple.com/library/ios/technotes/tn2154/_index.html#//apple_ref/doc/uid/DTS40013309">guidance</a> on how to use Auto Layout with the commonly used UIScrollView. Matt Neuburg provides a convincing argument on <a href="http://stackoverflow.com/questions/12943107/how-do-i-adjust-the-anchor-point-of-a-calayer-when-auto-layout-is-being-used/14105757#14105757">why “Auto Layout does not play at all well with view transforms”</a> suggesting greater use of layer transforms to compensate.</p>
<p>Any kind of Auto Layout code means you will <a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_5_0.html#//apple_ref/doc/uid/TP40012953-SW25">not gain from the Interface Builder&nbsp; enhancements made available in Xcode 5</a>. Specifically the ability to <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/ResolvingIssues/ResolvingIssues.html#//apple_ref/doc/uid/TP40010853-CH17-SW1">visually resolve Auto Layout issues</a> and the <a href="https://developer.apple.com/library/ios/documentation/userexperience/conceptual/transitionguide/SupportingEarlieriOS.html">preview mode in the assistant editor</a> that lets you view the runtime layout in different orientations, different iOS versions and different device sizes.</p><br><br><br><br><br><br></body></html>