<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Dart2js Outperforms Hand-Written JavaScript in DeltaBlue Benchmark</h3><p>Google released <a href="http://news.dartlang.org/2013/03/why-dart2js-produces-faster-javascript.html">a new version of the Dart2js compiler</a>, whose generated JavaScript code now outperforms hand-written JavaScript in the <a href="http://www.cs.washington.edu/research/constraints/deltablue/">DeltaBlue benchmark</a>, a commonly used benchmark for benchmarking object-oriented languages. While outperforming hand-written JavaScript was never a goal of the Dart2js project, the optimizations applied, such as method inlining and pre-computation, result in some Dart programs running faster than equivalent idiomatic JavaScript code. While the numbers are slowly converging for the Richards benchmark, the other benchmark that the <a href="http://www.dartlang.org/performance/">Dart site publishes</a>, the Dart-generated JavaScript performance for the Richards benchmark is still 26% slower than hand-written JavaScript.</p> 
<p>The following graph shows how performance of Dart on the DeltaBlue benchmark has progressed over time:<br /> <img src="http://www.infoq.com/resource/news/2013/04/dart2js-outperforms-js/en/resources/dartperformance.png;jsessionid=856C5714E3671AF39724BB64ECF86159" alt="" _href="img://dartperformance.png" _p="true" /><br /> The purple line in this graph represents JavaScript generated by Dart2js running on Google's v8 JavaScript engine. The yellow line represents equivalent idiomatic JavaScript code running on v8. The blue line at the top represents the Dart code running natively on the Dart <a href="http://en.wikipedia.org/wiki/Virtual_machine">VM</a>. The higher the number, the better the performance.</p> 
<p><a href="http://dartlang.org">Dart</a>, Google's new language for developing large web applications, can be run in various contexts:</p> 
<ol> 
 <li><em>In a browser-embedded Dart VM.</em> Since the Dart project has not yet released a 1.0 version, there is no browser available today that embeds the Dart VM other than the <a href="http://www.dartlang.org/dartium/">&quot;Dartium&quot; build of Chromium</a> that comes with the Dart SDK.</li> 
 <li><em>On the server, running in the Dart VM.</em> The <a href="http://api.dartlang.org/docs/releases/latest/dart_io.html">dart:io</a> library, only available for server-side applications, offers APIs for accessing the file system, process management and building servers (e.g. HTTP servers or websocket servers). This allows Dart to be used for very similar use cases as <a href="http://nodejs.org">Node.js</a> and enables front-to-back application development in Dart.</li> 
 <li><em>Embedded in applications.</em> The Dart VM can be embedded in arbitrary (C/C++) applications, to support scripting the application with Dart.</li> 
 <li><em>Compiled to JavaScript in any modern browser.</em> No production browser supports Dart today, nor is it clear whether browsers other than Chrome will embed the Dart VM. To still be able to run Dart code in these browsers, the Dart2js compiler compiles Dart programs to JavaScript. Therefore, the performance of this generated code is vital to Dart's chances of success.</li> 
</ol> 
<p>The new Dart2js compiler, itself implemented in Dart, uses a technique called <em>global <a href="http://en.wikipedia.org/wiki/Type_inference">type inferencing</a></em> to gather more information about the types that variables and arguments are going to have. As a result it can generate more compact and faster JavaScript code. Interestingly, Dart2js does not use the optional type annotations that Dart supports. The reason for this is that these types are not enforced at run-time, unless Dart is run in <em>checked mode</em>, which does report errors when the type constraints are invalidated.&nbsp;Therefore, it is perfectly valid, though confusing, to write a statement like <tt>String name = 10;</tt>. To ensure correctness of the generated code, the compiler ignores type annotations completely.</p> 
<p>Many of the new optimizations are possible because Dart is a less liberal language than JavaScript. For instance, in JavaScript it is possible to dynamically add methods to objects, to replace methods, to dynamically download code, and to use <tt>eval</tt> and the <tt>with</tt> statement, greatly reducing the amount of optimization a JavaScript VM like v8 can perform. Dart does not support many of these capabilities. Therefore, when the Dart2js compiler runs, it will know exactly what code will be running. It can eliminate code that is not used from the output, a process called dead-code elimination or tree shaking. It can also inline methods in some cases, because unlike JavaScript, Dart does not support monkey patching objects.</p> 
<p>While any benchmark should be taken with a grain of salt, it is interesting to see how the Dart teams keeps improving their performance numbers. While Dart is still under heavy development, it <a href="http://www.infoq.com/news/2013/04/blossom-dart-switch;jsessionid=856C5714E3671AF39724BB64ECF86159">starts to see some early adoption</a>. The performance and size of Dart2js generated code is important to everybody interested in deploying Dart code on the web today.</p> 
<p id="lastElm"></p><br><br><br><br><br><br></body></html>