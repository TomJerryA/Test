<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>OpenAccess ORM Renamed As Telerik Data Access with Improved UI and Colored Visual Designer</h3><p>OpenAccess ORM, API for design and run time interaction with relational back-ends has been recently renamed as <a href="http://www.telerik.com/data-access">Telerik Data Access</a>. The upcoming Q1 2014 release of data access will have an upgraded user interface and the wizards will appear with new logo. Moreover, the visual designer will be visible in green color. It will also include Telerik.DataAccess.Core, Telerik.DataAccess.Fluent and Telerik.DataAccess.Fluent.Sample NuGet packages.</p>
<p>The core package will be useful for those projects which refer to data layer without defining new persistent entities and fluent package is oriented for fluent mapping data layer. However, you should note that OpenAccess packages are obsolete and are replaced by the above mentiuoned NuGet packages.</p>
<p>The <a href="https://www.nuget.org/packages/Telerik.DataAccess.Core/">Telerik.DataAccess.Core</a> NuGet package includes runtime assemblies which consumes persistent objects without mapping definition and can be installed from the package manager console. On the other hand, the <a href="https://www.nuget.org/packages/Telerik.DataAccess.Fluent/">Telerik.DataAccess.Fluent</a> NuGet package can be used for defining data access model using the code first fluent mapping. It includes the assembly references made by the Telerik Data Access Enhancer tool during the build process, required by Telerik Data Access runtime.</p>
<p>The <a href="https://www.nuget.org/packages/Telerik.DataAccess.Fluent.Sample/">Telerik.DataAccess.Fluent.Sample</a> package provides a sample solution which examines the usage of the Telerik DataAccess fluent mapping support and can be installed using the command - Install-Package Telerik.DataAccess.Fluent.Sample from within the package manager.</p>
<p>According to official sources, there will be no changes in the API or assembly names as a result of the changeover. Hence, developers will be still&nbsp; able to make use of OpenAccessContext and Telerik.OpenAccess assemblies.</p>
<p>InfoQQ contacted Ivailo Ivanov, Team Lead, Telerik Data Access to know more about the latest development and his reply has been summarized below</p>
<blockquote>
  Our product was initially designed as an ORM product, offering an alternative of the popular NHibernate or Entity Framework. However, throughout the years, it has both matured and turned into something more - a Data Access framework where the object-relational mapping is only a part of our value proposition. 
 <br /> 
 <br /> It now offers a low-level ADO API, ability to operate with artificial types defined during runtime, web services generation, bulk operations and many other features that are not typical for a standard ORM product. Therefore, we have decided that Telerik Data Access better describes what the product has become and where it is going.
 <br /> 
 <br /> While re-branding we had one thing in mind - the changes in our marketing shouldn't cause changes in the client code. We have avoided introducing breaking changes - the APIs and assembly names are the same. The only thing that has changed is the naming of our NuGet packages, but even for them the standard upgrade procedure should resolve the differences automatically. 
</blockquote>
<p>&nbsp;</p><br><br><br><br><br><br></body></html>