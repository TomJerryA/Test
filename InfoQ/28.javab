<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Custom Assertions in Java Tests</h3><p>Writing assertions for tests seems simple: all we need do is compare results with expectations. This is usually done using the assertion methods – e.g. assertTrue() or assertEquals() – provided by testing frameworks. However, in the case of more complicated test scenarios, it can be rather awkward to verify the outcome of a test using such basic assertions.</p>
<p>The main issue is that by using them we obscure our tests with low-level details. This is undesirable. In my view we should rather strive for our tests to speak in the language of business.</p>
<p>In this article I will show how we could use so-called &quot;matcher libraries&quot; and implement our own custom assertions to make our tests more readable and maintainable.</p>
<p>For the purposes of demonstration we will consider the following task: let us imagine that we need to develop a class for the reporting module of our application that, when given two dates (&quot;begin&quot; and &quot;end&quot;), provides all one-hour intervals between those dates. The intervals are then used to fetch the required data from the database and present it to the end user in the form of beautiful charts.</p>
<h2>Standard Approach</h2>
<p>Let us begin with a &quot;standard&quot; way of writing assertions. We're using <a href="http://junit.org">JUnit</a> for this example, though we could equally use, say, <a href="http://testng.org/">TestNG</a>. We will use assertion methods like assertTrue(), assertNotNull() or assertSame().</p>
<p>Below, one of several tests belonging to the HourRangeTest class is presented. It is quite simple. First it asks the getRanges() method to return all one-hour ranges between two dates on the same day. Then it verifies whether the returned ranges are exactly as they should be.</p>
<div id="lowerFullwidthVCR"></div>
<pre>
private final static SimpleDateFormat SDF
        = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);
@Test
public void shouldReturnHourlyRanges() throws ParseException {
       // given
       Date dateFrom = SDF.parse(&quot;2012-07-23 12:00&quot;);
       Date dateTo = SDF.parse(&quot;2012-07-23 15:00&quot;);
       // when
       final List&lt;Range&gt; ranges = HourlyRange.getRanges(dateFrom, dateTo);
       // then
       assertEquals(3, ranges.size());
       assertEquals(SDF.parse(&quot;2012-07-23 12:00&quot;).getTime(), ranges.get(0).getStart());
       assertEquals(SDF.parse(&quot;2012-07-23 13:00&quot;).getTime(), ranges.get(0).getEnd());
       assertEquals(SDF.parse(&quot;2012-07-23 13:00&quot;).getTime(), ranges.get(1).getStart());
       assertEquals(SDF.parse(&quot;2012-07-23 14:00&quot;).getTime(), ranges.get(1).getEnd());
       assertEquals(SDF.parse(&quot;2012-07-23 14:00&quot;).getTime(), ranges.get(2).getStart());
       assertEquals(SDF.parse(&quot;2012-07-23 15:00&quot;).getTime(), ranges.get(2).getEnd());
}</pre>
<p>This is definitely a valid test; however, it has a serious drawback. There are a lot of repeated fragments in the //then part. Obviously they were created using copy &amp; paste, which – so experience has taught me – inevitably leads to errors. Moreover, if we were to write more tests like this (and we surely should write more tests to verify the HourlyRange class!), the same asserting statements would be repeated over and over again in each of them.</p>
<p>The readability of the current test is weakened by the excessive number of assertions, but also by the complicated nature of each assertion. There is a lot of low-level noise, which does not help to grasp the core scenario of the tests. As we all know, code is read much more often than it is written (I think this also holds for test code), so readability is something we should definitely seek to improve.</p>
<p>Before we rewrite the test, I also want to highlight another weakness, this time related to the error message we get when something goes wrong. For example, if one of the ranges returned by the getRanges() method were to have a different time than expected, all we would learn would be the following:</p>
<pre>
org.junit.ComparisonFailure:
Expected :1343044800000
Actual :1343041200000</pre>
<p>This message is not very clear and could definitely be improved.</p>
<h2>Private Methods</h2>
<p>So what, exactly, could we do about this? Well, the most obvious thing would be to extract the assertion into a private method:</p>
<pre>
private void assertThatRangeExists(List&lt;Range&gt; ranges, int rangeNb,
                                   String start, String stop) throws ParseException {
        assertEquals(ranges.get(rangeNb).getStart(), SDF.parse(start).getTime());
        assertEquals(ranges.get(rangeNb).getEnd(), SDF.parse(stop).getTime());
}
@Test
public void shouldReturnHourlyRanges() throws ParseException {
       // given
       Date dateFrom = SDF.parse(&quot;2012-07-23 12:00&quot;);
       Date dateTo = SDF.parse(&quot;2012-07-23 15:00&quot;);
       // when
       final List&lt;Range&gt; ranges = HourlyRange.getRanges(dateFrom, dateTo);
       // then
       assertEquals(ranges.size(), 3);
       assertThatRangeExists(ranges, 0, &quot;2012-07-23 12:00&quot;, &quot;2012-07-23 13:00&quot;);
       assertThatRangeExists(ranges, 1, &quot;2012-07-23 13:00&quot;, &quot;2012-07-23 14:00&quot;);
       assertThatRangeExists(ranges, 2, &quot;2012-07-23 14:00&quot;, &quot;2012-07-23 15:00&quot;);
}</pre>
<p>Is it better now? I would say so. The amount of repetitive code has been reduced and the readability has been improved. This is definitely good.</p>
<p>Another advantage of this approach is that we are now in a much better position to improve the error message that gets printed in the event of failed verification. The asserting code is extracted to one method, so we could enhance our assertions with more readable error messages with ease.</p>
<p>The reuse of such assertion methods could be facilitated by putting them into some base class, which our test classes would need to extend.</p>
<p>Still, I think we might do even better than this: using private methods has some drawbacks, which become more evident as the test code grows and these private methods then come to be used within many test methods:</p>
<ol> 
 <li>it is hard to come up with names of assertion methods that clearly state what they verify,</li> 
 <li>as the requirements grow, such methods tend to receive additional parameters required for more sophisticated checks (already the assertThatRangeExists() takes 4 parameters, which is too much!),</li> 
 <li>sometimes it happens that in order to be reused across many tests, some complicating logic gets introduced into such methods (usually in the form of boolean flags which make them verify - or ignore - some special cases).</li> 
</ol>
<p>All of this means that in the long run we will encounter some issues with the readability and maintainability of tests written with the help of private assertion methods. Let us look for another solution which would be free of these drawbacks.</p>
<h2>Matcher Libraries</h2>
<p>Before we move on, let us learn about some new tools. As mentioned before, the assertions provided by JUnit or TestNG are not flexible enough. In the Java world there are at least two open-source libraries which fulfil our requirements: <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> (a fork of the FEST Fluent Assertions project) and <a href="http://hamcrest.org/">Hamcrest</a>. I prefer the first one, but it is a matter of taste. Both look very powerful, and both allow one to achieve similar effects. The main reason I prefer AssertJ over Hamcrest is that AssertJ's API - based on fluent interfaces - is perfectly supported by IDEs.</p>
<p>Integration of AssertJ with JUnit or TestNG is straightforward. All you have to do is add the required imports, stop using the default assertions provided by your testing framework, and start using those provided by AssertJ.</p>
<p>AssertJ provides many useful assertions out-of-the-box. They all share the same &quot;pattern&quot;: they begin with the assertThat() method, which is a static method of the Assertions class. This method takes the tested object as an argument, and &quot;sets the stage&quot; for further verification. Afterwards come the real assertion methods, each of them verifying various properties of the tested object. Let us take a look at a few examples:</p>
<pre>
assertThat(myDouble).isLessThanOrEqualTo(2.0d);

assertThat(myListOfStrings).contains(&quot;a&quot;);

assertThat(&quot;some text&quot;)
       .isNotEmpty()
       .startsWith(&quot;some&quot;)
       .hasLength(9);</pre>
<p>As can be seen here, AssertJ provides a much richer set of assertions than JUnit or TestNG. What is more, you can chain them together – as the last assertThat(&quot;some text&quot;) example shows. One very convenient thing is that your IDE will figure out the possible methods based on the type of object being tested, and will tip you off, suggesting only those which fit. So, for example, in the case of a double variable, after you have typed assertThat(myDouble). and have pressed CTRL + SPACE (or whatever shortcut your IDE provides), you will be presented with a list of methods like isEqualTo(expectedDouble), isNegative() or isGreaterThan(otherDouble) - all making sense for double value verification. Which is actually pretty cool.</p>
<h3><img _p="true" _href="img://4Fig1.png" alt="" src="http://www.infoq.com/resource/articles/custom-assertions/en/resources/4Fig1.png" /></h3>
<h2>Custom Assertions</h2>
<p>Having a more powerful set of assertions provided by AssertJ or Hamcrest is nice, but this is not really what we wanted in the case of our HourRange class. Another feature of matcher libraries is that they allow you to write your own assertions. These custom assertions will behave exactly as the default assertions of AssertJ do – i.e. you will be able to chain them together. And this is exactly what we will do next to improve our test.</p>
<p>We will see a sample implementation of a custom assertion in a minute, but for now let's take a look at the final effect we are going to achieve. This time we will use the assertThat() method of (our own) RangeAssert class.</p>
<pre>
@Test
public void shouldReturnHourlyRanges() throws ParseException {
       // given
       Date dateFrom = SDF.parse(&quot;2012-07-23 12:00&quot;);
       Date dateTo = SDF.parse(&quot;2012-07-23 15:00&quot;);
       // when
       List&lt;Range&gt; ranges = HourlyRange.getRanges(dateFrom, dateTo);
       // then
       RangeAssert.assertThat(ranges)
            .hasSize(3)
            .isSortedAscending()
            .hasRange(&quot;2012-07-23 12:00&quot;, &quot;2012-07-23 13:00&quot;)
            .hasRange(&quot;2012-07-23 13:00&quot;, &quot;2012-07-23 14:00&quot;)
            .hasRange(&quot;2012-07-23 14:00&quot;, &quot;2012-07-23 15:00&quot;);
}</pre>
<p>Some of the advantages of custom assertions can be seen even in such a tiny example as the one above. The first thing to notice about this test is that the //then part has definitely become smaller. It is also quite readable now.</p>
<p>Other advantages will manifest themselves when applied to a larger codebase. Were we to continue using our custom assertion, we would notice that:</p>
<ol> 
 <li>It is very easy to reuse them. We are not forced to use all assertions, but we can select only those which are important for a specific test case.</li> 
 <li>The <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> belongs to us, which means that for specific test scenarios we could change it according to our liking (e.g. pass Date objects instead of Strings) with ease. What is more important is that such a change would not affect any other tests.</li> 
 <li>High readability - there is no problem with finding the right name for a verification method, because the assertion consists of many small assertions, each of them focused on just one very small aspect of the verification.</li> 
</ol>
<p>Compared to private assertion methods, the only disadvantage of the custom assertion is that you have to put more work in to create them. Let us have a look at the code of our custom assertion to judge whether it really is such a difficult task.</p>
<p>To create a custom assertion we should extend the AbstractAssert class of AssertJ or one of its many subclasses. As shown below, our RangeAssert extends the ListAssert class of AssertJ. This makes sense, because we want our custom assertion to verify the content of a list of ranges (List&lt;Range&gt;).</p>
<p>Each custom assertion written with AssertJ contains code which is responsible for the creation of an assertion object and the injection of the tested object, so further methods can operate on it. As the listing shows, both the constructor and the static assertThat() method take List&lt;Range&gt; as a parameter.</p>
<pre>
public class RangeAssert extends ListAssert&lt;Range&gt; {

  protected RangeAssert(List&lt;Range&gt; ranges) {
    super(ranges);
  }

  public static RangeAssert assertThat(List&lt;Range&gt; ranges) {
    return new RangeAssert(ranges);
  }</pre>
<p>Now let us see the rest of the RangeAssert class. The hasRange() and isSortedAscending() methods (shown in the next listing) are typical examples of custom assertion methods. They share the following properties:</p>
<ol> 
 <li>Both start with a call to the isNotNull() which verifies whether the tested object is not null. This guarantees that the verification won't fail with the NullPointerException message (this step is not necessary but recommended).</li> 
 <li>They return &quot;this&quot; (which is an object of the custom assertion class – the RangeAssert class, in our case). This allows for methods to be chained together.</li> 
 <li>The verification is performed using assertions provided by the AssertJ Assertions class (part of the AssertJ framework).</li> 
 <li>Both methods use an &quot;actual&quot; object (provided by the ListAssert superclass), which keeps a list of Ranges (List&lt;Range&gt;) being verified.</li> 
</ol>
<pre>
     private final static SimpleDateFormat SDF
             = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);

     public RangeAssert isSortedAscending() {
            isNotNull();
            long start = 0;
            for (int i = 0; i &lt; actual.size(); i++) {
                     Assertions.assertThat(start)
                            .isLessThan(actual.get(i).getStart());
                     start = actual.get(i).getStart();
            }
            return this;
     }

     public RangeAssert hasRange(String from, String to) throws ParseException {
            isNotNull();

            Long dateFrom = SDF.parse(from).getTime();
            Long dateTo = SDF.parse(to).getTime();

            boolean found = false;
            for (Range range : actual) {
                   if (range.getStart() == dateFrom &amp;&amp; range.getEnd() == dateTo) {
                           found = true;
                   }
            }
            Assertions
                   .assertThat(found)
                   .isTrue();
            return this;

     }
}</pre>
<p>And what about the error message? AssertJ allows us to add it quite easily. In simple cases, like a comparison of values, it is often sufficient to use the as() method, like this:</p>
<pre>
     Assertions
            .assertThat(actual.size())
            .as(&quot;number of ranges&quot;)
            .isEqualTo(expectedSize);</pre>
<p>As you can see, as() is just another method provided by the AssertJ framework. Now, when the test fails, it prints the following message so that we know immediately what is wrong:</p>
<pre>
    org.junit.ComparisonFailure: [number of ranges]
    Expected :4
    Actual :3</pre>
<p>Sometimes we need more than just the name of the tested object to understand what has happened. Let us take the hasRange() method. It would be really nice if we could print all the ranges in the event of failure. This can be done using the overridingErrorMessage() method, like this:</p>
<pre>
public RangeAssert hasRange(String from, String to) throws ParseException {
       ...
       String errMsg = String.format(&quot;ranges\n%s\ndo not contain %s-%s&quot;,
                                    actual ,from, to);

       ...
       Assertions.assertThat(found)
              .overridingErrorMessage(errMsg)
              .isTrue();
       ...
}</pre>
<p>Now in the event of failure we would get a very detailed error message. Its content would depend on the toString() method of the Range class. For example, it could look like this:</p>
<pre>
HourlyRange{Mon Jul 23 12:00:00 CEST 2012 to Mon Jul 23 13:00:00 CEST 2012},
HourlyRange{Mon Jul 23 13:00:00 CEST 2012 to Mon Jul 23 14:00:00 CEST 2012},
HourlyRange{Mon Jul 23 14:00:00 CEST 2012 to Mon Jul 23 15:00:00 CEST 2012}]
do not contain 2012-07-23 16:00-2012-07-23 14:00</pre>
<h2>Conclusions</h2>
<p>In this article we have discussed a number of ways of writing assertions. We started with the &quot;traditional&quot; way, based on the assertions provided by testing frameworks. This is good enough in many cases, but as we saw, it sometimes lacks the flexibility needed to express the intent of the test. Next we improved things a little by introducing private assertion methods, but this also proved not to be an ideal solution. In our final attempt we introduced custom assertions written with AssertJ, and achieved much more readable and maintainable test code.</p>
<p>If I were to offer you some advice regarding assertions, I would suggest the following: you will greatly improve your test code if you stop using assertions provided by testing frameworks (e.g. JUnit or TestNG) and switch to those provided by matcher libraries (e.g. AssertJ or Hamcrest). This will allow you to use a vast range of very readable assertions and eliminate the need to use complicated statements (e.g. looping over collections) in the //then parts of your tests.</p>
<p>Even if the cost of writing custom assertions is very small, there is no need to introduce them just because you can. Use them when the readability and/or maintainability of your test code are endangered. From my experience, I would encourage you to introduce custom assertions in the following cases:</p>
<ul> 
 <li>when you find it hard to express the intent of the test with the assertions provided by matcher libraries,</li> 
 <li>in place of creating private assertion methods.</li> 
</ul>
<p>My experience tells me that with unit tests, you will rarely need custom assertions. However, I'm pretty sure you will find them irreplaceable in the case of integration and end-to-end (functional) tests. They allow our tests to speak in the language of the domain (rather than that of the implementation), and they also encapsulate the technical details, making our tests much simpler to update.</p>
<h2>About the Author</h2>
<p><strong><img vspace="3" hspace="3" align="left" _p="true" _href="img://1tomek_kaczanowski_250.png" alt="" src="http://www.infoq.com/resource/articles/custom-assertions/en/resources/1tomek_kaczanowski_250.png" />Tomek Kaczanowski</strong> works as Java developer for CodeWise (Krakow, Poland). He is focused on code quality, testing and automation. Test infected TDD enthusiast, open-source proponent, agile worshipper. Strong inclination towards sharing his knowledge. <a href="http://practicalunittesting.com">Book author</a>, <a href="http://kaczanowscy.pl/tomek">blogger</a> and conference speaker. Twitter: @tkaczanowski</p><br><br><br><br><br><br></body></html>