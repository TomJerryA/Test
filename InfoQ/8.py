<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>ASP.NET Web APIのODataでQueryable APIにバリデーションを適用する</h3><p><a target="_blank" href="http://www.infoq.com/news/2013/02/queryable-api;jsessionid=41805BB538D1C6C8E60701DB577B336B"><em>原文(投稿日：2013/02/27)へのリンク</em></a></p> 
<div class="clearer-space">
 &nbsp;
</div> 
<div id="newsContent"> 
 <p><a target="_blank" href="http://www.nuget.org/packages/microsoft.aspnet.webapi.odata">ASP.NETのWeb APIのOData</a>では、下に示すように、<a target="_blank" href="http://blogs.msdn.com/b/webdev/archive/2013/02/06/protect-your-queryable-api-with-validation-feature-in-asp-net-web-api-odata.aspx">Queryable API</a>の助けを借りて特定のアクション用の<a target="_blank" href="http://www.odata.org/">OData</a>クエリシンタックスを使用することができる。<br /> <br /> <code>[Queryable]&nbsp;&nbsp;&nbsp; <br /> public IQueryable&lt;WorkItem&gt; Get(int projectId) </code><br /> <br /> しかし、もしあなたの組織外にクエリ可能なアクションを公開しするなら、クエリバリデーションの助けを借りて、保護層を追加することで、サービスを保護すべきである。 Microsoftの Program Managerである Hongmei Ge氏は、最近 Queryable APIで、バリデーションを適用できる、様々なシナリオを検討した。<br /> <br /> 氏によって指摘された最初のシナリオは、下に示すように AllowedQueryOptionsと呼ばれるプロパティを使って、$top と $skipを持つクエリだけを許すのである。<br /> <br /> <code>[Queryable(AllowedQueryOptions = AllowedQueryOptions.Skip | AllowedQueryOptions.Top)]<br /> public IQueryable&lt;WorkItem&gt; Get(int projectId) </code></p> 
 <p>MaxTop と MaxSkipプロパティを使って、$top と $skipの値を100と200に制限できる。<br /> <br /> <code>[Queryable(MaxTop = 100)]<br /> public IQueryable&lt;WorkItem&gt; Get(int projectId) </code><br /> <br /> <code>[Queryable(MaxSkip = 200)]<br /> public IQueryable&lt;WorkItem&gt; Get(int projectId) </code><br /> <br /> AllowedOrderbyPropertiesを使って、結果をIdプロパティによって並び替えられる。なぜなら任意のプロパティによる並び替えは、遅い可能性がある。<br /> <br /> <code>[Queryable(AllowedOrderByProperties = &quot;Id&quot;)]<br /> public IQueryable&lt;WorkItem&gt; Get(int projectId) </code><br /> <br /> もしあなたのクライアントが$filter内で Equal比較を使っているなら、AllowedLogicalOperatorsを使ってそれを検証すべきである。<br /> <br /> <code>[Queryable(AllowedLogicalOperators = AllowedLogicalOperators.Equal)]<br /> public IQueryable&lt;WorkItem&gt; Get(int projectId) </code><br /> <br /> AllowedArithmeticOperators の値をNoneにセットすれば、$filter で算術演算をオフすることができる。<br /> <br /> <code>[Queryable(AllowedArithmeticOperators = AllowedArithmeticOperators.None)]<br /> public IQueryable&lt;WorkItem&gt; Get(int projectId) </code><br /> <br /> AllowedFunctionsプロパティを使って、$filterにおける関数の使い方を制限できる。<br /> <br /> <code>[Queryable(AllowedFunctions = AllowedFunctions.StartsWith)]<br /> public IQueryable&lt;WorkItem&gt; Get(int projectId) </code><br /> <br /> 上記のコードは、StartsWith関数だけが$filterで使えることを意味している。<br /> <br /> 氏はまた、$skip, $top, $orderby, $filterに対するデフォルトのバリデーションロジックやクエリをバリデートするためにODataQueryOptions の使い方をカスタマイズするような、高度なシナリオでクエリバリデーションを説明している。</p> 
 <p id="lastElm">&nbsp;</p> 
</div> 
<p id="lastElm"></p><br><br><br><br><br><br></body></html>