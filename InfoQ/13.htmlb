<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>关于Cassandra的错误观点</h3><p>正如<a href="http://cassandra.apache.org/">Apache Cassandr</a>a的名称是来自于著名的物洛伊女巫一样，在它身上确实存在着各种误解。和大多数误解一样，至少在一开始时它们确实是有那么一点道理的，但随着Cassandra不断地深化与改善，这些误解的内容已经不复存在了。在本文中，我将针对五个常见的疑惑作出解释，澄清人们的困惑。</p>
<h2>误解：Cassandra就是一个嵌套的map</h2>
<p>随着使用Cassandra的应用程序变得越来越复杂，以下观点正在逐渐变得清晰起来：与“任何东西都是一个数组缓冲”或者“任何东西都是一个字符串”这种设计方式相比，schema与数据类型会使大型应用的开发与维护更加简单，</p>
<p>现如今，理解Cassandra的数据模型的最好方式是将其想像为<a href="http://www.datastax.com/docs/1.2/ddl/index">表与行</a>的组合，并且与关系型数据相似的是，Cassandra的列也是强类型的，并且可以进行索引。</p>
<p>你也许还听到过其它这些说法：</p>
<ul> 
 <li>“Cassandra是一种列数据库。”<a href="http://en.wikipedia.org/wiki/Column-oriented_DBMS">列数据库</a>会将某个列的全部数据一起保存在磁盘上，这种方式对于数据仓库的检索方式是比较适合的，但对于那些需要对特定的行进行快速访问的应用程序来说就不太适合了。</li> 
 <li>“Cassandra是一种<a href="http://db-engines.com/en/ranking/wide+column+store">宽行数据库</a>。”这种说法有一定的道理，因为Cassandra的存储引擎是由Bigtable所启发而设计的，而后者可以说是宽行数据库的祖先了。但宽行数据库的数据模型与存储引擎结合得太过紧密，虽然实现起来比较容易，但针对它进行开发就增加了困难，而且它还使<a href="https://issues.apache.org/jira/browse/CASSANDRA-5417">许多优化方式</a>变得不可行了。</li> 
</ul>
<p>我们之所以在开始的部分选择避开“表与行”这种方法，原因之一是因为Cassandra的表与你所熟的关系型数据库的表的确存在着某些微妙的差别。首先，主键的首个元素是分区键，在同一个分区中的所有行都会存储在同一台服务器上，而分区是<a href="http://en.wikipedia.org/wiki/Database_index#Clustered">分布在整个集群</a>中的。</p>
<p>其次，Cassandra不支持关联查询与子查询，这是因为在分布式系统中跨越硬件进行关联查询的性能很差。Cassandra的做法是鼓励你采用去正规化（denormalization）的方式，从一个单独的表中获取你所需的数据，同时提供<a href="http://www.datastax.com/dev/blog/cql3_collections">集合</a>等工具以简化操作。</p>
<div id="lowerFullwidthVCR"></div>
<p>举例来说，考虑一下以下代码所表示的users表：</p>
<pre>
CREATE TABLE users (
  user_id uuid PRIMARY KEY,
  name text,
  state text,
  birth_year int
);</pre>
<p>目前多数主流服务都会考虑到一个用户可以拥有多个email地址的情况。在关系型数据库中，我们必需建立一个多对一的关系，随后使用关联查询将地址与用户关联起来，如以下所示：</p>
<pre>
CREATE TABLE users_addresses (
  user_id uuid REFERENCES users,
  email text
);

SELECT *
FROM users NATURAL JOIN users_addresses;</pre>
<p>而在Cassandra中，我们会以去正规化的方式将所有email地址直接加入用户表中，使用一个set集合就可以完美地实现这一点：</p>
<pre>
ALTER TABLE users ADD email_addresses set&lt;text&gt;;</pre>
<p>随后我们可以以如下方式为用户添加多个地址：</p>
<pre>
UPDATE users
SET email_addresses = {‘jbe@gmail.com’, ‘jbe@datastax.com’}
WHERE user_id = ‘73844cd1-c16e-11e2-8bbd-7cd1c3f676e3’</pre>
<p>关于Cassandra数据模型的更多内容，包括自届满数据（self-expiring data）以及分布式计数器，请参考<a href="http://www.datastax.com/docs/1.2/ddl/index">在线文档</a>，</p>
<h2>误解：Cassandra的读取速度较慢</h2>
<p>Cassandra采用的<a href="http://2012.nosql-matters.org/cgn/wp-content/uploads/2012/06/Sylvain_Lebresne-Cassandra_Storage_Engine.pdf">日志结构存储引擎</a>意味着它不会在硬盘中寻找更新，也不会造成固态硬盘的写入放大，而同时它的读取速度也很快。</p>
<p>以下图示是关于随机访问读取、随机访问及顺序扫描，以及混合读写情况下的吞吐数据，它们来自于多伦多大学的NoSQL性能指标分析结果：</p>
<p><img width="600" _p="true" _href="img://null" src="http://infoqstatic.com/resource/articles/cassandra-mythology/zh/resources/1118020.jpg" alt="" /></p>
<p><img width="600" _p="true" _href="img://null" src="http://infoqstatic.com/resource/articles/cassandra-mythology/zh/resources/1118021.jpg" alt="" /></p>
<p><img width="600" _p="true" _href="img://null" src="http://infoqstatic.com/resource/articles/cassandra-mythology/zh/resources/1118022.jpg" alt="" /></p>
<p>来自Endpoint公司的性能指标检测对Cassandra、HBase与MongoDB进行了比较，也<a href="http://www.datastax.com/resources/whitepapers/benchmarking-top-nosql-databases">证实了以上结论的正确性</a>。</p>
<p>Cassandra是怎样实现的呢？从一个较高的层次来看，Cassandra的存储引擎看起来与Bigtable很像，它们都使用了一些相同的术语。更新内容会添加到某个commitlog中，随后收集到某个“memtable”里，该表会最终将数据写入磁盘并进行索引，类似于一个“sstable”：</p>
<p><img width="600" _p="true" _href="img://null" src="http://infoqstatic.com/resource/articles/cassandra-mythology/zh/resources/1118023.jpg" alt="" /></p>
<p>原生的日志结构存储系统确实会倾向于在读取时稍慢，而由于同样的原因，它们在写入时会比较快：因为新的数据不会替换每一行中的原始数据，而是在后台<a href="http://www.datastax.com/docs/1.2/operations/compaction_compression">压缩</a>后再进行合并。因此在最坏的情况下，为了获取某个“碎片化”的行中的每一列的值，你将不得不检查多个sstable。</p>
<p><img width="600" _p="true" _href="img://null" src="http://infoqstatic.com/resource/articles/cassandra-mythology/zh/resources/1118024.jpg" alt="" /></p>
<p>为了达到更好的读取性能，Cassandra对此基本设计方式进行了一些改善：</p>
<ul> 
 <li>压缩策略是以插件形式提供的。例如LeveledCompactionStrategy<a href="http://www.datastax.com/dev/blog/leveled-compaction-in-apache-cassandra">会通过更为激进的方式组合重叠的sstable，以实现对读取的优化</a>。</li> 
 <li>Cassandra以时间倒序对sstable进行检查，如果你要求Cassandra执行SELECT x, y FROM foo WHERE key = 42语句，当Cassandra找到x和y对应的某个最新写入的数据时，<a href="https://issues.apache.org/jira/browse/CASSANDRA-2498">它就不会再去检查时间更早的sstable</a>。同样的原则也可以应用在对某个范围内的扫描上，虽然<a href="https://issues.apache.org/jira/browse/CASSANDRA-5514">稍有些麻烦</a>，但并非不可能实现。</li> 
 <li>在必须要从多个sstable中进行读取的情况下，我们<a href="https://issues.apache.org/jira/browse/CASSANDRA-2503">将会在读取时将去碎片化的结果重新写入</a>，这样之后的读取操作就只需要访问一个单独的表了。</li> 
 <li>当某个分区被访问时，它的<a href="https://issues.apache.org/jira/browse/CASSANDRA-2319">索引就会被缓存起来</a>，因此只需（每个sstable）一次查找就可以访问分区中的所有行了。</li> 
 <li>存储引擎的元数据中<a href="http://www.datastax.com/dev/blog/performance-improvements-in-cassandra-1-2">会从堆中被剔除出去</a>，这样就避免了垃圾回收带来的影响问题。</li> 
</ul>
<h2>误解：Cassandra的运行很麻烦</h2>
<p>比起在一台独立的机器上运行数据库，在一个分布式系统上运行会在以下三个方面遇到更多的困难：</p>
<ol> 
 <li>初始化时的部署与配置</li> 
 <li>日常维护工作，例如升级、添加新节点、或者替换故障节点</li> 
 <li>故障检测</li> 
</ol>
<p>Cassandra是一个完整的分布式系统：因为Cassandra集群中的每一台机器都具有相同的角色，不存在专门的元数据服务器以调整内存中的各种信息，也不存在专门的配置服务器以进行分发，同样也不存在主服务器或者是故障转移服务器。这种特性使运行Cassandra从各方面而言都要比其它的一些替代产品来得更简单。这也意味着可以很方便地搭建一个单节点的集群以进行开发与测试任务，而它的功能表现与在一个包含大量节点的完整集群中的表现完全一样。</p>
<p>从某种意义上说，初始化时的部署工作其实是一项最不重要的任务，因为如果其它方面的表现相同，那么即使是初始化时的安装稍为复杂一些，随着系统生命周期的推移，这一点麻烦也不是很大的问题，并且自动化的安装工具能够为你隐藏大多数头疼的细节问题。但是！如果你因为对某个系统的了解太小而选择放弃手动安装，那么当你需要对某个问题进行故障诊断时就会遇到麻烦，因为解决问题需要你完全掌握系统中的各个部分是怎样在一起动作的。</p>
<p>因此我的建议是，如果你打算利用某些工具来进行安装，例如<a href="http://www.datastax.com/2012/01/getting-started-with-apache-cassandra-on-windows-the-easy-way">Windows MSI安装文件</a>、Oracle的<a href="http://www.datastax.com/dev/blog/inside-opscenter-3-0-enterprise-provisioning">Ops Center Provisioning</a>、或是<a href="http://www.datastax.com/docs/1.2/install/install_ami">自配置的AMI</a>，请确保你已经深刻理解了安装过程中的细节。你可以研究一下这个<a href="http://www.screenr.com/5G6">搭建Cassandra集群的两分钟示例</a>。</p>
<p>Cassandra的日常维护工作很简单。任一时刻都可以在某台节点上进行<a href="http://www.datastax.com/docs/1.2/install/upgrading">升级工作</a>，而当某个节点停机时，其它节点会保留本应应用在该节点上的升级内容，并<a href="http://www.datastax.com/dev/blog/modern-hinted-handoff">在该节点恢复后将升级内容重新发送</a>给它。此外，添加新节点的操作可以<a href="http://www.datastax.com/dev/blog/virtual-nodes-in-cassandra-1-2">在整个集群中并行进行</a>，在操作完成后也无需重新进行平衡。</p>
<p>即使是对那些时间较长的、计划之外的停机状态进行处理也非常方便。Cassandra可在<a href="http://www.datastax.com/docs/1.2/operations/node_repair">运行时进行修复</a>，如同其它数据库中的rsync一样，它只需传输丢失的数据即可，这就将网络数据传输降至最低。如果你没有特别留意的话，也许根本不会意识到<a href="https://twitter.com/ethan_rowe/status/210824620155207681">它的发生</a>。</p>
<p>Cassandra在对<a href="http://www.datastax.com/dev/blog/deploying-cassandra-across-multiple-data-centers">多数据中心的支持</a>方面在整个业界都处于领先地位，即使是<a href="https://twitter.com/ericflo/status/222235311990771712">整个AWS区域挂掉</a>，甚至是<a href="https://twitter.com/NathanMilford/status/267334475640352768">整个数据中心在飓风中被摧毁</a>这些极端情况下，也可以顺利地进行恢复。</p>
<p>最后，<a href="http://www.datastax.com/what-we-offer/products-services/datastax-opscenter">DataStax OpsCenter</a>能够让你随时看到集群的各种重要系统指标，这样就可以方便地将历史活动数据与造成服务性能下降的事故相关联起来，以达到简化故障检测的目的。<a href="http://planetcassandra.org/Download/DataStaxCommunityEdition">Cassandra的DataStax社区版本</a>自带了一个“轻量级”版本的OpsCenter，可以在生产环境中免费使用。而<a href="http://www.datastax.com/what-we-offer/products-services/datastax-enterprise">DataStax企业版</a>则包括了备份与恢复的调度，可配置的系统警告以及其它各种特性。</p>
<h2>误解：在Cassandra上进行开发非常困难</h2>
<p>早先的Cassandra Thrift API的目标是尽量减少用户开发一个跨平台的应用所付出的精力，而它也达到了这一目标，但现在业界已公认这套API是<a href="http://wiki.apache.org/cassandra/ThriftExamples">难以使用</a>的。随后Cassandra推出了一套自己的SQL语言：CQL。它提供了一套更易于使用的接口，学习曲线更为平滑，同时还推出了<a href="http://www.datastax.com/dev/blog/binary-protocol">一套异步协议</a>，因此取代了Thrift API的使用。</p>
<p>CQL的早期使用者在两年前就可以使用0.8版本了，而今年1月份发布的1.2版本终于使CQL成为一个可用于生产环境的产品了。新版本包含了多种<a href="http://wiki.apache.org/cassandra/ClientOptions">驱动程序</a>，<a href="http://www.datastax.com/wp-content/uploads/2012/08/C2012-CQL-EricEvans.pdf">性能也比Thrift更好</a>。DataStax也为<a href="http://www.datastax.com/dev/blog/the-native-cql-java-driver-goes-ga">最流行的各种CQL驱动程序</a>提供了官方支持，从此就可以不必再依赖来自社区的Thrift驱动程序的支持了，有时这种支持真的很差。</p>
<p>除了<a href="http://www.datastax.com/docs/1.2/cql_cli/using_cql">在线文档中所介绍的CQL基础知识外</a>，Patrick McFadin的演讲“Next Top Data Model”（<a href="http://www.youtube.com/watch?v=px6U2n74q3g">第1部分</a>、<a href="http://www.youtube.com/watch?v=qphhxujn5Es">第2部分</a>）也是一个很好的CQL介绍。</p>
<h2>误解：Cassandra依然是一种无人问津的边缘产品</h2>
<p>从开源的角度来说，Apache Cassandra已有5年的历史，并且已经发布了多个版本，最新的版本2.0还是在今年七月刚刚发布的。而从企业的角度来说，DataStax提供了<a href="http://www.datastax.com/what-we-offer/products-services/datastax-enterprise">DataStax企业版</a>，其中包含了一个经过认证的Cassandra版本，该版本经过了特定的测试、性能指标衡量、并且得到认可在生产环境中进行使用。</p>
<p>各个商业机构都看到了Cassandra为他们的组织所带来的价值，财富榜上的百强内有20个机构都依赖于Cassandra为他们的关键应用程序提供服务，这些机构来自几乎每个行业，包括金融、医疗、零售、娱乐、在线广告与市场。</p>
<p>将应用迁移至Cassandra平台上的最常见原因之一，是现有技术的伸缩性已经不足以满足现代化大数据应用程序的需求了。<a href="http://www.zdnet.com/the-biggest-cloud-app-of-all-netflix-7000014298/">全球最大的云应用</a>Netflix<a href="http://www.datastax.com/resources/casestudies/netflix">已经将其95%的数据从Oracle迁移至Cassandra</a>，而Barracuda Networks也<a href="http://www.planetcassandra.org/blog/post/barracuda-networks-and-cassandra---battling-the-zombies">用Cassandra取代了MySQL</a>，因为MySQL已经不能够应对巨量的垃圾请求了。而Ooyala<a href="http://www.datastax.com/resources/casestudies/ooyala">每天都要进行20亿次数据处理</a>，它所使用的Cassandra已有超过两个PB的数据量了。</p>
<p>对于那些管理和维护成本过高的陈旧的关系型数据库，Cassandra也在逐步取而代之。Constant Contact的首个基于Cassandra的项目<a href="http://www.datastax.com/2011/08/constant-contact">开发了三个月，成本为25万美元</a>，而他们之前基于关系型数据库的方案则开发了九个月，花费了250万美元。如今，他们已经搭建了<a href="http://www.datastax.com/resources/casestudies/constantcontact">6个集群</a>，共有超过100TB的数据存放于Cassandra中。</p>
<p>在DataStax的<a href="http://www.datastax.com/resources/casestudies">案例学习</a>页面，以及Planet Cassandra的<a href="http://planetcassandra.org/FiveMinuteInterviews">用户访问</a>页面上还可以找到许多其它案例。</p>
<h2>这一条并非误解：关于在旧金山举办的2013 Cassandra Summit大会</h2>
<p>我们刚刚结束了本次会议，这可以说是学习更多Cassandra知识的最好机会了。<a href="http://www.datastax.com/company/news-and-events/events/cassandrasummit2013">本次会议有超过1100名与会者和65场演讲</a>，主讲者分别来自Accenture、Barracuda Networks、Blue Mountain Capital、Comcast、Constant Contact、eBay、Fusion-io、Intuit、Netflix、Sony、Splunk、Spotify、Walmart和其它一些公司。<a href="http://www.slideshare.net/planetcassandra">演讲的幻灯片已上传</a>，而演讲视频也即将开放下载，具体时间请密切关注<a href="http://twitter.com/planetcassandra">Planet Cassandra</a>的公告。</p>
<h2>关于作者</h2>
<p><img _p="true" _href="img://null" src="http://infoqstatic.com/resource/articles/cassandra-mythology/zh/resources/1118025.jpg" style="float: left; margin-right: 10px" alt="" /><b>Jonathan Ellis</b>是DataStax公司的CTO兼联合创始人。在创办DataStax之前，他在受雇于Rackspace公司时在工作中大量使用了Apache Cassandra。而在Rackspace之前，他基于Reed-Solomon编码技术，为内容备份提供商Mozy编写了一个可容纳多个PB、伸缩性良好的存储系统。</p>
<div style="clear:both"></div>
<p><strong>查看英文原文：</strong><a href="http://www.infoq.com/articles/cassandra-mythology">Cassandra Mythology</a></p><br><br><br><br><br><br></body></html>