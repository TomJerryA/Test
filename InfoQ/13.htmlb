<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Node.js V0.12新特性之给子进程的同步API</h3><p>尽管发明Node.js的初衷主要是为了<a href="https://en.wikipedia.org/wiki/Nodejs">编写Web服务器</a>，但开发人员又发现了其他适用（和不适用！）Node的用途。令人觉得惊喜的是，这些用途中有一个是编写shell脚本。并且那确实有意义：Node的跨平台支持已经相当好了，既然前端和后端都用JavaScript写了，如果构建系统也用JavaScript写不是更好吗，对吧？</p>
<h2>异步对shell脚本的坏处</h2>
<p>在这一用途上值得称道的库是<a href="http://gruntjs.org/">Grunt</a>，它是构建在<a href="http://www.shelljs.org/">ShellJS</a>之上的。然而ShellJS有一块硬骨头要啃：Node迫使它用异步I/O。尽管对于Web服务器来说异步I/O很棒，因为它必须随时做出响应，但对于需要逐步执行的shell脚本来说，异步I/O意义不大。</p>
<p>所以，ShellJS的作者们发现了一个“有趣的”解决办法，让它可以运行一个shell命令，然后等着命令完成。大致上是下面这样的代码：</p>
<pre>
var child_process = require('child_process');
var fs = require('fs');

function execSync(command) {
// 在子shell中运行命令
child_process.exec(command + ' 2&gt;&amp;1 1&gt;output &amp;&amp; echo done! &gt; done');

// 阻塞事件循环，知道命令执行完
while (!fs.existsSync('done')) {
// 什么都不做
}

// 读取输出
var output = fs.readFileSync('output');

// 删除临时文件。
fs.unlinkSync('output');
fs.unlinkSync('done');

return output;
}
</pre>
<p>换句话说，在shell执行你的命令时，ShellJS依然在运行，并持续不断地轮询着文件系统，检查是否能找到表明命令已经完成的那个文件。有点儿像<a href="http://www.youtube.com/watch?v=4vUBsTJYK28">驴子</a>。</p>
<p>这种效率低下又丑陋不堪的解决办法让<a href="https://github.com/joyent/node/graphs/contributors">Node核心团队</a>受刺激了，实现了一个真正的解决方案 – Node v0.12最终应该会支持同步运行子进程。实际上这个特性已经在路线图上放了<a href="https://github.com/joyent/node/issues/1167">很长时间了</a>– 我记得是在2011年的<a href="http://2013.jsconf.eu/">JSConf.eu</a>上(!) ，跟现在已经退休的Node维护者<a href="https://github.com/felixge">Felix Geisendoerfer</a>坐在一起，勾勒出了一个实现execSync的办法。在过了两年多以后，这一特性现在终于<a href="https://github.com/joyent/node/compare/joyent:d58c206...joyent:e8df267">出现在了master分支上</a>。</p>
<p>恭喜，ShellJS的人们挑了一个很好的刺儿! :)</p>
<h2>同步对shell脚本的好处</h2>
<p>我们刚加上的API spawnSync跟它的异步小伙伴类似，它提供的底层API让你可以完全掌控子进程的设置。它还会返回所有我们能够收集的信息：退出码、终止信号、可能的启动错误，以及这个进程的全部输出。当然，在流中使用spawnSync没有任何意义-它是同步的，所以事件处理器不能在进程退出前运行-所以进程的所有输出会被缓冲到一个单例字符串或缓冲对象中。</p>
<p>并且就像众所周知的exec（运行shell命令）和execFile(用于运行一个可执行文件)方法一样，我们为常见的情况添加了execSync和execFileSync，它们比spawnSync更易用。如果你用了这些API，Node会假定你关心的只是进程写到stdout中的数据。如果进程或shell返回了非零的退出码，node会认为出现错误了，exec(Sync)会抛出。</p>
<p>比如获取项目git历史的代码就像下面这样简单：</p>
<pre>
var history = child_process.execSync('git log', { encoding: 'utf8' });
process.stdout.write(history);
</pre>
<p>现在你可能在想“怎么要用这么长时间？”从表面上看，启动一个子进程并读取它的输出看起来简直是小菜一碟。也确实是这样-如果你只关心非常常见的情况。但是，我们不想做出来的解决方案只是一半。</p>
<p>当需要同时发送输入并读取一或多个输出流时，有两个选择：用线程-或者用事件循环。比如<a href="https://github.com/python-git/python/blob/master/Lib/sub%20%0Aprocess.py">Python的实现</a>，我们发现他们或者用事件循环（在Unix系的平台上）或者用线程（在Windows上）。并且它的实现可真不是一碟小菜。</p>
<p>2011年我们就意识到Node已经有一个非常棒的事件循环库了，即<a href="https://github.com/joyent/libuv">libuv</a>。理论上已经具备了实现这一特性的所有条件。然而总是有或大或小的问题，让它并不能真正可靠地工作。</p>
<p>比如说，当子进程退出时，kernel会给node发送一个SIGCHLD信号通知它，但当有多个事件循环存在时，有很长一段时间libuv都不能正确处理信号。还有，删除事件循环并且不留下堆栈跟踪的能力也是最近才加上的。之前Node根本不管，它只是在某点退出，然后让OS打扫战场。如果我们需要一个临时的事件循环，并且在不需要它后仍然继续运行，这种策略就不太合适了。</p>
<p>慢慢的，随着时间的推移，所有这些问题都被解决了。所以如果你现在再设法看看过去那些缓冲区管理、参数解析、超时处理等诸如此类的东西，你会发现这个特性的核心只是一个事件循环，带子进程、计时器，还有一堆附着在它上面的管道。</p>
<p>如果你不关心它都是如何运作的，只需要看看<a href="https://github.com/joyent/node/blob/e8df2676748e944388896dfd767e0%20%0A1906ae2e4eb/doc/api/child_process.markdown#child_processspawnsynccommand%20%0A-args-options">文档</a>，让node为控制子进程提供的丰富选项震你一下吧。现在谁愿意去把ShellJS修好？:)</p>
<h2>作者简介</h2>
<p>本文最初由<a href="http://strongloop.com/strongblog/author/bert-belder/">Bert Belder</a>发表在<a href="http://strongloop.com/">StrongLoop</a>上。Bert Belder从2010年就开始做Node.js了，并且他还是libuv的主要编写者之一，Node.js就是在这个库上构建的。他除了是StrongLoop和Node核心的技术领导者，他正在做的特性还会让Node处于创新的最前沿，甚至是在1.0版出来之后。<a href="http://strongloop.com/">StrongLoop</a>降低了在Node中<a href="http://strongloop.com/mobile-application-development/loopback/">开发APIs</a>的难度，还添加了监测、集群化以及私有注册的支持等DevOps能力。</p>
<p><strong>查看英文原文：</strong><a href="http://strongloop.com/strongblog/whats-new-in-node-js-v0-12-execsync-a-synchronous-api-for-child-processes/">What’s New in Node.js v0.12 – execSync: a Synchronous API for Child Processes</a> 2014年3月12日</p><br><br><br><br><br><br></body></html>