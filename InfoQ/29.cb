<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Modelo contratual tradicional: Maior risco de fracasso?</h3><h2>Introdu&ccedil;&atilde;o</h2>
<p>Em 2007, o &quot;Departamento para Comunidades e Governo Local do Reino Unido&quot; (DCLG - Department for Communities and Local Government) assinou um contrato com a entidade &quot;Sistemas de Ar e Defesa Europeus&quot; (EADS - European Air and Defence Systems, tamb&eacute;m conhecido como Cassidian) para a entrega de um sistema de TI que pudesse sustentar o projeto FiReControl, o qual tinha como objetivo melhorar o servi&ccedil;o de resgates e o combate a inc&ecirc;ndios, com a substitui&ccedil;&atilde;o de 46 salas de controle locais por uma rede de nove centros de controles regionais constru&iacute;dos para tal prop&oacute;sito. A expectativa era concluir o projeto em outubro de 2009 com custos originais estimados em &pound;120 milh&otilde;es. Dois anos depois, a expectativa de dura&ccedil;&atilde;o do projeto havia dobrado e os custos totais do projeto aumentaram em mais de 500%, para algo como &pound;635 milh&otilde;es. O contrato foi finalmente cancelado em 2010, ap&oacute;s o desperd&iacute;cio de pelo menos &pound;469 milh&otilde;es resultantes da incapacidade do projeto de entregar.<sup>1</sup></p>
<p>Essa &eacute; uma hist&oacute;ria decepcionante de um projeto de TI de grande porte fugindo do controle. Infelizmente n&atilde;o se trata de um incidente isolado, pois muitos projetos est&atilde;o atrasados ou falham em entregar; um em cada seis supera em 200% os custos planejados e em quase 70% os prazos estimados.<sup>2</sup> Parece que nenhuma organiza&ccedil;&atilde;o est&aacute; imune a esses riscos. Havia uma cren&ccedil;a comum de que projetos de TI fora de controle estariam restritos ao setor p&uacute;blico, mas estudos recentes demonstram que o setor privado n&atilde;o se sai nada melhor em compara&ccedil;&atilde;o. As organiza&ccedil;&otilde;es do setor privado s&atilde;o simplesmente menos obrigadas a divulgar publicamente seus fracassos.</p>
<p>Ent&atilde;o, por que os projetos de TI s&atilde;o t&atilde;o arriscados e como podemos mitigar os riscos de insucesso?</p>
<p>Existe um abismo no mundo do desenvolvimento de software, de um lado os advogados buscam especificar as rela&ccedil;&otilde;es entre as partes contratantes com o m&aacute;ximo poss&iacute;vel de certeza, do outro, tanto o neg&oacute;cio quando os praticantes do desenvolvimento de software est&atilde;o operando em um ambiente cada vez mais complexo, din&acirc;mico e interconectado.</p>
<p>As fun&ccedil;&otilde;es jur&iacute;dicas e gerenciais, em geral, n&atilde;o adaptaram suas pr&aacute;ticas ou valores para passar a levar em conta os desafios enfrentados tanto pelo neg&oacute;cio e quanto pelos praticantes do desenvolvimento de software. De fato, o modelo de contrato para o desenvolvimento de software (o &quot;Modelo Contratual&quot;) e as pr&aacute;ticas de gest&atilde;o a esse relacionados quase n&atilde;o mudaram nos &uacute;ltimos 30 anos. Muito do pensamento no qual se baseia o Modelo Contratual remonta aos princ&iacute;pios desenvolvidos durante a Revolu&ccedil;&atilde;o Industrial por figuras como <a href="http://pt.wikipedia.org/wiki/Henry_Ford">Henry Ford</a> e <a href="http://pt.wikipedia.org/wiki/Frederick_Taylor">Frederick Taylor</a>.</p>
<p>Nossa vis&atilde;o &eacute; a de que o Modelo Contratual agrava os efeitos de uma gest&atilde;o inadequada, e que tal gest&atilde;o &eacute; em geral fundamentada em um pensamento falho que tamb&eacute;m &eacute; base para o Modelo Contratual. Descobrimos que mesmo se um projeto de TI utiliza pessoal e recursos internos, as organiza&ccedil;&otilde;es tendem a aplicar rela&ccedil;&otilde;es quase contratuais entre os departamentos internos para aquisi&ccedil;&atilde;o dos servi&ccedil;os de TI. Encontramos os mesmos princ&iacute;pios do Modelo Contratual em evid&ecirc;ncia nesse cen&aacute;rio tamb&eacute;m.</p>
<div id="lowerFullwidthVCR"></div>
<p>N&atilde;o acreditamos em melhoras significativas no sucesso dos projetos de TI enquanto n&atilde;o mudarmos as bases de sustenta&ccedil;&atilde;o do Modelo Contratual e as respectivas pr&aacute;ticas de gest&atilde;o. Para os prop&oacute;sitos desse artigo, utilizaremos o termo &quot;Projeto de TI&quot; para representar qualquer iniciativa de mudan&ccedil;a envolvendo o desenvolvimento de software.</p>
<h2>Os fundamentos do Modelo Contratual</h2>
<p>Acreditamos que qualquer contrato para o desenvolvimento de software fundamentado no Modelo Contratual possui tr&ecirc;s qualidades distintas, todas seriamente equivocadas. Utilizaremos os termos &quot;fornecedor&quot; e &quot;cliente&quot; para explicar as din&acirc;micas em um relacionamento externo. Contudo, conforme mencionado acima, muitos casos similares parecem se adequar mesmo que os projetos sejam desenvolvidos internamente.</p>
<p>As tr&ecirc;s caracter&iacute;sticas distintas de qualquer contrato para desenvolvimento de software fundamentado no Modelo Contratual s&atilde;o:</p>
<ul> 
 <li><strong>Requisitos com foco em entreg&aacute;veis.</strong> O fornecedor deve fazer entregas que possuam todos os requisitos, conforme especificados pelo cliente no contrato. Utilizamos o termo &quot;entreg&aacute;veis&quot; para nos referir a produto (ex. c&oacute;digo, funcionalidades, fun&ccedil;&otilde;es, atributos), documenta&ccedil;&atilde;o e/ou servi&ccedil;os;</li> 
 <li><strong>Mecanismos de controle de mudan&ccedil;as.</strong> O Modelo Contratual exige que qualquer mudan&ccedil;a no escopo ou qualquer outro elemento do contrato deva ser regulado por um mecanismo de controle de mudan&ccedil;as. De forma geral, isso significa que para iniciar uma mudan&ccedil;a, o cliente deve submeter uma solicita&ccedil;&atilde;o de mudan&ccedil;a para o fornecedor, descrevendo o conte&uacute;do da modifica&ccedil;&atilde;o desejada. O fornecedor analisa o impacto da solicita&ccedil;&atilde;o de mudan&ccedil;a para o contrato como um todo, incluindo, em particular, os requisitos com foco em entreg&aacute;veis, o pre&ccedil;o e a data final para a entrega do projeto de TI. Com base nisso, o fornecedor prop&otilde;e uma modifica&ccedil;&atilde;o no contrato. Ap&oacute;s o acordo entre as parte para a modifica&ccedil;&atilde;o contratual, uma modifica&ccedil;&atilde;o formal &eacute; realizada ao contrato para incorporar a solicita&ccedil;&atilde;o de mudan&ccedil;a;</li> 
 <li><strong>Desenvolvimento sequencial</strong> - O software &eacute; desenvolvido sequencialmente, em outras palavras, adota-se o modelo Cascata. O desenvolvimento &eacute; visto como um fluxo incessante em uma dire&ccedil;&atilde;o - como uma cascata - pelas fases de concep&ccedil;&atilde;o, inicia&ccedil;&atilde;o, an&aacute;lise, design, constru&ccedil;&atilde;o e testes. O fornecedor deve completar cada fase antes de iniciar a pr&oacute;xima, sendo a sa&iacute;da de cada fase a entrada para a pr&oacute;xima.</li> 
</ul>
<p>Vale ressaltar que n&atilde;o fazemos qualquer men&ccedil;&atilde;o ao tipo de modelo de pagamento no Modelo Contratual. Se as tr&ecirc;s caracter&iacute;sticas do Modelo Contratual aparecerem em um contrato, o mesmo &eacute; considerado inadequado, independente dos mecanismos de mudan&ccedil;a a serem adotados.<sup>3</sup> Faz pouca ou nenhuma diferen&ccedil;a se o pre&ccedil;o &eacute; fixo, se &eacute; um contrato de custo alvo ou mesmo se &eacute; por tempo e materiais necess&aacute;rios, ainda que se apliquem b&ocirc;nus ou penalidades.</p>
<p>Para qualquer pessoal que n&atilde;o esteja diretamente envolvida com a implementa&ccedil;&atilde;o de um projeto de TI, o Modelo Contratual pode parecer sensato, pois cria a sensa&ccedil;&atilde;o de certeza e previsibilidade em rela&ccedil;&atilde;o ao projeto de TI, e ainda oferece um estrutura clara e compreens&iacute;vel para as v&aacute;rias atividade envolvidas no projeto. Ali&aacute;s, ele reflete os modelos de contrata&ccedil;&atilde;o atualmente em uso.</p>
<p>Contudo, a combina&ccedil;&atilde;o dos tr&ecirc;s elementos em uma rela&ccedil;&atilde;o contratual entre um cliente e um fornecedor se mostra como uma causa para os insucessos de muitos projetos de TI que poderiam de outra forma ter sido melhor sucedidos. Assim, argumentamos que aqueles projetos de TI que obt&eacute;m sucesso o fazem a despeito do Modelo Contratual e das pr&aacute;ticas gerencias relacionadas, n&atilde;o devido a elas.</p>
<p>Nesse artigo exploraremos algumas formas pelas quais o Modelo Contratual aumenta o risco de insucesso de qualquer projeto de TI.</p>
<h2>Risco de insucesso potencializado</h2>
<p>Qualquer projeto de TI est&aacute; sujeito a riscos que podem ser categorizados em tr&ecirc;s tipos principais:</p>
<ul> 
 <li><strong>Risco de entrega.</strong> Esse &eacute; o risco de que o projeto de TI n&atilde;o seja entregue no prazo, no custo e com a qualidade necess&aacute;ria;</li> 
 <li><strong>Risco de valor de neg&oacute;cio.</strong> Esse &eacute; o risco de que o projeto de TI n&atilde;o entregue o valor de neg&oacute;cio esperado;</li> 
 <li><strong>Risco do modelo de neg&oacute;cio existente.</strong> Esse &eacute; o risco de que o projeto de TI prejudique a organiza&ccedil;&atilde;o existente.</li> 
</ul>
<p>O Modelo Contratual s&oacute; trata a primeira categoria de riscos e, pior, potencializa a exposi&ccedil;&atilde;o do cliente a todas as tr&ecirc;s categorias de risco.</p>
<h2>Risco de entrega</h2>
<p>O projeto FiReControl &eacute; um exemplo cl&aacute;ssico do risco da entrega de um projeto de TI sair dos trilhos. O Escrit&oacute;rio Nacional de Auditoria do Reino Unido observou que durante os primeiros dois anos do contrato, pouco progresso foi feito na dire&ccedil;&atilde;o de entregar o sistema de TI.<sup>4</sup> Realmente, o DCLG n&atilde;o parece ter recebido nenhum software em funcionamento at&eacute; o cancelamento do contrato. N&atilde;o se sabe a raz&atilde;o disso, mas podemos supor.</p>
<p>Os princ&iacute;pios obsoletos do Modelo Contratual assumem que os requisitos podem ser previstos de antem&atilde;o. Como resultado, tal modelo falha em adequadamente responder a condi&ccedil;&otilde;es em constante mudan&ccedil;as, o que for&ccedil;a o cliente a aceitar custos desproporcionais ao retorno de um projeto de TI.</p>
<p><strong>A fal&aacute;cia de prever os requisitos de antem&atilde;o</strong></p>
<p>A suposi&ccedil;&atilde;o de que os requisitos podem ser levantados de antem&atilde;o &eacute; fundamentada em outras duas premissas. Primeiro, que os requisitos s&atilde;o plenamente entendidos tanto pelo cliente quando pelo fornecedor e, segundo, que o software possa ser conclu&iacute;do antes que qualquer mudan&ccedil;a significativa ocorra. Em outras palavras, para funcionar no ponto &oacute;timo, o Modelo de Contrato requer que ambas as partes possuam a informa&ccedil;&otilde;es perfeitas, o que &eacute; uma impossibilidade pr&aacute;tica.</p>
<p>A pr&oacute;pria din&acirc;mica de um projeto de TI conduz a mudan&ccedil;as. &Eacute; natural que conforme o cliente aprenda mais sobre a &uacute;ltima tecnologia, suas vantagens e desvantagens em rela&ccedil;&atilde;o &agrave; atual, o cliente reveja seu pensamento sobre qual a melhor forma de tirar vantagem da tecnologia.</p>
<blockquote> 
 <p>&quot;... os requisitos do sistema n&atilde;o podem ser declarados completamente de antem&atilde;o, nem mesmo por princ&iacute;pio, pois o usu&aacute;rio n&atilde;o sabe ainda - nem mesmo em princ&iacute;pio. Para afirmar o contr&aacute;rio &eacute; ignorar o fato de que o pr&oacute;prio processo de desenvolvimento muda a perspectiva do usu&aacute;rio do que &eacute; poss&iacute;vel, traz novas ideias sobre o ambiente da aplica&ccedil;&atilde;o e frequentemente muda o pr&oacute;prio ambiente.&quot; <sup>5</sup></p> 
</blockquote>
<p>Pela mesma raz&atilde;o, &eacute; natural que conforme o fornecedor aprenda mais sobre o processo de neg&oacute;cio do cliente, ganhe um maior entendimento dos problemas que o cliente est&aacute; tentando resolver e as oportunidades que est&aacute; tentando aproveitar.</p>
<p>Em qualquer evento, n&atilde;o &eacute; poss&iacute;vel antecipar como interagir&atilde;o muitos elementos diferentes de design de software antes que o software seja implementado e isso frequentemente leva a surpresas.</p>
<p>A premissa de que o software pode ser finalizado antes que mudan&ccedil;as significativas ocorram tamb&eacute;m &eacute; falsa, pois for&ccedil;as externas est&atilde;o em jogo. A tecnologia evolui cada vez mais rapidamente, o mercado ou contexto no qual o conceito do software foi concebido continua a mudar. Assim, as oportunidades ou riscos a serem tratados pelo software tamb&eacute;m mudam. Por exemplo, a emerg&ecirc;ncia de tecnologias disruptivas com o Facebook, o Twitter ou a tela touch do IPad podem ter um enorme impacto em qualquer plano existente para o desenvolvimento e distribui&ccedil;&atilde;o de software. O ambiente regulat&oacute;rio tamb&eacute;m pode mudar.</p>
<p>Estudos recentes, liderados por <a href="http://www.linkedin.com/pub/al-goerner/5/368/263">Al Goerner</a>, na Universidade de Missouri, Kansas City, demonstra que o valor inerente no escopo se esgota exponencialmente com o passar do tempo. Essa taxa de decaimento se parece muito com a meia-vida de um &aacute;tomo radioativo inst&aacute;vel. A &quot;meia-vida&quot; &eacute; a medida do tempo que leva para a subst&acirc;ncia perder metade de sua massa.</p>
<p>De acordo com estudos da Universidade de Missouri, a meia-vida do valor dos requisitos est&aacute; decaindo rapidamente. Em 1980 era em torno de dez a doze anos, j&aacute; em 2000 havia ca&iacute;do para algo em torno de dois a tr&ecirc;s, hoje est&aacute; por volta dos seis meses.<sup>6</sup></p>
<p>Em outra palavras, metade dos requisitos se tornar&aacute; obsoleta ao final do sexto m&ecirc;s, metade do restante, ou seja, um quarto se tornar&aacute; obsoleta ap&oacute;s um ano e assim por diante. Assim, ap&oacute;s 18 meses, de acordo com os estudos, apenas 1/8, ou 12.5%, dos requisitos ainda possuir&atilde;o algum valor inerente.</p>
<p>Em seu desejo por certeza, o Modelo Contratual na verdade cria o risco de que quando a entrega finalmente aconte&ccedil;a, o que for entregue n&atilde;o atenda mais &agrave;s necessidades do cliente.</p>
<p><strong>O fracasso do Modelo Contratual para responder adequadamente a mudan&ccedil;as</strong></p>
<p>Caso mudan&ccedil;as ocorram, o cliente desejar&aacute; mudar os requisitos. Como uma parte integral do contrato, os requisitos n&atilde;o podem ser alteradas sem refletir uma mudan&ccedil;a formal no contrato, conforme combinado pelas partes no acordo sobre o mecanismo de controle de mudan&ccedil;as. Em um contrato de pre&ccedil;o fixo, as mudan&ccedil;as em geral s&atilde;o vistas como geradoras de trabalho adicional e o cliente deve pagar taxas adicionais. N&atilde;o &eacute; incomum que fornecedores vejam o controle de mudan&ccedil;as como uma oportunidade para ampliar suas margens.</p>
<p>O est&aacute;gio inicial do mecanismo de controle de mudan&ccedil;as &eacute; que o fornecedor analisa o impacto das mudan&ccedil;as solicitadas pelo cliente. Quanto maior e mais complexo for o projeto de TI, e quanto maior for a quantidade de trabalho envolvida para que o fornecedor leve a cabo o exerc&iacute;cio. Algumas vezes, o impacto da solicita&ccedil;&atilde;o de mudan&ccedil;a &eacute; t&atilde;o complexo que o fornecedor simplesmente n&atilde;o pode resolver como incorporar a solicita&ccedil;&atilde;o no projeto de TI em andamento.</p>
<p>O processo de analisar o impacto de uma solicita&ccedil;&atilde;o de mudan&ccedil;a pode levar tanto tempo e ser t&atilde;o extenso que tem um impacto desestabilizante no projeto de TI. A equipe est&aacute; ciente que o trabalho atual pode se tornar redundante ap&oacute;s a aprova&ccedil;&atilde;o da solicita&ccedil;&atilde;o de mudan&ccedil;a. Quanto maior a mudan&ccedil;a proposta, maior o intervalo gasto com an&aacute;lise e mais prejudicial pode se tornar seu efeito.<sup>7</sup></p>
<p>Qualquer solicita&ccedil;&atilde;o de mudan&ccedil;a inevitavelmente causar&aacute; atrasos no projeto de TI. &Eacute; improv&aacute;vel que o cronograma original tenha estimado um buffer para que os recursos do fornecedor sejam desviados para essa atividade e para qualquer trabalho adicional a ser realizado. &Eacute; por essa raz&atilde;o que ambos, cliente e fornecedor, consistentemente citam as mudan&ccedil;as aos requisitos como uma das maiores causas do fracasso dos projetos de TI.</p>
<p>Para tornar as coisas ainda piores, o Modelo Contratual exige o desenvolvimento sequencial. Somente ap&oacute;s a fase de testes &eacute; que o cliente ganha visibilidade sobre o software. At&eacute; aquele ponto &eacute; muito dif&iacute;cil para qualquer um avaliar se um projeto de TI est&aacute; nos trilhos. Os entreg&aacute;veis de todas as fases anteriores est&atilde;o documentados e s&atilde;o baseados em premissas. Apenas quando o software &eacute; constru&iacute;do de fato &eacute; que qualquer um pode avaliar com precis&atilde;o se o projeto de TI est&aacute; no caminho de conseguir atender a todos os requisitos. Contudo, h&aacute; um longo intervalo, frequentemente na casa dos anos, entre a data na qual o cliente fornece os requisitos e a data em que recebe do fornecedor a primeira entrega de software em funcionamento. Quanto maior esse intervalo, maior ser&aacute; a chance de mudan&ccedil;as significativas ocorrerem durante esse tempo.</p>
<h2>Risco de valor de neg&oacute;cio</h2>
<p>O projeto FiReControl ressalta a import&acirc;ncia de demonstrar desde o in&iacute;cio como um projeto entregar&aacute; o valor de neg&oacute;cio que se espera e como obter&aacute; o apoio de todos os envolvidos. O DCLG foi criticado pelo Escrit&oacute;rio Nacional de Auditoria por n&atilde;o ter tornado suficientemente clara a demanda por um modelo padr&atilde;o ditado centralmente para lidar com liga&ccedil;&otilde;es de emerg&ecirc;ncia e mobiliza&ccedil;&atilde;o, operando a partir de centros de controle regionais constru&iacute;dos para esse prop&oacute;sito. Desde o come&ccedil;o, muitas autoridades locais para o combate a inc&ecirc;ndios e resgates criticou a falta de claridade sobre como a abordagem regional iria aumentar a efici&ecirc;ncia.<sup>8</sup> A n&atilde;o ser que o software resultante entregasse valor de neg&oacute;cio tang&iacute;vel, n&atilde;o interessa qu&atilde;o sofisticado ou estado da arte seja, os usu&aacute;rios finais podem simplesmente decidir n&atilde;o utiliz&aacute;-lo.</p>
<p>O risco de valor de neg&oacute;cio, atualmente negligenciado pelo Modelo Contratual, &eacute; muito mais s&eacute;rio. Existe, ao contr&aacute;rio, uma presun&ccedil;&atilde;o que se o fornecedor entregar o software que atenda aos requisitos levantados, ele entregar&aacute;, portanto, o valor de neg&oacute;cio para o cliente. Contudo, isso por sua vez assume que o cliente sabe o que precisa. O que descobrimos &eacute; que, apesar dos clientes serem muito bons a declarar o que eles queriam, muito mais frequentemente, os cliente n&atilde;o sabem de fato o que precisam. Como resultado, n&atilde;o &eacute; incomum para um cliente se desapontar com o software entregue, mesmo que o fornecedor demonstre que o software atende a todos os requisitos.</p>
<p>&Eacute; uma acusa&ccedil;&atilde;o triste sobre o estado atual do desenvolvimento de software o de que um dos maiores riscos &eacute; que o fornecedor pode construir &quot;o produto errado&quot;. Isso acontece sempre que o fornecedor executar perfeitamente os requisitos do cliente, mas o software entregue n&atilde;o adiciona nenhum valor real para o cliente. O software n&atilde;o adiciona valor porque n&atilde;o permite ao cliente resolver o problema que desejava tratar.</p>
<p>A raz&atilde;o pela qual os clientes t&ecirc;m tirado t&atilde;o pouco valor de neg&oacute;cio do software entregue pelo fornecedor &eacute; que o Modelo Contratual n&atilde;o visa resolver os problemas do cliente e que gerariam valor. Ao inv&eacute;s, o Modelo Contratual &eacute; visa entregar os requisitos, ou seja, via os entreg&aacute;veis de um projeto de TI que deveriam contribuir e facilitar o atingimento dos resultados desejados.</p>
<p>As pessoas compram um martelo para pregar um prego de forma que possam pendurar um quadro - eles sabem que podem atingir o resultado (pendurar o quadro) com a aquisi&ccedil;&atilde;o de um martelo. Infelizmente, no contexto do desenvolvimento de software n&atilde;o &eacute; t&atilde;o direto para se fazer a liga&ccedil;&atilde;o entre o entreg&aacute;vel (o software) e o atigimento dos resultados pretendidos pelo cliente. Muitas pessoas simplesmente nem tentam. Isso cria um grande risco que o fornecedor ir&aacute; apenas entregar o que o cliente pediu - um conjunto vago de requisitos - ao inv&eacute;s do que o cliente realmente precisava, que &eacute; atingir os resultados alvo.</p>
<p>O desenvolvimento de software envolve a transforma&ccedil;&atilde;o de ideia em entreg&aacute;veis para atingir objetivos de neg&oacute;cio. O catalisador para projetos de TI &eacute; geralmente um business case. Isso se justifica no n&iacute;vel estrat&eacute;gico e financeiro da aquisi&ccedil;&atilde;o do software. O custo antecipado do software &eacute; justificado por v&aacute;rias premissas, tais como melhoras nos processos de neg&oacute;cio, aumento no market share, aumento de receita, redu&ccedil;&atilde;o nos custos de suporte e por a&iacute; vai. Ap&oacute;s a aprova&ccedil;&atilde;o interna do business case, os requisitos s&atilde;o levantados e assimilados de todos na organiza&ccedil;&atilde;o cliente que tenham interesse no software resultante.</p>
<p>Assim, se um business case geralmente acontece antes da especifica&ccedil;&atilde;o dos requisitos, por que o software resultante n&atilde;o necessariamente entregar&aacute; os resultados desejados?</p>
<p>Primeiramente, o business case n&atilde;o &eacute; testado. Em muitos deles h&aacute; elementos que s&atilde;o fundamentados em suposi&ccedil;&otilde;es, n&atilde;o em fatos. Essas suposi&ccedil;&otilde;es n&atilde;o foram provadas como certas e &eacute; prov&aacute;vel que muitas delas est&atilde;o erradas. Idealmente, essas suposi&ccedil;&otilde;es deveriam ser testados antes que qualquer aporte significativo de recursos seja feito na constru&ccedil;&atilde;o de um sistema de software que entregue com base no business case. Mas isso raramente ocorre.</p>
<p>Em segundo lugar, o business case &eacute; produzido tipicamente a um n&iacute;vel muito alto e com o prop&oacute;sito de obter financiamento ou aprova&ccedil;&atilde;o or&ccedil;amentaria. N&atilde;o &eacute; incomum que um business case seja muito ambicioso em termos do que o software deve atingir, pois oferece um argumento melhor para se investir na aquisi&ccedil;&atilde;o do software. &Eacute; menos comum que um business case tenha um papel ativo nas mudan&ccedil;as de dire&ccedil;&atilde;o de um projeto de TI. &Eacute; ainda menos comum que algu&eacute;m revisite o business case &agrave; luz do progresso do projeto para medir o andamento do mesmo com refer&ecirc;ncia ao business case.</p>
<p>As implica&ccedil;&otilde;es n&atilde;o podem ser subestimadas. O departamente de defesa (DoD) &eacute; um dos compradores de software mais sofisticados no mundo: tem grande alavancagem na negocia&ccedil;&atilde;o de contratos por causa do tamanho dos gastos anuais. Mesmo assim, o DoD praticamente n&atilde;o obt&eacute;m nenhum valor de neg&oacute;cio imediato de seus investimentos no desenvolvimento de software. &Eacute; poss&iacute;vel que outras organiza&ccedil;&otilde;es, menos experientes nas fun&ccedil;&otilde;es de contrata&ccedil;&atilde;o acabem recebendo ainda menos valor de neg&oacute;cio de seus gastos com TI?</p>
<p>A forma mais efetiva de qualquer organiza&ccedil;&atilde;o reduzir seus gastos com TI &eacute; garantir que apenas software que entregue valor seja constru&iacute;do. Precisamos conscientemente conectar os n&iacute;veis e esclarecer como o software resultante entregar&aacute; os resultados de neg&oacute;cio.</p>
<h2>O fracasso do modelo de neg&oacute;cio existente</h2>
<p>O Modelo Contratual n&atilde;o trata a possibilidade do risco do fracasso do modelo de neg&oacute;cio. Simplesmente n&atilde;o h&aacute; reconhecimento do fato de que quando o novo software seja lan&ccedil;ado, isso possa impactar os processos de neg&oacute;cio existentes. Como resultado, o Modelo Contratual aumenta a exposi&ccedil;&atilde;o do cliente ao risco de fracasso do modelo de neg&oacute;cio existente que &eacute; indiscutivelmente a mais trai&ccedil;oeira das tr&ecirc;s categorias de risco.</p>
<p>Talvez em 1980, quando o Modelo Contratual foi utilizado pela primeira vez, os sistemas de software eram razoavelmente espec&iacute;ficos e limitados em termos de sua opera&ccedil;&atilde;o. Contudo, os sistemas atuais de software s&atilde;o utilizados por virtualmente todas as fun&ccedil;&otilde;es de neg&oacute;cio de uma organiza&ccedil;&atilde;o - por exemplo, o diretor financeiro, o departamento de contabilidade, o diretor de marketing, as equipes de marketing e vendas podem todos precisar utilizar o mesmo sistema de software. Esse sistema de software pode interligar-se com outros sistemas de software de outras organiza&ccedil;&otilde;es - tais como os clientes ou os fornecedores da organiza&ccedil;&atilde;o.</p>
<p>&Agrave; luz dos muitos processos de neg&oacute;cio que podem ser impactadas pelo novo sistema de software, &eacute; essencial que a transi&ccedil;&atilde;o para esse sistema seja gerenciado de uma forma que possa limitar o risco de fracasso do modelo de neg&oacute;cio existente a um m&iacute;nimo. Contudo, o Modelo Contratual geralmente exige que todos os requisitos sejam entregues em um &uacute;nico log. Quanto mais o projeto de TI, maior o lote dever&aacute; ser.</p>
<p>Para muitas organiza&ccedil;&otilde;es, &eacute; simplesmente infact&iacute;vel tentar assimilar um sistema de software nessa escala e complexidade em seus processo de neg&oacute;cio existentes tudo de uma vez. O risco de qualquer desses processos de neg&oacute;cio colapsar sobre a enormidade da mudan&ccedil;a &eacute; grande. Seria muito melhor se a transi&ccedil;&atilde;o para o sistema novo for gerenciado em lan&ccedil;amentos menores, com &ecirc;nfase na qualidade da experi&ecirc;ncia de usu&aacute;rio durante a transi&ccedil;&atilde;o.</p>
<h2>Conclus&atilde;o</h2>
<p>Muita pesquisa e muitos estudos foram feitos sobre projetos de TI para buscar entender por que existem tantos fracassos e por que o tamanho desses insucessos &eacute; t&atilde;o grande. At&eacute; o momento, o Modelo Contratual tem sido amplamente ignorado. Acreditamos que o referido modelo precisa de uma total revis&atilde;o. Com a nossa depend&ecirc;ncia cada vez maior da TI e os gastos crescentes com TI, uma revis&atilde;o do Modelo Contratual &eacute; urgente.</p>
<p>O <a href="http://www.flexiblecontracts.com/">livro sobre contratos flex&iacute;veis</a> deve ser lan&ccedil;ado em breve.</p>
<hr />
<p><sup>1</sup> 'The failure of the FiReControl project' Relat&oacute;rio de controle e auditoria geral do Escrit&oacute;rio de Auditoria Nacional, 1 July 2011.</p>
<p><sup>2</sup> 'Double whammy - How ICT projects are fooled by randomness and screwed by political intent' por Alexander Budzier e Bent Flyvbjerg, trabalho apresentado na Said Business School, Oxford, August 2011.</p>
<p><sup>3</sup> &Agrave;s vezes o contrato n&atilde;o determina o desenvolvimento sequencial, mas a exig&ecirc;ncia pelo escopo e o mecanismo de controle de mudan&ccedil;as &eacute; quase t&atilde;o problem&aacute;tico.</p>
<p><sup>4</sup> Infra.</p>
<p><sup>5</sup> 'Lifecycle Concept Considered Harmful' por Daniel McCracken e Michael Jackson, ACM Software Engineering Notes, April 1982.</p>
<p><sup>6</sup> N&atilde;o conseguimos encontrar mais detalhes a respeito desses estudo. Claramente a meia-vida das especifica&ccedil;&otilde;es ser&atilde;o diferentes para setores diferentes. Contudo, existem ind&iacute;cios de evid&ecirc;ncia para apoiar a vis&atilde;o de que a meia-vida seja ainda mais curta no setor de tecnologia.</p>
<p><sup>7</sup> 'The curse of the change control mechanism' por Susan Atkinson e Gabrielle Benefield, Computers &amp; Law, May 2011.</p>
<p><sup>8</sup> Infra.</p>
<h2>Sobre os autores</h2>
<p><img src="http://www.infoq.com/resource/articles/contract-model-failure/pt/resources/gabrielle.jpg" vspace="3" hspace="3" align="left" alt="" _href="img://gabrielle.jpg" _p="true" /><strong>Gabrielle Benefield</strong> &eacute; a CEO da Evolve Beyond e ajuda as pessoas a construir &oacute;timos produtos e organiza&ccedil;&otilde;es. &Eacute; a autora de Scrum Primer e &eacute; co-fundadora da Flexible Contracts em parceria com Susan Atkinson. Est&aacute; escrevendo dois livros sobre Entrega de Resultados e HotHousing; frameworks adaptativos que enfocam nos resultados que interessam para o neg&oacute;cio e seus usu&aacute;rio, ao inv&eacute;s das entregas que criam desperd&iacute;cio e experi&ecirc;ncias de usu&aacute;rio que causam confus&atilde;o.</p>
<p><img src="http://www.infoq.com/resource/articles/contract-model-failure/pt/resources/susan.jpg" vspace="3" hspace="3" align="left" alt="" _href="img://susan.jpg" _p="true" /><strong>Susan Atkinson</strong> &eacute; uma advogada consultar na Keystone Law e outra co-fundadora da Flexible Contracts. &Eacute; uma advogada comercial, com enfoque em TI, terceiriza&ccedil;&atilde;o, e-commerce e propriedade intelectual. Tem mais de quinze anos de experi&ecirc;ncia legal e trabalhou em contratos comerciais complexos e de alto valor, primariamente em tecnologia para servi&ccedil;os financeiros e setor p&uacute;blico, e frequentemente em um contexto internacional.</p><br><br><br><br><br><br></body></html>