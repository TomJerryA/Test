<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>The API Orchestration Layer</h3><p>Your API design depends fundamentally on knowing who is consuming the API and how they use it, writes <a href="http://www.infoq.com/author/Daniel-Jacobson">Daniel Jacobson</a>, director of engineering for the Netflix API in a recent article on <a href="http://thenextweb.com/dd/2013/12/17/future-api-design-orchestration-layer">The Next Web</a>. This seems obvious, but Daniel goes on to write that the traditional &quot;one-size-fits-all&quot; resource-oriented API may not satisy the most important of your API consumers. Good API design is not merely about &quot;resource modeling, payload format, how to version the system, and security,&quot; the more fundamental question is &quot;who are the primary audiences for this API and how can we optimize for those audiences?&quot;</p>
<p><a href="http://en.wikipedia.org/wiki/Resource-oriented_architecture">Resource-oriented</a> APIs may work for a &quot;large set of unknown developers&quot; but most organizations are actually addressing the needs of a &quot;small set of known developers&quot; with specific use-cases. &quot;They may be engineers down the hall from the API team, a contracted company hired to develop an iPhone app, or an engineering team in a partnering company&quot; writes Daniel and in this case there are opportunities to optimise the API.</p>
<p>Companies are increasingly introducing into their architecture an API orchestration layer which Daniel defines as &quot;an abstraction layer that takes generically-modeled data elements and/or features and prepares them in a more specific way for a targeted developer or application.&quot; Daniel lists ome of the key principles of an orchestration layer as:</p>
<blockquote> 
 <ol> 
  <li>Most APIs are designed by the API provider with the goal of maintaining data model purity. When building an [orchestration layer], be prepared to sometimes abandon purity in favor of optimizations and/or performance.</li> 
  <li>Many APIs are designed by API teams to make it easier for the API team to support. When building an [orchestration layer], be prepared to potentially add complexity for the API team.</li> 
  <li>It is important to understand the breadth of the audiences for the API. Depending on those constituents, you may only need the [orchestration layer]. In other cases, you may need the [one-size-fits-all] foundation in addition to the [orchestration layer].</li> 
 </ol> 
</blockquote>
<p>The second principle brings to mind a common analogy from interface design with a &quot;smart&quot; video recorder where the complexity is increased on the inside of the box to make life easier for the user on the outside of the box.</p>
<p>Daniel closes his article by describing three common use-cases for the orchestration layer for device-specific wrappers, to support a query-based API and to provide experience-based APIs. Daniel writes that the device-specific wrapper is the most common use-case he has seen, quoting the example of an API wrapper optimized for an iPhone. Device-specific wrappers are generally provided by the API team for specific consumers. Query-based APIs conversely put the power onto API consumers &quot;allowing [resources] to be queried against like a database through flexible parameters and payloads&quot; that are under the control of the consumer.</p>
<p>Experience-based APIs are the model that <a href="http://www.infoq.com/news/2013/02/netflix-api-optimization">Netflix has adopted</a> and are a blend of the other two use-cases involving device-specific wrappers that are designed, implemented and owned by the API consumers. The division of responsibilities is split between the API team providing data in a generic re-usable way with consumers owning the data formatting and delivery.</p>
<p>Daniel concludes that the API team needs to view their consumers as design partners collaborating so that end-users get the best experience possible.</p><br><br><br><br><br><br></body></html>