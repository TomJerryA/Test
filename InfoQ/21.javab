<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Book Review: Test-Driven Infrastructure with Chef - Second Edition</h3><p>In the first chapter of the book &quot;<a href="http://shop.oreilly.com/product/0636920030973.do">Test-Driven Infrastructure with Chef, 2nd Edition</a>&quot;, Stephen Nelson-Smith discusses the philosophy behind Test-Driven Infrastructure. He lists two fundamental philosophical points:</p>
<ol> 
 <li>Infrastructure can and should be treated as code</li> 
 <li>Infrastructure developers should adhere to the same principles of professionalism as other software developers.</li> 
</ol>
<p>Then, he dives deeper into each of them.</p>
<p>In 2006, the emergence of utility computing like Amazon EC2 and 2nd generation web frameworks like Ruby on Rails enabled even the smallest teams to create Internet-scale applications. Soon Puppet and then, a few years later, Chef were introduced to help people manage their large scale web infrastructures. Stephen says in his book:</p>
<blockquote> 
 <p>Through co-design of the infrastructure code that runs an application, we give operational responsibilities to developers. By focusing on design and the software life‐ cycle, we liberate system administrators to think at higher levels of abstraction.</p> 
</blockquote>
<p>After digging into the history of Infrastructure as Code, Stephen lists some principles of Infrastructure as Code like</p>
<ol> 
 <li>Break the infrastructure down into independent, reusable, network-accessible services.</li> 
 <li>Integrate these services in such a way as to produce the functionality our infra‐ structure requires.</li> 
</ol>
<p>Then he highlights the main risks of an Infrastructure as Code-approach like duplication and a lack of clear understanding of infrastructure code, fear of changing the code, or dependencies on a few key people who are the only ones able to understand the infrastructure code.</p>
<p>To mitigate those risks, Stephen demands that infrastructure code needs the same caution and professionalism to write it as application code. Things like modular design, collective code ownership, code reviews, code standards, refactoring, and testing of infrastructure code are necessary practices when writing any kind of code.</p>
<p>After introducing the philosophy, Stephen dedicates full chapters to an introduction to Ruby, and introduction to Chef, and the description of basic tools people commonly use in conjunction with Chef like VirtualBox and Vagrant.</p>
<p>In chapter five, Stephen introduces Test- and Behaviour-Driven Development.</p>
<p>Now the reader should be equipped with the basic understanding of all the concepts and tools required to start with test-driven development of infrastructure code.</p>
<p>In chapter six, Stephen introduces his conceptual framework for Test-Driven Infrastructure called MASCOT. He says:</p>
<blockquote> 
 <p>Test-driven infrastructure should be:</p> 
 <ul> 
  <li>Mainstream</li> 
  <li>Automated</li> 
  <li>Side effect aware</li> 
  <li>Continuously integrated</li> 
  <li>Outside-in</li> 
  <li>Test-first</li> 
 </ul> 
</blockquote>
<p>Describing each point in greater detail fills the remainder of chapter six.</p>
<p>Chapter seven recommends a tool chain for test-driven infrastructure. He starts the chapter with re-emphasizing the two philosophical foundations of test-driven infrastructure:</p>
<ol> 
 <li>Infrastructure can and should be treated as code.</li> 
 <li>Infrastructure developers should adhere to the same principles of professionalism as other software developers.</li> 
</ol>
<p>Then he describes the different types of testing: unit testing, integration testing, and acceptance testing and the testing workflow to show when each of those types comes into play.</p>
<p>After describing the testing types and the testing workflow, Stephen introduces his recommended set of tools:</p>
<ul> 
 <li>Berkshelf for managing cookbook dependencies</li> 
 <li>Vagrant for managing virtual machines for running tests</li> 
 <li>Test Kitchen for orchestrating tests across multiple nodes and platforms</li> 
 <li>Cucumber and Leibniz for acceptance testing</li> 
 <li>Serverspec and Bats in conjunction with Test Kitchen</li> 
 <li>Minitest Handler for integration testing</li> 
 <li>Chefspec for unit testing</li> 
 <li>Static analysis and linting tools like Foodcritic, Knife Cookbook Test, Tailor, and Strainer</li> 
</ul>
<p>Each of the above sections comes with detailed getting started instructions, code examples and a description of pros and cons of every tool. This section is the most practical part of the book where the reader can follow along and get going with the described tools. Stephen finishes the book with a summary on how to use each of the tools in the testing workflow.</p>
<p>Stephen was also kind to answer several questions related to his book. </p>
<p><strong>InfoQ: What was your motivation to write that second edition of TDI? </strong></p>
<blockquote> 
 <p>Stephen: The first book was really a toe in&nbsp; the water - a manifesto.&nbsp; But I felt rather like John the Baptist - a voice crying in the wilderness!&nbsp; I had a fierce sense that we needed to apply test-first principles and BDD to infrastructure code, and I wanted to share that vision.&nbsp; A short while after the publication of the first edition, it was clear I'd hit a nerve - the ecosystem had blossomed and everyone was talking about test-driven infrastructure.&nbsp; It was clearly necessary to update and expand the first edition, to meet demands, and besides, I think I had more to say!&nbsp; I wouldn't be surprised to see the same happen again, as the world matures and expands further.</p> 
</blockquote>
<p><strong>InfoQ: You state two philosophical foundations for TDI:&nbsp; </strong></p>
<ol> 
 <li><strong>Infrastructure can and should be treated as code. </strong></li> 
 <li><strong>Infrastructure developers should adhere to the same principles of professionalism as other software developers. </strong></li> 
</ol>
<p><strong>What are the biggest objections you hear about regarding those two?</strong>&nbsp;</p>
<blockquote> 
 <p>Stephen: To be honest I think I rarely hear objections to the first any more - it's become almost a mainstream view.&nbsp; However on occasions when opposition is met I think it's usually down to two things.&nbsp; Firstly, there's a concern, especially at very small scale, that writing infrastructure code is wasteful - just build the machine and be done with it, and secondly, especially in more traditional environments, there's sometimes a reluctance or insecurity from IT professionals who are uncomfortable at the idea that they might need to learn to program.</p> 
 <p>Regarding the second, I think this is universally accepted.&nbsp; But I think my particular interpretation that professionalism means test-first, and continuously integrated is the state of the art isn't always accepted by engineers who are rightly proud of their automation efforts.&nbsp; On those occasions I think it's important not to come across as elitist or narrow-minded - I'm certainly not saying that engineers building out automation systems without an XP-derived test-first approach are unprofessional.&nbsp; What I am saying is that we need to recognise that the software we're developing is underpinning what is often the core of the business.&nbsp; We wouldn't deploy the applications into production without an automated testing mechanism - we need to treat our infrastructure in the same way. </p> 
</blockquote>
<p><strong>InfoQ: You state that: &quot;Testing our infrastructure code, thoroughly and repeatably, is non-negotiable, and is an essential component of the infrastructure developer’s work.&quot; Your book tries to provide encouragement and the necessary know how to follow this statement. What do you tell a aspiring infrastructure developer if he asks you how to do this with all the fire fighting going on in his job? </strong></p>
<blockquote> 
 <p>Stephen: Fire-fighting has always been a part of the sysadmin's life.&nbsp; We knew that when we got into the business.&nbsp; But the smart sysadmin understands that they always need to be thinking beyond the fix.&nbsp; What can we do to make the system more dependable, how can I reduce the likelihood of this issue happening again?&nbsp; I think it's now widely accepted that building and maintaining our infrastructure with an automation framework such as Chef helps this endeavour, and that applying the principles I advocate will ultimately result in a reduction in firefighting.&nbsp; I have much sympathy for the overworked sysadmin, but I think we need to be mindful of the adage of the sweat-drenched wood-cutter, labouring for hours against a particularly tough tree, insisting that they have no time to sharpen their saw, because they're too busy cutting wood... </p> 
</blockquote>
<p><strong>InfoQ: In Chapter 6 you define a conceptual framework for TDI based on your MASCOT principles: </strong></p>
<p><strong>Test-driven infrastructure should be: </strong></p>
<ul> 
 <li><strong>Mainstream </strong></li> 
 <li><strong>Automated </strong></li> 
 <li><strong>Side effect aware </strong></li> 
 <li><strong>Continuously integrated </strong></li> 
 <li><strong>Outside-in </strong></li> 
 <li><strong>Test-first </strong></li> 
</ul>
<p><strong>How far do you think the adoption of TDI has come so far and what do you see for the future?</strong>&nbsp;</p>
<blockquote> 
 <p>Stephen: From my observations within my community, which is, admittedly, skewed in this direction anyway, I think the principles and tooling are widely embraced.&nbsp; I think I see this mindset expanding throughout the industry. I don't think it's quite mainstream yet, but it's certainly on the way.&nbsp;</p> 
 <p>In terms of automation, I think this is close to nailed.&nbsp; Advancements in frameworks like Test-Kitchen have made a big difference, and as some of the work around continuous delivery/deployment of infrastructure that people like Chris McLimmans, myself and others at Chef now beginning to trickle into the open source space, I think we're in good share here.&nbsp;</p> 
 <p>Regarding side-effects, I think people are very keenly aware now of the ripple effect of even small changes, and as it becomes more common to be running tests via Jenkins or Travis, I see this awareness very much on the increase.&nbsp; This I think leads into the CI conversation - the tooling and the attitudes are almost at the level that we can start to expect all infrastructure developers to have all their cookbooks continuously integrated.&nbsp; The gap for me, at present, is that the support for Windows is still a bit behind that of Linux - but there's momentum to fix this, and I'm excited to see it.</p> 
 <p>The last two are the least mature.&nbsp; The advances in ChefSpec 3.0 and the release and support of Test Kitchen 1.0 has made unit and integration testing relatively accessible.&nbsp; However, the type of outside-in acceptance testing - specification by example - is still not yet given as much attention as I'd like to see.&nbsp; As for test-first - I'm a firm believer in this as a workflow, but it's an acquired taste, and takes a certain degree of discipline to pursue.&nbsp; More often than not, I see people retro-fitting tests after they write their recipes.&nbsp; I'd like to see that the other way around.&nbsp; I think perhaps his needs a bit more evangelism and demonstration.</p> 
</blockquote>
<p><strong>InfoQ: You propose an inside out approach to testing your infrastructure using cucumber for acceptance testing and RSpec for unit testing. You use test-kitchen (and the Leibniz Ruby gem) to automate testing. What do you think about the tool landscape in the TDI space? How will it evolve over the next 2-3 years?</strong>&nbsp;</p>
<blockquote> 
 <p>Stephen: I think we're beginning to settle on a common toolset for unit and integration testing - based around RSpec (ChefSpec, ServerSpec) and enabled by Test Kitchen.&nbsp; What I'd hope and expect to see more of in the next few years is work on how to do multi-node, stack-level acceptance testing.&nbsp; Leibniz is a very simple gem - all it really does is expose helpers to launch infrastructure with a given run list, enabling developers to write meaningful examples in Gherkin.&nbsp; The hard work is in writing the tests themselves.&nbsp; I think there's also some work to be done around orchestration - setting up a number of machines, waiting for certain machines to be ready, and then running the tests.&nbsp; This kind of endeavour requires some thought and some engineering, and is the space where I'd expect to see most innovation.</p> 
</blockquote>
<h2>About the Book Author</h2>
<p><strong><img align="left" src="http://www.infoq.com/resource/articles/test-driven-infrastructure-with-chef-second-edition/en/resources/Stephen-Nelson-Smith.jpg" alt="" _href="img://Stephen-Nelson-Smith.jpg" _p="true" />Stephen Nelson-Smith </strong>(@LordCope) is principal consultant at Atalanta Systems, a fast-growing agile infrastructure consultancy, and Opscode training and solutions partner in Europe. One of the foundational members of the emerging Devops movement, he has been implementing configuration management and automation systems for five years for clients ranging from Sony, the UK government and Mercado Libre to startups amongst the burgeoning London 'Silicon Roundabout' community. A UNIX sysadmin, Ruby and Python programmer, and lean and agile practitioner, his professional passion is ensuring operations teams deliver value to the business. He is the author of a <a href="http://agilesysadmin.net">popular blog</a>, and lives in Hampshire, UK, where he enjoys outdoor pursuits, his family, reading, and opera.</p><br><br><br><br><br><br></body></html>