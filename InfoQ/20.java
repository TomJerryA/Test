<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Om: Enhancing Facebook's React with Immutability</h3><p>David Nolan has released <a href="https://github.com/swannodette/om">Om</a>, a ClojureScript interface for Facebook’s <a href="http://facebook.github.io/react/">React</a>. David’s <a href="http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/ ">blog post introducing Om</a> describes how the combination can yield vast improvements in performance, using the, now seemingly, standard <a href="http://todomvc.com/">todo application</a>. The improvement is attributed to two key factors:</p>
<ol> 
 <li>Using immutable data structures for the application state means that <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.4">reference equality</a> can be used for the <a href="http://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate ">shouldComponentUpdate</a> implementation of the underlying React library. This improves the performance of React’s Virtual DOM diff operations, a process performed to detect changes that need to be rendered by the browser. This results in the application's performance being two to three times quicker than using standard data types, according to David.&nbsp;</li> 
 <li><a href="http://www.w3.org/TR/animation-timing/">requestAnimationFrame</a> is used to delegate the timing of repainting the browser's view to the browser, thereby batching view effecting changes into fewer redraws. This second addition appears to be behind David's <a href="https://twitter.com/swannodette/status/412033352699744256">tweet</a> of a 30X-40X increase in performance. In this second benchmark the end state is the same as the start, so if Om is able to perform all the state changes, before the browser requests a new frame, React’s Virtual DOM will calculate that there is in fact no change to make. Calculating that there is no change required is, of course, considerably faster than requesting redraws for every state change.</li> 
</ol>
<p>However, David is keen to point out that his effort isn’t necessarily about achieving high performance. From his <a href="http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/ ">post</a>:</p>
<blockquote>
  These benchmarks are not designed to prove that Om is the fastest UI component system in the world. These benchmarks are designed to demonstrate that it's important to avoid implementation decisions that defy global optimization or leave so little guidance that users will inevitably make these same problematic design decisions themselves. 
</blockquote>
<p>InfoQ had the chance to talk to David about Om and how Clojurescript adoption is progressing.</p>
<p><b>InfoQ:</b> Do you still have major features to add or are you just looking for some time to mature what is already there?</p>
<blockquote> 
 <b>David:</b> Om is a simple and more functional layer over React. While the public API is still under development I do not foresee significant feature additions - Om is meant to be a foundation for a more functional approach to user interface programming, not a framework. 
</blockquote>
<p><b>InfoQ:</b> In React there is a sense of bringing classic design considerations to web programming, Pete Hunt makes a several references to cohesion and coupling in his <a href="http://2013.jsconf.eu/speakers/pete-hunt-react-rethinking-best-practices.html ">architectural overview</a> for instance. Is this a sign that Javascript has matured enough that the cost of these principles is now sufficiently offset by the virtual machines performance or has there been a change in the culture surrounding user interface programming that has brought these ideas forward?</p>
<blockquote> 
 <strong>David</strong>: I think people are starting to see the limitations of just JavaScript and jQuery and even more structured solutions like Backbone, Angular, Ember, etc. React is a fresh approach to the DOM problem that seems obvious in hindsight. The response to my post was far greater than I expected so I think the ideas resonated with developers working in the browser. 
</blockquote>
<p><b>InfoQ:</b> Are there advantages to immutable data structures that might lead to their adoption, via <a href="http://swannodette.github.io/mori/ ">Mori</a>, by the current javascript frameworks or are new approaches, like React's Virtual DOM, creating different data needs, needs for which they are ideally suited?</p>
<blockquote> 
 <strong>David</strong>: React’s approach already delivers considerable benefit, but it gets to really shine when you leverage immutable data structures, because that means React reconciliation process has to do less work. We’ve seen a lot interest in immutable data structures just from the Om announcement. In addition, immutable data structures also open up the door for implementing powerful undo functionality trivially, whether for the user or the developer. 
</blockquote>
<p><b>InfoQ:</b> ClojureScript is certainly <a href="http://cemerick.com/2013/11/18/results-of-the-2013-state-of-clojure-clojurescript-survey/ ">gaining the attention</a> of the Clojure community, but are you aware of many people coming to ClojureScript directly from Javascript?</p>
<blockquote>
 <strong>David:</strong> ClojureScript is solidly focused on serving the needs of the Clojure community. However I think there’s a growing interest in the broader web development community as our approach has some interesting advantages as demonstrated by projects like Om. 
</blockquote>
<p>As David says above, his announcement has received quite a large reaction from the community. A few people have written up their experience putting Om to work.</p>
<p><a href="http://www.lexicallyscoped.com/2013/12/25/slice-of-reactjs-and-cljs.html "> Fredrik Dyrkell posted</a> code samples showing the translation between pure React, to ClojureScript and finally to Om, closing with, “In summary, I am really excited about React in general and together with Clojurescript in particular”</p>
<p><a href="http://adamsolove.com/js/clojure/2014/01/06/om-experience-report.html"> Adam Solove has given</a> an overview of working with Om to create a traditional browser UI that has to cooperate with a stateful mapping library and concluded, “What I learned: Om is a practical way to build web user interfaces in a functional style, and a lot of fun.”</p>
<p><a href="http://www.joshlehman.me/rewriting-the-react-tutorial-in-om/ "> Josh Lehman has rewritten</a> the <a href="http://facebook.github.io/react/docs/tutorial.html">React tutorial</a> in Om and saying ”Om is the most promising ClojureScript library that I have yet come across for building rich interfaces.”</p><br><br><br><br><br><br></body></html>