<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Choosing the Right ESB for Your Integration Needs</h3><p>Different applications within companies and between different companies need to communicate with each other. The Enterprise Service Bus (ESB) has been established as a tool to support application integration. But what is an ESB? When is it better to use an integration suite? And which product is best suited for the next project? This article explains why there is no silver bullet and why an ESB can also be the wrong choice. Selecting the right product is essential for project success.</p><h2>Definition of the Term &quot;Enterprise Service Bus&quot;</h2><p>Numerous products from different vendors include the name &quot;Enterprise Service Bus&quot;. Unfortunately, there is no standard definition of this term. The products therefore offer many different features. The term ESB should always be clearly defined before it is used. In the following, an ESB is defined as a software product which assists the developer in application integration and therefore provides the necessary infrastructure to implement routing, translation, and other integration facilities. On the integration complexity path, an ESB usually falls between a framework and a suite as an alternative for application integration, as shown in the following picture: <br /> &nbsp;<img src="http://www.infoq.com/resource/articles/ESB-Integration/en/resources/7fig1.jpg;jsessionid=7797493C3D138742AB80BF5056A01C26" vspace="3" hspace="3" align="absBottom" alt="" _href="img://7fig1.jpg" _p="true" /><br /> Figure 1: Alternatives for application integration <br /> After the term ESB has been defined, the next section explains when an ESB should be considered, and when an integration framework or an integration suite is a better choice.</p><h2>Integration Framework</h2><p>A framework helps implementing Enterprise Integration Patterns (EIP, http://www.eaipatterns.com), such as Splitter or Content Based Router, in order to integrate applications in a standardized way. Using standard APIs to integrate products noticeably lowers the implementation effort and the source code is easier to understand for other developers. A framework is well suited to integrate different applications with different protocols and technologies, and concepts such as endpoints, producer, consumer and EIPs are used to create the integration logic. Even implicitly supported test automation uses the same concepts. <br /> A framework consists of a set of ordinary libraries and is therefore compatible with any development environment, even a classic text editor. <br /> Known examples of frameworks are Apache Camel and Spring Integration in the <a href="http://www.h-online.com/developer/features/Free-integration-frameworks-on-the-Java-platform-1672712.html">Java environment</a> and <a href="http://nservicebus.com">NServiceBus</a> for .NET. <br /> With frameworks the development team is more or less solely responsible for the project's success. Commercial support is generally not available. Tooling is also only partly available, and not necessarily suitable for &quot;mission-critical&quot; deployments. The rest of this article is therefore devoted to ESB and corresponding suites, which are often a better choice than a framework.</p><h2>Enterprise Service Bus</h2><p>Like a framework, an ESB is used to integrate applications. An ESB is based on a framework implicitly. However, it is a much more powerful product. Contrary to a framework, an ESB offers strong tool support for deployment, administration and monitoring at runtime, besides basic functionalities for application integration. In addition, graphical editors are used for the implementation of various integration scenarios. The integration logic can be modeled with &quot;drag and drop&quot;, the corresponding source code being generated automatically. Commercial support completes the package of an ESB. <br /> The great advantage of ESBs over the use of pure frameworks is therefore the better tooling, which reduces the cost and complexity significantly. Integration problems are solved at a higher abstraction level.</p><h2>Integration Suite</h2><p>A suite offers all features of an ESB. In addition, many other functions such as Business Process Management (BPM), Business Activity Monitoring, Master Data Management, or a Repository are included. If some of these additional features are required in addition to pure integration, then the use of a suite is advisable. The entire integration can be realized with a single software stack. <br /> The differences between a framework, an ESB and a suite are hopefully now clarified. Next will be explained how to select the right ESB or suite.</p><h2>Comparison Criteria</h2><p>Notice: we will not provide a matrix that compares all the available products with respect to various criteria. ??From the perspective of the author, it is hardly possible to create a good and useful matrix because the products offer far too many (often different) functionalities and concepts. Besides, the feature list also changes virtually every day in the IT world. <br /> Therefore, it is advisable to pre-define your own needs, and then to evaluate which products are best suited. Proprietary solutions are often very similar, and also the most used open source competitors offer similar characteristics. Therefore, it makes sense to think of at the beginning, whether a proprietary or an open source solution is the better choice. <br /> In order to make this decision, you should use the following criteria:</p><ul> 
 <li><b>Usability</b>: How complicated is the installation? How many tools are needed? Is the development environment intuitive?</li> 
 <li><b>Maintainability</b>: How do you administer the product? Is there a GUI for monitoring services?</li> 
 <li><b>Community</b>: Are there active public forums or mailing lists? Are numerous articles, tutorials, articles, and videos available? Is the product supported by several companies?</li> 
 <li><b>Enterprise</b><b> Support</b>: What support options are offered (&quot;business hours&quot;, &quot;24/7&quot; hotline vs. Email vs. on-site support, etc.)? Can the required service level agreements be guaranteed? Is support offered in your preferred language?</li> 
 <li><b>Functionality</b>: Are all the required functionalities offered?</li> 
 <li><b>Flexibility</b>: Can you customize functionalities of the product to fit my needs?</li> 
 <li><b>Expandability</b>: Is it possible to expand the product? Is the product and its interfaces based on standards?</li> 
 <li><b>Connectors</b>: Are adapters for all required technologies available? Are there adapters for B2B products such as SAP or Salesforce? How easily can I build your own adapter?</li> 
 <li><b>Cost</b>: What is the full cost (total cost of ownership) of the product - including maintenance, all required ancillary products, connectors, etc.)?</li> 
 <li><b>Licensing</b>: What licensing or subscription model is used? What happens when requirements change (more computers, more CPUs, switching to virtual machines, etc.)? Are upgrades for free? Are downgrades possible, too? Are the costs &quot;foreseeable&quot; at all, is the price list even understandable?</li> 
</ul><p><br /> Table 1 compares the advantages and disadvantages of proprietary vs. open source ESBs and suites (green = good, yellow = medium, red = bad). The conclusion regarding the differences is the following: Proprietary solutions generally offer more features and &quot;powerful&quot; support. However, the question remains, &quot;Are these really needed?&quot; Remember that efforts, complexity, and costs are correspondingly higher. Open Source products score with easier usability, greater flexibility, easier extensibility and lower costs.</p><table border="0" cellspacing="1" cellpadding="1"> 
 <tbody> 
  <tr bgcolor="#808080"> 
   <td valign="top" width="18%"> <p><b>Criteria</b></p> </td> 
   <td valign="top" width="40%" color="#808080"> <p><b>Proprietary</b></p> </td> 
   <td valign="top" width="40%"> <p><b>Open Source</b></p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Ease of use</p> </td> 
   <td valign="top" width="40%" bgcolor="#FF0000"> <p>Very complex installation (consultants needed !?), „tool hell“</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>One Click Installer (also for Mac in some cases), start using after minutes, unified platform</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Maintainability and Monitoring</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>Powerful tooling (e.g. for administration and monitoring), Analysis of source code not necessary, refactoring via GUI</p> </td> 
   <td valign="top" width="40%" bgcolor="#FF0000"> <p>Less powerful tooling (e.g. for administration and monitoring, integration of further products from other vendors required sometimes), Analysis of source code not necessary, refactoring via GUI</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Community</p> </td> 
   <td valign="top" width="40%" bgcolor="#FF0000"> <p>Buy support, forums (but no real community which helps)</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>Based on open source projects, plus own community</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Enterprise Support</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>24/7 enterprise support, SLAs as you wish, deployments with thousands of servers</p> </td> 
   <td valign="top" width="40%" bgcolor="#FFFF00"> <p>24/7 enterprise support, less guarantees than proprietary support, check for local consulting and support</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Functionality</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>Integration features + many more (BAM, CEP, EDA, etc., etc., etc.)</p> </td> 
   <td valign="top" width="40%" bgcolor="#FFFF00"> <p>Integration features + some more</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Flexibility</p> </td> 
   <td valign="top" width="40%" bgcolor="#FF0000"> <p>(Make a change request + wait long + pay) OR (pay a lot + get it quickly)</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>Open source, change what you want</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Extensibility</p> </td> 
   <td valign="top" width="40%" bgcolor="#FF0000"> <p>Do it yourself (tough) OR pay</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>Standards-based, defacto standards</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Connectors</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>Adapters for technologies and business products</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>Adapters for technologies and business products</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Costs</p> </td> 
   <td valign="top" width="40%" bgcolor="#FF0000"> <p>MUCH (and even more)</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>LESS</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="18%" bgcolor="#808080"> <p>Licencing</p> </td> 
   <td valign="top" width="40%" bgcolor="#FF0000"> <p>Complex price list, pay for everything (upgrades, migration to VM, „you-name-it“)</p> </td> 
   <td valign="top" width="40%" bgcolor="#008000"> <p>Subscription model, upgrades inclusive, predictive costs, downgrades possible</p> </td> 
  </tr> 
 </tbody> 
</table><p>&nbsp;Table 1: Advantages and disadvantages of proprietary and open source products</p><h2>Product Alternatives</h2><p>After the main differences between proprietary and open source products have been explained, some specific products are introduced in the following. Thus, an overview of the various available alternatives will be given including a small practical insight. <br /> Almost every vendor of proprietary integration products, such as IBM and Oracle, offers a solution for every conceivable function. Regarding open source alternatives, in particular the Unified Platform of Talend and the WSO2 Platform are worth mentioning, because they also offer complete suites. Besides, several alternatives concentrate solely on ESB. Perhaps the most important open source offerings are Mule ESB and Fuse ESB.</p><h2>Oracle Service Bus / Fusion Middleware</h2><p><a href="http://www.oracle.com/technetwork/middleware/service-bus/overview/index.html">Oracle Service Bus</a>&nbsp;is the current ESB from Oracle. It is a component of Oracle Fusion Middleware (OFM) stack, which according to the definition of this article is an integration suite. Many other products are available in it, for example, the SOA Suite, Coherence, Complex Event Processing, BPEL Process Manager, Enterprise Messaging Service, Service Registry, and many more. <br /> There is probably not much functionality which is not provided by Oracle’s suite. The tools are very powerful and stable. Graphical editors exist for most products. Support is also available for most conceivable service level agreements. If these powerful and SLAs are really needed, you are on the right side with Oracle. This power comes at a price of course. The high complexity of the products should not be underestimated. Besides, you should be aware of high licensing and support costs plus a non-transparent pricing model. <br /> The OFM is based on standards such as Java EE, BPEL, SOAP, or SCA. The products are proprietary and come from multiple acquisitions made by Oracle over time. Therefore different codebases are used, and different products often need different development tools. The sum of the downloads can quickly exceed 20 Gb. The installation is tedious and can occasionally move over several days - even for a simple installation on your laptop. The products are rather heavy. Resource requirements at runtime are very high. <br /> By the way, you could have just replaced &quot;Oracle&quot; with &quot;IBM&quot; and &quot;Fusion Middleware&quot; with &quot;WebSphere&quot;. The content of this section would still be almost the same - except to mention that IBM has three different ESBs in the portfolio: the Message Broker, the ESB and the DataPower SOA Appliances. Also, Tibco, Microsoft and SAP play an important role in the market of proprietary ESBs and integration suites. <br /> The conclusion of this section is therefore that proprietary integration suites can offer almost every conceivable function and cover almost all SLAs. However, many of these functionalities or SLAs are not required in most projects. In this case, be sure to also evaluate open source alternatives. The most important ones are described in the next sections.</p><h2>Mule ESB</h2><p><a href="http://www.mulesoft.org">Mule ESB</a> is one of the first successful open source ESBs. It has a lot of qualities in common with the other previously mentioned open source ESBs. These include a very simple (&quot;one click&quot;) installation and intuitive, Eclipse-based tooling. Usually, open source ESBs are very lightweight and extensible solutions. Apart from the free open source version, a commercial enterprise version is available. This offers additional functionality and support for the product. <br /> For those who still do not know it, it should be mentioned that “open source” does not mean “for free”. Even vendors of open source software have to make money and cannot develop products and offer support free of charge. However, the prices are much more customer friendly and not based on obscure price lists as most proprietary products. Nevertheless, the open source version can be used (even in production) without any licensing costs. Often, however, the open source version simply serves for playing around or doing a proof of concept to later upgrade to the enterprise version with additional features and support. <br /> As the name suggests, Mule ESB is a pure ESB. Important advantages in contrast to frameworks like Apache Camel or Spring Integration are the graphical editors for an efficient implementation of integration scenarios and the available connectors for B2B products such as SAP or Salesforce. However, the functionality of a suite is missing in Mule ESB. For such use cases, the ESB has to be combined with products from other vendors. Negative aspects of Mule ESB are the small community, a restrictive licensing model and limited availability of the source code. Competitors have significant advantages at this.</p><h2>Fuse ESB</h2><p>The <a href="http://fusesource.com/products/enterprise-servicemix">Fuse ESB</a> is a pure ESB like Mule ESB, without a suite. It is based on de facto standards in the integration environment such as Apache CXF and Apache Camel. As a result, a great community is already secured from the ground up. The development environment is based on Eclipse and very intuitive. <br /> Fuse ESB was a paid, proprietary product while under the care of FuseSource. However, FuseSource was recently acquired by <a href="http://fusesource.com/redhat">Red Hat</a> and now belongs to the JBoss division. Fuse ESB is contained in the current road map and will continue to be supported. It will be integrated into the JBoss Enterprise SOA Platform and completely &quot;open sourced&quot; - just like the also acquired BPM solution Polymita. There is still a long way towards a unified suite, since the <a href="http://www.redhat.com/promo/jboss_integration_week/">integration</a> of FuseSource and Polymita will still take a few months, and with JBoss ESB, Switchyard and Fuse ESB now three ESB products need to be merged into one. Here, other open source vendors have already achieved better results.</p><h2>Talend ESB / Unified Platform</h2><p><a href="http://www.talend.com/products/esb">Talend ESB</a> is part of the suite of Talend. Talend ESB can be used independently or in combination with other components of Talend’s unified platform. All components are open source and freely available. The enterprise version offers additional features and support. The difference to proprietary products is that all the partial components are based on the same code base and the same tooling is used everywhere. The usage of different areas such as ESB, BPM, ETL, MDM, etc. is done fluently - and is not a separate integration project on its own. <br /> All tooling of the Talend suite is built on Eclipse. The familiar &quot;look and feel&quot; and the intuitive use of Eclipse remain. Talend offers a visual designer for all product parts and uses a &quot;zero-coding&quot; approach. This allows an efficient implementation of integration scenarios. Of course, you can still write and integrate custom logic to your project, e.g. via Java classes (POJOs) or different scripting languages. <br /> Like Fuse ESB, Talend ESB is based on several de facto standards in the integration environment such as Apache Camel, Apache CXF, Apache Karaf and Apache Zookeeper. Besides the available connectors for Apache Camel for technologies such as JMS, HTTP or FTP, many other B2B adapters are available, for example for Alfresco, Jasper, SAP, Salesforce or host systems. All 500+ connectors are included by default. One consequence is that Talend’s IDE has higher hardware requirements than its competitors. You should not install Talend on a too weak laptop. Another disadvantage is missing SOA governance features. This is planned for next releases.</p><h2>WSO2 ESB / Platform</h2><p><a href="http://wso2.com/products/enterprise-service-bus">WSO2</a> is a relatively unknown vendor. However, WSO2 provides the entire range of components of a suite including Business Process Server, Business Rules Server, Business Activity Monitor or Governance Registry. The entire WSO2 platform can be installed very easily and offers a lightweight, Eclipse-based development studio. Like Talend and FuseSource, WSO2 also puts primarily open source projects such as Apache Synapse (lightweight ESB), Axis (Web Service Implementation) or ODE (Business Process Engine) into its components. <br /> Besides Talend, WSO2 is the only vendor that offers a full suite that is based on a single code base and a single development environment. Therefore, nothing stands in the way for an iterative development process, beginning with a small couple of features, and by adding more functionality later step-by-step. A weakness is the graphical tooling. It supports all components of the platform, but it is not as intuitive to use as the tooling of its competitors.</p><h2>“Do it yourself” Integration Suite?</h2><p>A warning to the conclusion: The combination of several frameworks or products to build your own custom integration suite is usually unnecessary expensive and leads to many additional pitfalls. Since several solutions already exist, it is strongly discouraged to create one from various pieces. &quot;Glue code&quot; needs to be written, testing and bug fixing have to be done, and there is no specific contact in case of problems. Vendors usually just refer to the other side, i.e. if you try to combine an ESB with a BPM solution of another vendor, which one do you call when you have a problem? So why should you care about all of these problems if other people have already cared, and an entire stack (also open source) is already available?</p><h2>Conclusion</h2><p>There is no silver bullet to solve integration problems. First, a decision must be made whether a framework is sufficient. Be aware that most of the source code must be written by yourself, and tooling and support is scarce. Otherwise, an ESB is the better choice. However, if any additional features of a suite are required at some point later, it would be better to use the ESB of an integration suite from the beginning. This secures sustainability without any problems and additional expense for the combination of multiple products.</p><p>If an ESB or integration suite should be used, it must be decided whether a proprietary or open source product is a better choice. Proprietary solutions provide all possible features and strong support. However, this also leads to higher costs and a perceived higher complexity. Contrary, open source solutions score with lower cost, ease of use and flexibility. Once this issue is settled, a shortlist can be created to evaluate the alternatives in detail. It is strongly recommended to perform a proof of concept before making a final decision. Ensure that your team will implement this prototype (from the first installation to final deployment and monitoring), and not just the consultants of the vendor. Your team will have to install the product in the future alone and implement the integration problems independently of any consultants which may not be available.</p><h2>About the Author</h2><p><strong><img src="http://www.infoq.com/resource/articles/ESB-Integration/en/resources/Kai_Waehner.jpg;jsessionid=7797493C3D138742AB80BF5056A01C26" vspace="3" hspace="3" align="left" alt="" _href="img://Kai_Waehner.jpg" _p="true" />Kai W&auml;hner</strong> is a Principal Consultant at Talend. His focus is in the areas of Java EE, SOA, Cloud Computing, BPM, Big Data, and Enterprise Architecture Management. Please give feedback via email (kontakt@kai-waehner.de), Twitter (@KaiWaehner) or social network (LinkedIn / Xing).</p><div class="clearer-space"></div><br><br><br><br><br><br></body></html>