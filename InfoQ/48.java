<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Haskell Gets iOS Support, Several language and Performance Improvements</h3><p>GHC 7.8.1 was <a href="http://www.reddit.com/r/programming/comments/22m6yf/ghc_781_released/">recently released</a>, bringing several improvements to the Haskell ecosystem. Haskell can now be compiled for iOS, and sports new features such as Closed Type Families, Roles, Overloaded Lists, Pattern Synonyms as well as several performance improvements.</p>
<p>Haskell can be <a href="https://ghc.haskell.org/trac/ghc/wiki/Building/CrossCompiling/iOS">compiled for iOS via clang</a>. This supports development using XCode 5. Due to the lack of cross-platform GUI libraries in Haskell, for now you need to develop the GUI separately in objectiveC and invoke Haskell functions from your GUI code. While this support was <a href="http://www.reddit.com/r/haskell/comments/1lboh4/announcing_ghc_ios">announced around 7 months back</a>, this is the first major GHC release to include this support.</p>
<p>Note that Template Haskell is not available on iOS yet.</p>
<p>The cross-platform compilation story has also improved in general. For example, dynamic linking is supported better. GHCi (interactive) now uses the system dynamic linker by default, instead of the built-in static linker. With GHC, you can use a new compilation flag &quot;--dynamic-too&quot;, to emit both static and dynamic object files at the same time. (by default GHC still uses static linking).</p>
<p>Some other features introduced in this release -</p>
<ul> 
 <li><a href="http://www.haskell.org/ghc/docs/7.8.1/html/users_guide/type-families.html#closed-type-families">Closed Type Families</a> - type families are used for overloading of data types. A closed family type has all of its equations defined in one place and cannot be extended - this is useful to avoid consequences not intended by the original developer.</li> 
 <li><a href="http://www.haskell.org/ghc/docs/7.8.1/html/users_guide/roles.html">Roles</a> - to eliminate type unsafe definitions when using <a href="http://www.haskell.org/ghc/docs/7.8.1/html/users_guide/deriving.html#generalized-newtype-deriving">GeneralizedNewTypeDeriving</a></li> 
 <li><a href="http://www.haskell.org/ghc/docs/7.8.1/html/users_guide/type-class-extensions.html#overloaded-lists">Overloaded Lists</a> - Sugar to use list notations for construction of structures such as Set, Map, IntMap, Vector, Text and Array</li> 
 <li><a href="http://www.haskell.org/ghc/docs/7.8.1/html/users_guide/syntax-extns.html#pattern-synonyms">Pattern Synonyms</a></li> 
 <li>Typeable is now poly-kinded, making Typeable1, Typeable2, etc. obsolete and deprecated.</li> 
 <li>Brand new I/O manager that scales linearly upto 32 cores</li> 
 <li>Several improvements to Template Haskell, such as support for Roles, annotation pragmas, &quot;Typed Template Haskell expressions&quot;</li> 
 <li>Parallel mode for make</li> 
 <li>Improved solver for type naturals (performance improvement)</li> 
</ul>
<p>A potentially breaking change coming in the next release (7.10) is that <a href="http://www.haskell.org/haskellwiki/Functor-Applicative-Monad_Proposal">Applicative will be a super-class of Monad</a>. To help ease the transition, the current version of GHC will emit a warning if - a type is an instance of Monad but not Applicative, MonadPlus but not Alternative, and when a local function named join, &lt;*&gt; or pure is defined.</p>
<p>There are also several other changes - you can refer the <a href="http://www.haskell.org/ghc/docs/7.8.1/html/users_guide/release-7-8-1.html">release notes</a> for the full list.</p>
<p>Note that the <a href="http://www.haskell.org/platform/">Haskell Platform</a>, which bundles GHC and tools to work with Haskell, has not yet been updated to use the latest version of GHC.&nbsp;</p><br><br><br><br><br><br></body></html>