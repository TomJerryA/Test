<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>オブジェクト指向設計の原則と関数型プログラミング</h3><p><a target="_blank" href="http://www.infoq.com/news/2014/03/oo-functional-programming"><em>原文(投稿日：2014/03/20)へのリンク</em></a></p>
<p>オブジェクト指向プログラミングには<a href="http://en.wikipedia.org/wiki/SOLID">SOLID</a>原則のような十分に確立された設計原則が数多くあるが、関数型プログラミングに移った場合、これまでに身に付けた設計スキルを活かす方法を知らない開発者が多い。<a href="http://insightfullogic.com/about/">Richard Warburton</a>は最近のプレゼンテーションでそのように<a href="https://skillsmatter.com/skillscasts/5070-twins-fp-and-oop">述べた</a>。<br /> ・ 同じ問題について<a href="http://blog.ploeh.dk/about.html">Mark Seemann</a>は最近のブログ記事に<a href="http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/">書いた</a>。SOLID原則を突き詰めれば、関数型プログラミングがかなり魅力的に見えてくる境地に達するとのことだ。</p>
<p>Richardはロンドンの<a href="https://java.net/projects/ljc-london-jug/pages/TheLJCJCPCommittee">JCP委員会</a>のメンバーだが、先のプレゼンテーションでSOLID原則を次のように説明している。曰く、オブジェクト指向プログラミングの設計原理の中で十分に確立されているものの一例であり、2000年代初頭に<a href="http://en.wikipedia.org/wiki/Robert_c_martin">Robert C. Martin</a>に見いだされたものであると。また、そのプレゼンテーションでは、5つの原則のそれぞれについて、関数型プログラミング側における同等のもの、あるいは少なくとも関連性がある何かを見つけようとしている。<br /> Richardの経験談によれば、多くの開発者が、これまでに身に付けた設計スキルを活かして関数型の設計を行う方法を知らないが、関数型プログラミングはSOLID原則を実装する際にしばしば役立つことがあるし、関数型の考え方はオブジェクト指向のある重要な側面、すなわちカプセル化を達成するの＝に実際に役立つとのことである。<br /> 悶 Richardの結論は、すべてのSOLID原則は関数型において同等のものがあるということである。既存のデザインパターンを捨てる必要はなく、むしろそれらを改善することができる。パターンをさらに単純・純粋なものにしたり、既存知識の活用方法を単純化したりできるからだ。</p>
<p>Markはソフトウェア・アーキテクトでありフリーランスの技術アドバイザーであるが、彼が自身の経験から見出したことは、SOLID原則から導くことができる設計スタイルによって、関数型プログラミングがかなり魅力的なものになるということだ。<br /> SOLID原則のうち、単一責任の原則（<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a>）とインターフェイス分離の原則（<a href="http://en.wikipedia.org/wiki/Interface_segregation_principle">ISP</a>）の2つを適用すると、単一のメソッドだけを持つ、粒度の細かいインタフェースやクラスがコードベースの中に増えてしまうことになりがちである。<br /> Markの結論は、SOLID原則を繰り返し適用することで、そのような単一のメソッドを持つ小さなクラス群ができてしまうのであれば、その機能はデータを持った振る舞い【訳注：クロージャのこと】としてモデル化することもできるし、その時点でF#のような関数型プログラミング言語に移動する時間なのかもしれないということである。</p><br><br><br><br><br><br></body></html>