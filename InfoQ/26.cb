<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Enfrentando Medos da Entrega Cont√≠nua</h3><p>Com a Entrega Cont&iacute;nua o software &eacute; constru&iacute;do de maneira que pode ser colocado em produ&ccedil;&atilde;o a qualquer momento. Estamos fazendo Entrega Cont&iacute;nua quando:</p>
<ul class="c2 lst-kix_3aq22s244fe5-0 start"> 
 <li>&Eacute; poss&iacute;vel mandar o software para produ&ccedil;&atilde;o em qualquer momento do seu ciclo de vida;</li> 
 <li>Manter essa capacidade de entrega para produ&ccedil;&atilde;o &eacute; prioridade sobre ao trabalho relacionado a novas funcionalidades;</li> 
 <li>Qualquer pessoa pode ter feedback r&aacute;pido e automatizado sobre o quanto seus sistemas est&atilde;o prontos para produ&ccedil;&atilde;o, sempre que uma mudan&ccedil;a acontece;</li> 
 <li>Pode-se enviar qualquer vers&atilde;o do seu software para produ&ccedil;&atilde;o atrav&eacute;s do simples acionamento de um bot&atilde;o.</li> 
</ul>
<p>Na ThoughtWorks usamos uma defini&ccedil;&atilde;o desenvolvida pelo grupo de Entrega Cont&iacute;nua que pode parecer menos assustadora que a muitas ideias que voc&ecirc; j&aacute; viu por a&iacute;. Ela n&atilde;o determina que toda mudan&ccedil;a que consegue passar por verifica&ccedil;&otilde;es automatizadas ir&aacute; realmente para produ&ccedil;&atilde;o. Apenas diz que o software est&aacute; sempre em um estado e que pode ser mandado para produ&ccedil;&atilde;o se voc&ecirc; quiser.</p>
<p>Mas onde est&atilde;o os medos? Vamos examinar alguns deles.</p>
<h2>Medos de cronogramas e andamentos</h2>
<p>Pode ser dif&iacute;cil para o pessoal de neg&oacute;cios entender parte do trabalho inicial em &quot;entregabilidade&quot;, mas esse esfor&ccedil;o gera uma m&eacute;trica de neg&oacute;cio bem diferente e f&aacute;cil de entender - a verdadeira completude de funcionalidades.</p>
<p>A Entrega Cont&iacute;nua tem uma defini&ccedil;&atilde;o precisa de pronto: &quot;uma funcionalidade est&aacute; pronta apenas no momento em que est&aacute; entregando valor para seus usu&aacute;rios&quot;. Para que uma funcionalidade entregue valor, precisa ser lan&ccedil;ada. Em produ&ccedil;&atilde;o, ela n&atilde;o precisa apenas funcionar; &eacute; preciso oferecer desempenho suficiente, al&eacute;m de seguran&ccedil;a e confiabilidade para servir a seus usu&aacute;rios. Se n&atilde;o forem tratados adequadamente cada um desses requisitos, em algum momento uma funcionalidade j&aacute; presente precisar&aacute; ser jogada fora e reescrita. Por isso falamos que &quot;mudan&ccedil;as n&atilde;o lan&ccedil;adas em produ&ccedil;&atilde;o s&atilde;o um risco; mudan&ccedil;as lan&ccedil;adas entregam valor.&quot;</p>
<p>Se seu projeto n&atilde;o est&aacute; sendo avaliado atrav&eacute;s dessa defini&ccedil;&atilde;o de pronto, ent&atilde;o em algum lugar entre pronto e &quot;realmente pronto&quot;, ser&aacute; preciso cruzar a &quot;reta final&quot;. O problema com a reta final &eacute; que raramente sabemos quanto tempo levar&aacute; para ser cruzada. Se foram entregues 100 funcionalidades at&eacute; agora, pode-se ter uma boa ideia da velocidade de desenvolvimento. Mas isso n&atilde;o lhe diz nada a respeito do tempo que tomar&aacute; o processo final de an&aacute;lise de qualidade, as verifica&ccedil;&otilde;es de seguran&ccedil;a e os testes de desempenho. J&aacute; se est&aacute; sendo feita a Entrega Cont&iacute;nua, essa reta final &eacute; cruzada frequentemente (e com mudan&ccedil;as pequenas e mais seguras). Assim h&aacute; uma estimativa muito melhor de quanto tempo ser&aacute; necess&aacute;rio e tamb&eacute;m de como o processo pode ser melhorado.</p>
<div id="lowerFullwidthVCR"></div>
<p>Esse exerc&iacute;cio &eacute; uma aplica&ccedil;&atilde;o do princ&iacute;pio &quot;se d&oacute;i fa&ccedil;a mais vezes; leve a dor adiante.&quot; Isso pode parecer n&atilde;o-intuitivo, mas &eacute; bem parecido com exerc&iacute;cios f&iacute;sicos. &Eacute; doloroso no momento em que se come&ccedil;a, mas assim que a atividade se torna corriqueira, estamos prontos para o pr&oacute;ximo n&iacute;vel. Quais &quot;m&uacute;sculos&quot; de Entrega Cont&iacute;nua s&atilde;o necess&aacute;rios desenvolver? Ritmo e consist&ecirc;ncia.</p>
<p>Um ritmo forte significa a reta final sendo conclu&iacute;da com mais frequ&ecirc;ncia, e a consist&ecirc;ncia garante resultado parecido para cada tentativa de se cruzar a reta final. A melhor forma de se conseguir consist&ecirc;ncia &eacute; atrav&eacute;s de automa&ccedil;&atilde;o. Testes de integra&ccedil;&atilde;o, deployment e auditoria automatizados, assim como o rastreamento de mudan&ccedil;as, s&atilde;o todos importantes aspectos para a Entrega Cont&iacute;nua. Implementar essas pr&aacute;ticas, incluindo um mecanismo de feedback para desenvolvedores, bem como relat&oacute;rios com o objetivo de manter os envolvidos informados, ir&aacute; resultar em redu&ccedil;&otilde;es significativas de erros humanos, de falhas de comunica&ccedil;&atilde;o e de tempo gasto esperando por uma pessoa espec&iacute;fica. O resultado ser&aacute; uma &quot;reta final&quot; confi&aacute;vel e eficiente.</p>
<p>Pode-se escolher manter as mudan&ccedil;as fora de produ&ccedil;&atilde;o por raz&otilde;es de neg&oacute;cio, mas aqui vai um detalhe importante: voc&ecirc; pode dizer que est&aacute; assumindo o risco de atrasar o feedback recebido dos usu&aacute;rios por raz&otilde;es do neg&oacute;cio, ao inv&eacute;s de ser for&ccedil;ado a assumir esse risco puramente por motivos t&eacute;cnicos.</p>
<h2>Medos de feedback incompleto</h2>
<p>Empresas podem acreditar que n&atilde;o podem fazer Entrega Cont&iacute;nua a menos que sejam substitu&iacute;dos todos os testes manuais por uma su&iacute;te de testes totalmente automatizada. Isso n&atilde;o &eacute; verdade. A Entrega Cont&iacute;nua requer feedback r&aacute;pido e automatizado sobre quanto est&aacute; pronto um sistema para produ&ccedil;&atilde;o, e que se possa enviar para produ&ccedil;&atilde;o ao simples acionamento de um bot&atilde;o. Isso significa que o objetivo &eacute; automatizar &quot;quase tudo&quot;, de forma que se tenha feedback mais r&aacute;pido e mais prote&ccedil;&atilde;o contra erros humanos. Mas esse objetivo pode ser sim alcan&ccedil;ado de forma incremental.</p>
<p>Al&eacute;m dos benef&iacute;cios &oacute;bvios relacionados a confiabilidade e rapidez, a automa&ccedil;&atilde;o gera outro efeito colateral muito positivo - a padroniza&ccedil;&atilde;o. Isso porque &eacute; imposs&iacute;vel automatizar um processo ad hoc. De in&iacute;cio, a &uacute;nica coisa que realmente precisa ser automatizada &eacute; um sistema para rastrear e reportar progresso atrav&eacute;s das fases do processo de entrega.</p>
<p>Um est&aacute;gio intermedi&aacute;rio v&aacute;lido na jornada da Entrega Cont&iacute;nua &eacute; um processo que ainda cont&eacute;m muitos passos manuais, mas tais passos precisam estar padronizados e vis&iacute;veis para todo o time. A aus&ecirc;ncia do l&iacute;der de QA ou do administrador de sistemas n&atilde;o deve quebrar o processo. Uma vez nesse est&aacute;gio, pode-se incrementalmente automatizar as partes que garantem o maior benef&iacute;cio. Uma boa recomenda&ccedil;&atilde;o &eacute; automatizar aquilo que gera feedback mais r&aacute;pido para os desenvolvedores na ocorr&ecirc;ncia dos problemas mais comuns. Depois disso v&ecirc;m as atividades com as maiores chances de erros humanos. Por fim, temos os mecanismos para fornecer aos desenvolvedores feedback adicional em problemas n&atilde;o t&atilde;o frequentes.</p>
<p>Padronizar e automatizar esses processos gera um elegante sistema de freios e contrapesos para o desenvolvimento &aacute;gil. M&eacute;todos &aacute;geis s&atilde;o adapt&aacute;veis e orientados a pessoas, para maximizar a habilidade em responder &agrave;s mudan&ccedil;as de neg&oacute;cio. A Entrega Cont&iacute;nua cria uma valida&ccedil;&atilde;o preditiva e orientada a processos para tais mudan&ccedil;as. Dessa forma pode-se saber consistentemente quais verifica&ccedil;&otilde;es de qualidade foram feitas antes de uma mudan&ccedil;a ir para produ&ccedil;&atilde;o, e quase sempre ter uma boa ideia de quanto tempo levar&aacute; para algo chegar l&aacute; (tanto por ter feito a mesma mudan&ccedil;a da mesma forma em outros ambientes, como pela experi&ecirc;ncia acumulada de tudo que j&aacute; enviado para produ&ccedil;&atilde;o anteriormente).</p>
<h2>Medos da agenda da equipe de opera&ccedil;&otilde;es</h2>
<p>Operar uma aplica&ccedil;&atilde;o pode ser um trabalho implac&aacute;vel. Outros pap&eacute;is podem trazer a sensa&ccedil;&atilde;o ruim de &quot;correria&quot; quando precisam trabalhar horas extras para fazer algo cruzar a reta final, mas a equipe de opera&ccedil;&otilde;es pode vivenciar esses momentos desconfort&aacute;veis a qualquer momento em que uma instabilidade acontece. Deles &eacute; esperado trabalhar noites e finais de semana, j&aacute; que agendamentos s&atilde;o planejados para minimizar o tempo fora do ar durante o hor&aacute;rio comercial.</p>
<p>Por&eacute;m, isso tamb&eacute;m acontece porque a equipe fica de plant&atilde;o e &eacute; acionada quando a aplica&ccedil;&atilde;o cai por motivos n&atilde;o previstos. Quando falamos &quot;se d&oacute;i, fa&ccedil;a mais vezes&quot; para o time de opera&ccedil;&otilde;es, eles n&atilde;o t&ecirc;m raz&atilde;o para penalizar a si mesmos ainda mais, a n&atilde;o ser que estejam convencidos que isso aumentar&aacute; a estabilidade. A ideia &eacute; diminuir a possibilidade de grandes dores pontuais (ex.: dois dias sem dormir por um problema cr&iacute;tico), por dores pequenas e frequentes dores, acontecendo no expediente normal.</p>
<p>Mas h&aacute; existem raz&otilde;es para o time de opera&ccedil;&otilde;es ficar esperan&ccedil;oso. &quot;Levar a dor adiante&quot; pode tamb&eacute;m ser interpretado como &quot;compartilhar a dor&quot;. Como o time priorizou a entregabilidade e a prontid&atilde;o para produ&ccedil;&atilde;o, ao inv&eacute;s de novas funcionalidades, os desenvolvedores e analistas de qualidade estar&atilde;o dispon&iacute;veis para ajudar a equipe de opera&ccedil;&otilde;es a resolver problemas dif&iacute;ceis.</p>
<p>&Eacute; por isso que a Entrega Cont&iacute;nua &eacute; associada t&atilde;o firmemente &agrave; cultura de DevOps, que promove a colabora&ccedil;&atilde;o mais pr&oacute;xima entre todos os pap&eacute;is envolvidos na entrega de uma mudan&ccedil;a (especialmente desenvolvedores, QAs, e opera&ccedil;&otilde;es).</p>
<p>Algumas vezes isso significa desenvolvedores sendo escalados para ficar de plant&atilde;o em empresas, onde isso anteriormente acontecia somente para o pessoal de opera&ccedil;&otilde;es. No m&iacute;nimo, isso significa que desenvolvedores e analistas de qualidade podem colaborar em coisas que ir&atilde;o simplificar a vida da equipe de opera&ccedil;&otilde;es, como monitoramento mais efetivo e deployments mais r&aacute;pidos.</p>
<p>Estudos t&ecirc;m mostrado que essa din&acirc;mica de colabora&ccedil;&atilde;o est&aacute; causando grandes mudan&ccedil;as nas opera&ccedil;&otilde;es. Os benef&iacute;cios tamb&eacute;m t&ecirc;m efeito acumulativo, porque essas melhorias est&atilde;o liberando o tempo da equipe de opera&ccedil;&otilde;es, que est&aacute; conseguindo fazer mudan&ccedil;as ben&eacute;ficas mais profundas. Com isso, sa&iacute;mos de uma perspectiva reativa de manuten&ccedil;&atilde;o para estrat&eacute;gias de preven&ccedil;&atilde;o.</p>
<p>Estudos indicam que a cultura de DevOps, necess&aacute;ria para que entrega cont&iacute;nua aconte&ccedil;a, resulta em:</p>
<ul class="c2 lst-kix_jmohelg8aq16-0 start"> 
 <li>Deployments mais frequentes;</li> 
 <li>Mudan&ccedil;as que levam menos tempo entre a concep&ccedil;&atilde;o e a produ&ccedil;&atilde;o;</li> 
 <li>Menor quantidade de falhas na implementa&ccedil;&atilde;o de mudan&ccedil;as;</li> 
 <li>Menos tempo gasto na recupera&ccedil;&atilde;o de falhas;</li> 
 <li>Mais tempo gasto em atividades relacionadas a melhorias de produtividade, como automa&ccedil;&atilde;o de tarefas repetitivas, melhorias de infraestrutura e forma&ccedil;&atilde;o da equipe;</li> 
 <li>Menos tempo &quot;apagando inc&ecirc;ndios&quot; em suporte, comunica&ccedil;&atilde;o (reuni&otilde;es, emails e planejamento de releases), gest&atilde;o de infraestrutura e deployment de mudan&ccedil;as.</li> 
</ul>
<p>Esses resultados podem parecer inacredit&aacute;veis inicialmente. Como pode um time lan&ccedil;ar um produto em produ&ccedil;&atilde;o mais frequentemente e ainda assim gastar menos tempo em planejamento dos lan&ccedil;amentos e processos de deployment?</p>
<p>O planejamento de releases, na verdade, &eacute; simples em times que fazem Entrega Cont&iacute;nua. A Entrega Cont&iacute;nua objetiva garantir que o produto &eacute; sempre &quot;lan&ccedil;&aacute;vel&quot;, o que significa que enviar para produ&ccedil;&atilde;o &eacute; sempre uma decis&atilde;o de neg&oacute;cio.</p>
<p>Um ritmo regular (uma vez por dia, por exemplo) e t&eacute;cnicas que permitem decidir sobre o lan&ccedil;amento de cada funcionalidade independentemente, como as &quot;feature toggles&quot; (que permitem ativar uma funcionalidade para apenas uma parcela de usu&aacute;rios ou mesmo desativ&aacute;-la em caso de defeitos), torna tudo ainda mais f&aacute;cil. A reuni&atilde;o de lan&ccedil;amento trata-se, dessa forma, de apenas de responder &agrave; quest&atilde;o &quot;Quais dessas funcionalidades queremos em produ&ccedil;&atilde;o hoje?&quot;.</p>
<h2>Conclus&otilde;es</h2>
<p>A Entrega Cont&iacute;nua abre op&ccedil;&otilde;es que podem melhorar drasticamente a qualidade, reduzir falhas em produ&ccedil;&atilde;o e evitar deployments na madrugada, al&eacute;m de permitir que a &aacute;rea de neg&oacute;cios se adapte rapidamente para atingir seus objetivos.</p>
<p>Mesmo sem ter discutido aqui v&aacute;rias as t&eacute;cnicas avan&ccedil;adas, esperamos ao menos ter conseguido mostrar que implementar a Entrega Cont&iacute;nua n&atilde;o deve ser uma proposta assustadora. A Entrega Cont&iacute;nua n&atilde;o &eacute; programa&ccedil;&atilde;o &quot;orientada a gambiarras&quot;; n&atilde;o se deve ter medo pois se trata de um processo disciplinado e ben&eacute;fico.</p>
<h2>Sobre os autores</h2>
<p>Jefferson Gir&atilde;o, Max Lincoln e Rafael Magrin s&atilde;o desenvolvedores na ThoughtWorks Brasil.</p><br><br><br><br><br><br></body></html>