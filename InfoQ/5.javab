<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Exploring the ENTIRE DevOps Toolchain for (Cloud) Teams</h3><p><i>Cloud computing is more than just fast self-service of virtual infrastructure. Developers and admins are looking for ways to provision and manage at scale. This InfoQ article is part of a <a href="http://www.infoq.com/automation-in-the-cloud-and-management-at-scale/">series focused on automation tools and ideas</a> for maintaining dynamic pools of compute resources. You can subscribe to notifications about new articles in the series <a href="http://www.infoq.com/feed/Automation-in-the-Cloud-and-Management-at-Scale">here</a>.</i></p>
<p>&nbsp;</p>
<p>DevOps awareness is reaching a critical mass. Technology conferences are littered with DevOps sessions, it has overtaken “cloud” as the topic de-jour in technical journals (irony noted!), and <a href="http://www.ca.com/us/news/press-releases/na/2013/devops-driving-20-percent-faster-timetomarket-for-new-services-global-it-study-reveals.aspx">surveys are showing</a> that DevOps adoption is real.</p>
<p>However, when assessing technology that empowers a DevOps transformation, it’s easy to focus in on the headline capabilities (“configuration management!”) and miss out on the bigger picture. <b>How can teams shipping cloud (or on-premises) applications use the full suite of DevOps technologies to simplify delivery and management at scale?</b></p>
<p>To be sure, a DevOps mindset requires a new way of thinking in IT <a href="http://blog.ingineering.it/post/72964480807/empathy-the-essence-of-devops">where there is empathy</a> for other teams within the organization, not just for end users. Developers and operations staff <a href="http://redmonk.com/dberkholz/2014/05/07/the-interface-from-dev-to-ops-isnt-going-away-its-rotating/">take on responsibility for their domain</a> in ALL running environments.</p>
<p>Teams pursue shared objectives and capture the data they need to identify where improvement is needed. Waste, bottlenecks, and inefficiencies are ruthlessly hunted down and dealt with. Without a proper investment in the cultural aspects, a DevOps initiative will achieve, at best, some isolated success.</p>
<div id="lowerFullwidthVCR"></div>
<p>Nonetheless, without some key enabling technologies, organizations will fail to achieve the desired increase in throughput and struggle to manage a growing infrastructure footprint. Although the individual technologies seem to change on a daily basis, they can be categorized in the following way:</p>
<ul> 
 <li><b>Collaboration technologies.</b> Help teams work together more easily, regardless of location.<img align="right" _p="true" _href="img://7Fig1.png" alt="" src="http://www.infoq.com/resource/articles/devops-toolchain/en/resources/7Fig1.png" /></li> 
 <li><b>Planning technologies. </b>Provide transparency to stakeholders.</li> 
 <li><b>Issue tracking technologies. </b>Increase responsiveness and visibility.</li> 
 <li><b>Monitoring technologies.</b> Clear, shared responsibility for relevant parts of service health.</li> 
 <li><b>Configuration management technologies. </b>Enforcing desired state and consistency at scale.</li> 
 <li><b>Source control.</b> Accessible, controlled means for storing key assets.</li> 
 <li><b>Development environment technologies. </b>Accelerating development by reducing setup time and inconsistencies.</li> 
 <li><b>Continuous integration technologies.</b> Instant feedback by merging code regularly.</li> 
 <li><b>Deployment technologies.</b> Tools for building out environments and regularly updating systems.</li> 
</ul>
<p>In concert, these sets of technologies support ongoing DevOps efforts by delivery efficiency through transparency and automation.</p>
<p>Let’s take a look at each of these categories in greater depth, and name some specific technologies that apply.</p>
<h2>Collaboration</h2>
<p>When you hear “collaboration” at your organization, does “more meetings” jump into your mind? That doesn’t have to be the case. The goal is to have rapid, action-oriented communication across teams so that waiting is reduced, knowledge is shared, and there are fewer last minute emergencies. Multiple tools can facilitate this, but be careful not to use the wrong tool for the wrong purpose.</p>
<p><b>Dealing with an outage or a crisis? </b>Bring diverse groups together in tools like <a href="https://campfirenow.com/">Campfire</a>, <a href="https://slack.com/">Slack</a>, or <a href="http://www.irc.org/">IRC</a>. By having a consistent place to go when something needs quick, collective attention, you focus on the task at hand and NOT trying to tell everyone where to go! When outside parties need to be engaged, look at web conferencing tools like GoToMeeting. <b>Need to make a quick decision? </b>Instant messaging solutions like Skype and Lync fit the bill. Just don’t forget to record the decision in a persistent, visible location. Follow the <a href="http://scottberkun.com/yearwithoutpants/">lead of the team at WordPress</a> and others and use tools like blogs and wikis to capture decisions in a searchable way. <b>Looking to keep a pulse on what’s going on?</b> Cross-team awareness and empathy are huge factors in sustained DevOps success, and team chat rooms are a fantastic way to observe and engage. IRC and Campfire create a sense of community, even for distributed teams that never “see” each other. Team leaders can listen in and see what’s being accomplished, and even get an early warning to emerging issues.</p>
<p>Collaboration is at the heart of DevOps, so take a long look at what tools you’re giving your team to quickly engage each other.</p>
<h2>Planning</h2>
<p>Shared goals matter. Teams that plan together towards a common goal have a better understanding of dependencies, can “see” the bottlenecks before they emerge, and work through any conflicting priorities. Whether using something resource oriented like Microsoft Project, or a Kanban board technology like <a href="https://trello.com/">Trello</a>, it’s important to leverage living assets, not static plans. In Agile, there’s a focus breaking down objectives into manageable tasks that get completed relatively quickly. Static plans that are refreshed weekly and sent out via email are not the best way to go. Instead, shared planning tools make it easy to see each other’s progress in real time, and do cross-team tasks in a collaborative way.</p>
<h2>Issue Tracking</h2>
<p>Do you use one system for collecting user feedback, and another to assign related work to the appropriate team? Stop that! For development and operations to work together with minimal friction, it’s important to use the same tools and not waste time copying information around.</p>
<p>There are mature tools like <a href="https://www.atlassian.com/software/jira">Jira</a> and <a href="http://www.zendesk.com/">ZenDesk</a>, and new offerings like <a href="http://www.visualstudio.com/products/what-is-visual-studio-online-vs">Visual Studio Online</a> from Microsoft. All your teams should be in the same issue tracking tool, with the same context, and taking shared responsibility for customer satisfaction.</p>
<h2>Monitoring</h2>
<p>Can DevOps success hinge on how you approach system monitoring? If done poorly, it will certainly increase the tension between the very teams that DevOps tries to bring together. This is where developer empathy for operation staff is critical. Are developers building the solution with their customer (operations) in mind? Do they understand the production infrastructure and what operations staff must do to maintain a high quality of service on the application?</p>
<p>Developers: add thoughtful instrumentation to your cloud applications and emits meaningful information for operators to use when deciding if there’s a problem. Capture business events so that other stakeholders can track higher level events and make better decisions. Operation staff: invest in open source tools like <a href="http://graphite.readthedocs.org/en/latest/overview.html">Graphite</a> or <a href="http://logstash.net/">Logstash</a> to collect and store logs, and tools like <a href="http://rashidkpc.github.io/Kibana/">Kibana</a> to make sense of the data and have a better sense of the overall system health.</p>
<p>A well-designed monitoring solution means that operators aren’t getting randomly paged, developers aren’t stuck troubleshooting opaque issues, and cloud environments can expand and contract without raising false alarms.</p>
<h2>Configuration Management</h2>
<p>This is what many people equate with the idea of DevOps. Manage cloud server consistency at scale using automated configuration enforcement. Treat infrastructure as code that can be provisioned and configured in a repeatable way. Infrastructure may refer to everything from development environments to a fleet of production cloud servers. The idea is to avoid the configuration drift that makes it so difficult for developers and system administrators to reconcile why an application works in one environment (or server), and not another.</p>
<p>Mature options abound in this category. Stalwarts like <a href="http://puppetlabs.com/">Puppet</a>, <a href="http://www.getchef.com/chef/">Chef</a>, and <a href="http://cfengine.com/">CFEngine</a> provide both open source and commercial solutions for configuring Windows and Linux machines at scale on-premises or in the cloud. Whether using a centralized master server that stores a declarative representation of the desired machine state, or a decentralized solution where servers rely only on the local agent to apply configuration state, both Chef and Puppet change how you think about maintaining infrastructure.</p>
<p>A newer crop of tools have popped up in this space as well. <a href="http://www.ansible.com/home">Ansible</a> uses an agent-less approach and relies on SSH to automate configuration of Linux servers. <a href="http://www.saltstack.com/">Salt</a> also shuns the agent model and focuses on fast, push-based updates to Windows and Linux servers. Microsoft’s even getting into this game with <a href="http://technet.microsoft.com/en-us/library/dn249912.aspx">PowerShell Desired State Configuration</a>. This new platform is designed to make it easier to keep Windows servers in a consistent state.</p>
<p>Regardless of which platform you choose – and perform due diligence to see which fits your organization best – configuration management is a vital way that operations staff can help accelerate and standardize the development experience.</p>
<h2>Source Control</h2>
<p>Why is source control a contributing factor to DevOps success? First off, infrastructure configurations now become a controlled asset that developers and operators alike can contribute to and pull from. Second, when you use technologies like Microsoft <a href="http://msdn.microsoft.com/en-us/library/ff637362.aspx">Team Foundation Server</a>, <a href="http://en.wikipedia.org/wiki/Concurrent_Versions_System">CVS</a>, or <a href="http://www.git-scm.com/">Git</a>, you commit to an environment that many other automated components can access. <b>Need to quickly deploy a branch of your cloud application so that the marketing team can review it?</b> That’s simple if you’ve got the source code in a modern repository that a deployment tool can access. <b>Trying to figure out why a new set of cloud servers has stopped behaving as expected?</b> Go to the source code repository, look at the check in history, and compare the previous configuration to the current one.</p>
<p>A strong source control strategy – coupled with configuration management tools – moves you towards treating infrastructure as code and greatly reduces the time wasted tracking down anomalies. By relying on source control for infrastructure configurations, you have confidence that what you tested is what got deployed, and you can easily trace the history of changes.</p>
<h2>Development Environments</h2>
<p>“It worked on my machine!” How often is this the response of development OR operations staff when a system falls flat after deployment? This is prone to happening when developers and system administrators aren’t working in mirrored environments. One way to resolve this is to ensure that <b>everyone</b> use standardized images for application development and configuration testing. New tools like <a href="http://www.vagrantup.com/">Vagrant</a> make it extremely easy to leverage a single workflow for building complex virtual environments with a <a href="http://docs.vagrantup.com/v2/providers/index.html">multitude of different providers</a>. With a single command and a (source-controlled!) manifest, users can spin up and configure virtual machines in <a href="https://github.com/mitchellh/vagrant-aws">AWS</a>, VMWare, VirtualBox, Hyper-V, Docker, and more. Teams can version their base “boxes” in <a href="https://vagrantcloud.com/">a shared location</a> and ensure that everyone is always using the same representation of key environments.</p>
<p>What about scenarios where you have contract employees or simply need new team members to be up and running as quickly as possible? A new crop of browser-based development suites makes it quick and easy to build and deploy cloud applications without requiring anything on the local machine. Products like <a href="https://c9.io/">Cloud 9 IDE</a> and <a href="https://codenvy.com/">Codenvy</a> give developers nearly everything they need to develop source-controlled applications that are destined for cloud endpoints.</p>
<p>Users expect cloud applications to be built quickly, and the right tools can ensure that development teams can start working immediately with production-quality setups.</p>
<h2>Continuous Integration</h2>
<p>With continuous integration, teams are merging developer code many times per day. This agile approach prevents last minute integration problems that plague traditional waterfall projects. Continuous build tools are often coupled with automated test suites that verify code quality before passing the build.</p>
<p>Teams have a diverse set of options for doing continuous integration for cloud applications. Run technologies like <a href="http://www.jetbrains.com/teamcity/">TeamCity</a> to constantly build .NET, Ruby, and Java applications and even <a href="http://www.jetbrains.com/teamcity/features/amazon_ec2.html">host build agents</a> on platforms like Amazon EC2. Like TeamCity, hosted solutions like <a href="https://travis-ci.com/">TravisCI</a> have integrations with source code repos like GitHub and team collaboration tools like Campfire. Some cloud platforms like CloudBees <a href="http://www.cloudbees.com/jenkins">bake continuous integration tools</a> directly into their product offering.</p>
<h2>Deployment</h2>
<p>Ideally, deployments are boring. In a successful DevOps environment, application deployments are frequent, predictable, and reliable. <a href="http://martinfowler.com/bliki/ContinuousDelivery.html">Continuous <b>delivery</b></a> means that applications can be released to production any time you want. Continuous <b>deployment </b>means that every change goes immediately to production. Regardless of which one you embrace, the goal is to accelerate deployment frequency while establishing consistency.</p>
<p>Some continuous integration tools also do deployments, but you’ll also find specialized tools that focus on taking built code and publishing it. Octopus is a tool for automating the deployment of .NET applications to on-premises or cloud (AWS and Microsoft Azure) environments. Deployment tools like <a href="http://octopusdeploy.com/">Octopus</a> or the open source <a href="http://www.thoughtworks.com/products/go-continuous-delivery">ThoughtWorks Go</a> include rich traceability, clear audit trails, and the option to do broad or targeted deployments.</p>
<p>Consider additional tools that standardize deployments. For instance, Packer lets you create templates for (cloud) platforms from a single image. Why does this matter? Imagine creating <a href="http://martinfowler.com/bliki/ImmutableServer.html">immutable servers</a> that NEVER get patched or re-configured. After each build, create a new gold image that reflects the current representation of the application. Use Packer to convert that gold image into templates that can run in VMWare, VirtualBox, Digital Ocean, Amazon EC2, Google Compute Engine, and more. Then, simply replace existing server instances with the new gold image template and be assured of consistency across environments.</p>
<p>Deployment tools bring DevOps to life. Successfully implementing a consistent deployment pipeline requires close collaboration between developers and operations staff, and these tools let each party focus on what they do best.</p>
<h2>Summary</h2>
<p>Are there other ways to categorize the DevOps toolchain besides the categories I’ve listed here? Absolutely. Nevertheless, it’s key to take a wide look at the pool of technologies and thoughtfully consider which can help your team achieve their goal of efficiently building apps and managing them at scale. DevOps isn’t about developers learning how to manipulate hardware, or operations staff learning how to code. The tools we’ve looked at in this article help cloud developers and operations staff reduce waste, and accelerate delivery through standardization, automation, and transparency.</p>
<p>Thoughts? Add them to the comments below!</p>
<h2>About the Author</h2>
<p><strong><img vspace="3" hspace="3" align="left" _p="true" _href="img://Richard-Seroter.jpg" alt="" src="http://www.infoq.com/resource/articles/devops-toolchain/en/resources/Richard-Seroter.jpg" />Richard Seroter</strong> is the director of product management for cloud computing leader CenturyLink, a Microsoft MVP, trainer, speaker, and author of multiple books on application integration strategies. Richard maintains a <a href="http://seroter.wordpress.com/">regularly updated blog</a> on topics of architecture and solution design and can be found on Twitter as <a href="https://twitter.com/#!/rseroter">@rseroter</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><i>Cloud computing is more than just fast self-service of virtual infrastructure. Developers and admins are looking for ways to provision and manage at scale. This InfoQ article is part of a <a href="http://www.infoq.com/automation-in-the-cloud-and-management-at-scale/">series focused on automation tools and ideas</a> for maintaining dynamic pools of compute resources. You can subscribe to notifications about new articles in the series <a href="http://www.infoq.com/feed/Automation-in-the-Cloud-and-Management-at-Scale">here</a>.</i></p><br><br><br><br><br><br></body></html>