<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>数据库持续交付</h3><h2>快速变化的世界，敏捷、DevOps和自动化</h2>
<p>业务需求是变革最显著的驱动力，事倍功半、快速交付是成功的行业先锋与其它公司的区别。</p>
<p>如果竞争对手交付的特性比你更快、质量更高，你最终将失去市场份额。“<a href="http://www.dbmaestro.com/products-solutions/agile-team-collaboration">敏捷开发</a>”的诞生源于快速变化的需求，以有限的资源，应对不断变化的需求，产出有保证的最佳质量。</p>
<p>你再无法等待6个月后的版本；瀑布方法的大版本概念已经过时了。</p>
<p>技术公司和IT部门期待的是敏捷。</p>
<p>接下来就是开发与运维的自然连接，因此诞生了“<a href="http://www.dbmaestro.com/2013/11/devops-for-database-a-win-win-approach">DevOps</a>”。</p>
<p>要高效地掌握敏捷Spring开发和实践DevOps，你必须实施部署和过程的自动化。否则部署和发布就需要手动的步骤和过程，无法保证可重复的准确性，容易出现人为错误，也无法以较高的频率处理。</p>
<div id="lowerFullwidthVCR"></div>
<p><img style="float: right" src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519003.png" _href="img://null" _p="true" alt="" />持续集成、持续交付和持续部署是常用的原则和实践，用来结构化处理自动化过程，为软件开发、构建、测试和发布过程中的参与者建立基本规则。</p>
<p>这些并不是新原则，但它们正在获得关注和采纳，证明其价值，就像若干年前的敏捷开发一样。</p>
<p>作为一套原则和实践，持续集成、持续交付和持续部署并不能“一码通吃”。明白每个公司都有自己独特的挑战，这非常重要，这些实践应该进行相应调整，以适应组织结构和文化过程。</p>
<div style="clear:both"></div>
<h3>持续集成</h3>
<p>持续集成的目的是简化开发，避免集成问题。</p>
<p><img style="float: right" src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519004.png" _href="img://null" _p="true" alt="" />这个目标通常需要构建服务器的帮助。这些服务器从版本控制库获取变更代码，自动构建并运行单元测试验证变更，确保为开发者提供及时反馈。单元测试可能会重复运行，甚至在每次提交变更（签入）后运行，从而防止或者及时提醒开发者，变更的代码可能影响了其它代码或者无法通过测试。</p>
<p>除了执行代码为中心的单元测试，集成测试或应用程序级别的回归测试有助于确保代码的完整性和质量水平。</p>
<div style="clear:both"></div>
<p><strong>集成问题的快速反馈，自动化测试的质量保障，有助于高度可视化整体开发过程、节省问题定位时间、节省整体开发和集成时间，以及确保更高的质量。</strong></p>
<h3>持续交付</h3>
<p>持续交付是持续集成的下一个自动化步骤。为了努力变得更高效、精益和更敏捷，我们开始计划和确保每一个变更都是“可发布的”，从而确保我们始终有一个可测试的版本用于部署。</p>
<p>应该实现变更自动在不同的生命周期阶段中移动，整个过程看起来就像下面这张图：</p>
<p>（点击查看大图）</p>
<p><a href="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519005.png"> <img src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519005.png" width="600" _href="img://null" _p="true" alt="" /></a></p>
<p>开发时提交变更--&gt;构建部署包--&gt;运行单元测试--&gt;变更移到测试和后续阶段环境--&gt;运行验收测试。</p>
<p>如果有失败，我们将得到自动的问题提醒，重新返回到开发，开始新的循环。</p>
<p>一旦过程完成，一个经过完整测试的应用程序就可以轻点一下按钮发布到生产环境中了。产品的实际部署一般是人工进行，然后重新运行回归测试。</p>
<p>由于所有变更都已经过测试和验证，部署也已经在前面的生命周期阶段测试过，因此部署到实际生产环境中就变得容易很多，并且显著降低了风险。</p>
<p>遵循持续交付实践，我们将始终有可发布的版本，因此我们可以基于商务决策和上市时间等要求按时发布。</p>
<h3>持续部署</h3>
<p>下一步是持续部署，持续部署将变更自动推到产品环境（区别于持续交付），然后在那运行最后的测试集。</p>
<p><img style="float: right" src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519006.png" _href="img://null" _p="true" alt="" />在SaaS类型的应用或产品（如Facebook，Amazon等）中运用持续部署非常有意义，因为公司可以将部分流量转到新特性上，做A/B测试，新老版本并列运行，评估新变更，更有信心地进行总体度量和管理变更。</p>
<p>持续部署也许有风险，因为我们使用同意按钮消除了人的因素，并且我们要记住，即使上述情况下是有道理的，但从业务的视角它并不总是有意义的。（也许我错了，我很难想像银行的一名开发人员，没有经过同意，就部署变更到生产环境。）</p>
<div style="clear:both"></div>
<h2>衡量持续过程的成功</h2>
<p>持续过程带来的成功通常非常明确，主要关注这些领域：</p>
<ol> 
 <li>更快的变更——能够更快反应</li> 
 <li>更少的变更回退——更高的代码质量，更短的上市周期</li> 
 <li>更多稳定版本——对最终用户来说缺陷更少</li> 
 <li>开发和运维间更好地合作（DevOps...）</li> 
</ol>
<p>通过将“一切”自动化，并将测试、重点更新和过程移到“上游”，我们看到更好的服务、更高的客户满意度和更好的盈亏底线。</p>
<h2>安全的数据库持续交付</h2>
<p>数据库部署是非常棘手的；与其它软件组件，如代码和编译过的代码不同，数据库不是文件集合。数据库是我们最有价值资产的容器，包含了我们必须保留的业务数据。它包括了应用的数据，客户交易等。为了促进数据库变更，需要开发临时代码，处理数据库Schema结构（表结构）、数据库代码（过程、函数等）以及应用程序使用的数据（元数据、查找内容或者参数表）的脚本。</p>
<p>通过将数据库对象变更脚本提交到传统版本控制库中实现自动化，这种方法的用处是非常有限的，也缺少灵活性并与数据库本身失去了关联。同时它也可能是不真实的，由于变更冲突容易导致丢失目标环境的更新。对于自动化来说，使用“比较并同步”的工具是有风险的。这两个概念并不兼容，因为它们彼此并不知道对方。</p>
<p>一个简单的自动化过程基于构建一次，多次部署（Build Once Deploy Many system），它看起来是这样的：</p>
<p>提交变更到版本控制库--&gt;构建--&gt;部署测试--&gt;运行单元测试--&gt;部署到下一级别--&gt;运行更多测试--&gt;...--&gt;部署到UAT--&gt;测试--&gt;部署到生产环境</p>
<p>一个构建步骤，对应多个部署和测试步骤，这就是构建一次，多次部署。</p>
<p>尽管它对原生代码的二进制文件有效，但部署数据库却并非如此，因为你不能简单地复制和粘贴，而是要将老版本转换到新版本，同时保持业务数据还存在数据库中。</p>
<p>有很多这样的场景，脚本创建之后，在它被运行之前，目标环境发生了变化。举个例子，在这个过程之外，数据库打了一个关键补丁，或者另一个团队在并行工作。每种情况都打破了预期结果，导致构建一次，部署多次的方法中产生了问题。</p>
<p>（点击查看大图）</p>
<p><a href="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519007.png"> <img src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519007.png" width="600" _href="img://null" _p="true" alt="" /></a></p>
<p>［数据库部署，构建一次，部署多次失败］</p>
<h3数据库自动化——构建并按需部署> 
 <p>使用构建和按需部署方法升级数据库，将会按需生成从当前版本升级到下一版本的数据库变更脚本，确保目标状态是最新的，并且是经过验证和考虑的。 </p>
 <p>成功升级到预产品（Pre-production）后，脚本被保存起来重用，因此生产环境升级是基于在预产品上测试过的脚本。 </p>
 <p>（点击查看大图） </p>
 <p><a href="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519008.png"> <img src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519008.png" width="600" _href="img://null" _p="true" alt="" /></a></p> 
 <p>［构建和按需部署］ </p>
 <h3>自动化的信心</h3> 
 <p>如果对自动化没有信心，就没人会使用它。由于缺少不同的环境间数据库代码冲突的提醒，DBA和开发者很难依赖简单的比较并同步方法生成的脚本。 </p>
 <p>通过签入代码时进行提醒，以文件为基础的版本控制多年前就已经解决了沙盒、分支并行开发中遇到的同样问题。如果发生冲突，开发者将收到警告，他/她提交的代码自从签出后已经被别人修改。开发者在本地电脑合并变更，然后再签入合并的代码。 </p>
 <p>而数据库则不同，它并没有保存在开发者的电脑上；代码存在于各种环境中，任何有权限的人都能修改它。当生成变更脚本时，应该使用基线方法（与现代的，以文件为基础的版本工具使用的是相同的方法）解决合并问题。 </p>
 <p><img src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519009.png" width="600" _href="img://null" _p="true" alt="" /></p> 
 <p>基线影响分析 </p>
 <h2>检查盒子</h2> 
 <p>当我们实施持续交付时，认识到数据库持续过程需要健壮的数据库版本控制、安全的自动化部署和清晰的工作过程，并且过程的自动化将帮助我们定义解决方案的类型。 </p>
 <p>以下是这些挑战的一些例子，<a href="http://www.dbmaestro.com/">DBmaestro</a>有助于解决这些问题。 </p>
 <ol> 
  <li>强化数据库版本控制。这能保证所有数据库变更遵循一个强制的文档过程，这样我们就始终知道谁在什么时间，因为什么原因做了什么改变。这是后续过程的基础。 <p><img src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519010.png" width="550" _href="img://null" _p="true" alt="" /></p> </li>
  <li>使用基于任务的开发过程，有助于将每一个引入的变更与变更请求、故障单或工作项关联起来。后期的部署可以依靠这些信息来帮助决定哪些变更需要发布、哪些即将发布以及哪些要推迟。 </li>
  <li>基线明确的部署，连接到版本控制工具，分析引入的变更有哪些影响，帮助我们安全地确定应该部署哪些变更。更重要的是，它让我们明确应该取消哪些变更，才不会推翻其他团队部署的重要变更，或者覆盖补丁程序到生产环境中。<p><img src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519011.png" width="550" _href="img://null" _p="true" alt="" /></p> </li>
  <li>自动化接口（Web-service，命令行API等等）是创建一个和谐过程所必须的，将数据变更的处理作为完整过程的一部分，与Java或.Net代码变更的交付紧密结合。能够自动升起红色标记和“停止这一行”是持续过程必不可少的步骤。我们想要的最后一件事是可以随意将变更部署到生产环境，因此当有什么东西不满足我们的安全假定时，应该能够得到警告，这将直接决定我们能够沉睡还是做噩梦。</li>
 </ol> 
 <h2>总结</h2> 
 <p>在各种持续过程中，数据库是一个真正的挑战。对自动化来说，数据库对象变更脚本放入传统版本控制工具或使用“比较并同步”工具，这是效率低下或者风险很高的事情，因为两个概念彼此互不相识。在持续交付和DevOps中，需要更好的解决方案。 </p>
 <p>数据库持续交付需要遵循变更管理的成熟的最佳实践，强制在数据库上执行单一的变更过程，当融入其他发布过程时，能够处理部署冲突，消除代码覆盖、交叉更新和代码合并的风险， </p>
 <h2>关于作者</h2> 
 <p><img style="float: left; margin-right: 10px" src="http://infoqstatic.com/resource/articles/Database-Continuous-Delivery/zh/resources/0519012.png" _href="img://null" _p="true" alt="" /><strong>Yaniv Yehuda</strong>是<a href="http://www.dbmaestro.com/">DBmaestro</a>公司的共同创始人和CTO，该公司是一家企业软件开发公司，专注于数据库开发和部署技术。Yaniv同时还是Extreme Technology公司的共同创始人和开发经理，该公司是服务于以色列市场的IT服务提供商。Yaniv曾是以色列国防军计算机中心Mamram的上尉，在那里他担任软件工程经理。 </p>
 <div style="clear:both"></div> 
 <p><b>原文链接：</b><a href="http://www.infoq.com/articles/Database-Continuous-Delivery">Database Continuous Delivery</a> </p>
 <div class="clear"></div> 
 <div class="random_links"> 
  <ul> 
   <li><a><span class="gray_color">领域</span></a></li> 
   <li><a class="f_taxonomy" href="/cn/architecture-design" name="architecture-design" id="6,821"><b>架构 &amp; 设计</b></a></li> 
   <li><a><span class="gray_color">专栏</span></a></li> 
   <li><a class="f_taxonomy" href="/cn/Database" name="Database" id="1,159">数据库</a></li> 
   <li><a class="f_taxonomy" href="/cn/cloud-computing" name="cloud-computing" id="3,857">云计算</a></li> 
   <li><a class="f_taxonomy" href="/cn/Continuous_Delivery" name="Continuous_Delivery" id="6,766">持续交付</a></li> 
   <li><a class="f_taxonomy" href="/cn/agile_techniques" name="agile_techniques" id="782">敏捷技术</a></li> 
   <li><a class="f_taxonomy" href="/cn/Devops" name="Devops" id="6,555">DevOps</a></li> 
   <li><a class="f_taxonomy" href="/cn/continuous_integration" name="continuous_integration" id="1,086">持续集成</a></li> 
   <li><a class="f_taxonomy" href="/cn/agile" name="agile" id="743">敏捷</a></li> 
   <li><a class="f_taxonomy" href="/cn/Database_Management" name="Database_Management" id="3,876">数据库管理</a></li> 
  </ul> 
 </div> 
 <div class="related_sponsors relEdRelRes"> 
  <div class="gray_section_related only1 fullWidth"> 
   <div class="related_editorial recommended only1"> 
    <p class="title">相关内容</p> 
    <div id="editorial_links" class="links"> 
     <div class="clear"></div> 
    </div> 
   </div> 
  </div> 
  <div class="clear"></div> 
  <div class="related_research"></div> 
 </div> 
 <script type="text/javascript">
    $.ajax({
        url: "/api/recommendationlinks.action",
        contentType: "application/x-www-form-urlencoded; charset=utf-8",
        type: 'POST',
        data: {"topicIds": "171,2186,1008,351,-1000,-1000", "title": "数据库持续交付", "contentPath": "/articles/Database-Continuous-Delivery", "language": "zh"},
        success: displayRelatedEditorial,
        async: false
    });
    
    function displayRelatedEditorial(data) {
        var trackingCode = "?utm_source=infoq&utm_medium=related_content_link&utm_campaign=relatedContent_articles_clk";
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                if (i === 5) {
                    break;
                }
                var link = $('<h3 title="" class="' + data[i].contentType + '">\n\
                                    <a title="" href="' + data[i].url + trackingCode +
                        '">' + data[i].title + '</a></h3>');
                $('#editorial_links').append(link);
            }
            $('.gray_section_related > .related_editorial.recommended').css('display', 'block');
        }
    }
</script> 
 <script type="text/javascript">
    $.ajax({
        type: "POST",
        url: '/widgets/researchHorizontalWidget.action',
        contentType: "application/x-www-form-urlencoded; charset=utf-8",
        data: {
            "path": 'Database-Continuous-Delivery',
            "uriMapping": 'articles'
        },
        success: displayRelatedResearch,
        error: function() {
            // fail silently
        },
        async: false
    });
    
    function displayRelatedResearch(data) {
        if (InfoQConstants.language != 'en') {
            return;
        }
        if (data.matchedList && data.matchedList.length > 0) {
            $('.related_research').append('<p class="title">相关调查</p>')
            for (var i = 0; i < data.matchedList.length; i++) {
                var link = $('<a class="rel_results" title="" href="' + data.matchedList[i][0] +
                        '?utm_source=infoqresearch&utm_campaign=rr-content">' +
                        '<img border="0" alt="" src="' + data.matchedList[i][2] + '">' +
                        data.matchedList[i][1] +
                        '</a>');
                $('.related_research').append(link);
            }
            if (data.latestList) {
                for (var i = 0; i < data.latestList.length; i++) {
                    var link = $('<a class="rel_results" title="" href="' + data.latestList[i][0] +
                            '?utm_source=infoqresearch&utm_campaign=rr-content">' +
                            '<img border="0" alt="" src="' + data.latestList[i][2] + '">' +
                            data.latestList[i][1] +
                            '</a>');
                    $('.related_research').append(link);
                }
            }
            $('.related_research').show();
        }
    }
</script> 
 <script type="text/javascript">
    
        $(function() {
        	var grayBox = $('.gray_section_related');
            var recommendedColumn = $('.gray_section_related > .related_editorial.recommended');
            var recommendedExists = $(recommendedColumn).css('display') === 'block';
            var researchRow = $('.related_research');
            var researchExists = $(researchRow).css('display') === 'block';

            if (recommendedExists || researchExists) {
                $('.related_sponsors.relEdRelRes').show(); // show the big related box
            }

            // in case all three available, leave now
            if (recommendedExists) {
            	$(grayBox).show(); // show the gray box for vcr and recommendations
                return;
            }
        });
</script> 
 <div class="clear"></div> 
 <div class="clear"></div> 
 <script type="text/javascript">

    var JSi18n = JSi18n || {}; // define only if not already defined
    JSi18n.re='Re:';
    JSi18n.errorSubject='Please enter a subject.';
    JSi18n.errorBody='You can not post a blank message. Please type your message and try again.';
    JSi18n.errorInvalidLinks='您的回复中包含无效的链接，请检查后重试';
    JSi18n.stopWatchText='Stop Watching Thread';
    JSi18n.startWatchText='Watch Thread';
    JSi18n.timeExpiredMessage='已超出允许的5分钟编辑时长，我们为给您带来的不便深表抱歉。';
    JSi18n.repostButtonFormat='重新发送 ($m 剩余)';
    JSi18n.timeExpiredButton='超时';
    JSi18n.sessionExpiredMessage='您的会话已超时，请登录后重新提交';
    JSi18n.editLinkFormat='编辑 ($m 分钟剩余)';
    JSi18n.enter_subject='请输入主题';
    JSi18n.enter_message='信息';
    JSi18n.content_datetime_format='yyyy年M月d日';

var forumID=1;
var threadID=36397;
var ctxPath= '';
var postAddress= ctxPath + '/forum/post!post.action?language=' + 'zh';
var repostAddress= ctxPath + '/forum/repost.action?language=' + 'zh';
var postAddWatches= ctxPath + '/forum/watches!add.action';
var postRemoveWatches= ctxPath + '/forum/watches!remove.action';
var loggedIn=false;
var threadWatched=false;


var forumNotificationDefault=false;

var commentEditPeriod=5;
</script> 
 <script type="text/javascript" src="/dwr/interface/ForumNotifications.js"></script> 
 <script type="text/javascript" src="http://infoqstatic.com/scripts/ui/jquery.autosize.js"></script> 
 <script type="text/javascript" src="http://infoqstatic.com/scripts/date.js"></script> 
 <div class="comment_here"> 
  <div id="postFormDeck"> 
   <div id="deckText"> 
    <h2>您好，朋友！</h2> 您需要 
    <a href="/reginit.action">注册一个InfoQ账号</a> 或者 
    <a class="login" href="javascript:;">登录</a> 才能进行评论。在您完成注册后还需要进行一些设置。
    <br /> 
    <div id="getMost">
     <h2>获得来自InfoQ的更多体验。</h2>
    </div> 
   </div> 
  </div> 
  <a id="theCommentsSection"></a> 
  <h3>告诉我们您的想法</h3> 
  <form onsubmit="return false;" target="" enctype="multipart/form-data" method="post" action="" name=""> 
   <div class="area" name="comments"> 
    <input type="text" id="subject" value="" /> 
    <textarea id="body"></textarea> 
   </div> 
   <div class="clear"></div> 
   <p class="allowed">允许的HTML标签: a,b,br,blockquote,i,li,pre,u,ul,p</p> 
   <input type="checkbox" class="checkReply emailMe" name="emailMe" /> 
   <span class="tocheck">当有人回复此评论时请E-mail通知我</span> 
   <div class="clear"></div> 
   <input type="button" value="发送信息" class="submit" id="subButton" /> 
  </form> 
  <div class="clear"></div> 
 </div> 
 <div class="comments"> 
  <div class="comments_title">
   社区评论 
   <span id="watch"> <a href="javascript:void(0)" class="watch_thread"></a> </span> 
  </div> 
  <div class="clear"></div> 
 </div> 
 <div class="all_comments"> 
 </div> 
 <!-- overlay --> 
 <div id="overlay_comments"> 
  <a href="javascript:;" class="close_comment" title="">关闭</a> 
  <h4><strong></strong> by <span id="author"></span> <span id="timepast"></span></h4> 
  <p id="body"></p> 
  <div class="alt"> 
   <span>发布于 <span id="timestamp"></span></span> 
  </div> 
  <div class="clear"></div> 
  <ul class="help_links"> 
   <li><a title="" class="view">查看</a></li> 
   <li><a title="" href="javascript:;" class="reply">回复</a></li> 
   <li><a title="" href="#" class="backtop">回到顶部</a></li> 
  </ul> 
  <div class="clear"></div> 
 </div> 
 <!-- reply box --> 
 <div id="replyPopup" class="popupLoginComments"> 
  <a title="" class="close_login_popup" href="javascript:;">关闭</a> 
  <form onsubmit="return false;" target="" action="" name="tpopup-reply" method="post"> 
   <label class="label_login">主题</label> 
   <input type="text" class="login_text subject" name="subject" /> 
   <label class="label_login"> 您的回复 <a style="float: right; text-decoration: underline; font-weight: normal; color: grey;" href="#" onclick="CommentsHandler.quoteOriginalMessage();return false;"> 引用原消息 </a> </label> 
   <textarea class="commentsReply" name="commentsReply"></textarea> 
   <div class="clear"></div> 
   <p class="error allowed"></p> 
   <div class="clear"></div> 
   <p class="allowed">允许的HTML标签: a,b,br,blockquote,i,li,pre,u,ul,p</p> 
   <input type="checkbox" class="checkReply emailMe" name="emailMe" /> 
   <span class="tocheck">当有人回复此评论时请E-mail通知我</span> 
   <div class="clear"></div> 
   <input type="button" id="submit-reply" name="submit-reply" value="发送信息" /> 
   <input type="reset" class="reset-reply" name="reset-reply" value="取消" /> 
  </form> 
 </div> 
 <!-- edit comment box --> 
 <div id="editCommentPopup" class="popupLoginComments"> 
  <a title="" class="close_login_popup" href="javascript:;">关闭</a> 
  <form onsubmit="return false;" target="" action="" name="tpopup-reply" method="post"> 
   <label class="label_login">主题</label> 
   <input type="text" class="login_text subject" name="subject" /> 
   <label class="label_login">您的回复</label> 
   <textarea class="commentsReply" name="commentsReply"></textarea> 
   <div class="clear"></div> 
   <p class="error allowed"></p> 
   <div class="clear"></div> 
   <p class="allowed">允许的HTML标签: a,b,br,blockquote,i,li,pre,u,ul,p</p> 
   <input type="checkbox" class="checkReply emailMe" name="emailMe" /> 
   <span class="tocheck">当有人回复此评论时请E-mail通知我</span> 
   <div class="clear"></div> 
   <p class="time_expired allowed"></p> 
   <input type="button" id="resubmit-reply" name="submit-reply" value="" /> 
   <input type="reset" class="reset-reply" name="reset-reply" value="取消" /> 
  </form> 
 </div> 
 <!-- notification popup --> 
 <div id="messagePopup" class="popupLoginComments"> 
  <a title="" class="close_login_popup" href="javascript:;">关闭</a> 
  <div class="clear"></div> 
  <p class="allowed"></p> 
  <div class="clear"></div> 
  <input type="reset" class="reset-reply" name="reset-reply" value="OK" /> 
 </div> 
 <div id="responseContent"></div> 
 <a id="noOfComments" title="" href="#theCommentsSection" class="comments_like"> <span class="comments_counts"> <span class="nr"> 讨论 </span> </span> </a> 
</h3数据库自动化——构建并按需部署><br><br><br><br><br><br></body></html>