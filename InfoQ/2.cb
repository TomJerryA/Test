<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Chegou a hora para o ALM Lean</h3><p>O uso de software vem se tornando o &quot;toque especial&quot; na inova&ccedil;&atilde;o dos neg&oacute;cios. Os softwares de apoio a processos de neg&oacute;cio est&atilde;o em fase de transi&ccedil;&atilde;o: de algo acess&oacute;rio para algo de import&acirc;ncia cr&iacute;tica (I). A entrega de software, para muitas empresas, &eacute; um processo de neg&oacute;cio cr&iacute;tico que deve ser integrado, mas infelizmente, muitas organiza&ccedil;&otilde;es s&atilde;o mal equipadas para tratar os ciclos de vida de suas aplica&ccedil;&otilde;es como algo de import&acirc;ncia fundamental para o neg&oacute;cio, frequentemente tratando o processo de entrega de software como uma arte obscura praticada por gente estranha (II). Nesse artigo examinaremos as raz&otilde;es pelas quais as empresas precisam adotar o ALM (Application Lifecycle Management) e o que queremos aprender do pensamento Lean para transformar o ALM de uma abordagem inflex&iacute;vel, cara e dogm&aacute;tica para uma mais apta a reduzir desperd&iacute;cios e entregar valor mensur&aacute;vel.</p><h2>As abordagens tradicionais n&atilde;o funcionam</h2><p>Hoje em dia, a gest&atilde;o da entrega de software e da manuten&ccedil;&atilde;o de aplica&ccedil;&otilde;es nas empresas &eacute; feita de uma forma projetizada bastante tradicional. Um projeto &eacute; identificado, os recursos ent&atilde;o s&atilde;o alocados e o trabalho &eacute; feito. O trabalho flui pela linha de produ&ccedil;&atilde;o do desenvolvimento, passando em todo seu caminho pelo levantamento de requisitos, pela an&aacute;lise, desenvolvimento, testes e implanta&ccedil;&atilde;o. Cada &aacute;rea especializada tem seu pr&oacute;prio conjunto de objetivos em que se baseia a gest&atilde;o. Frequentemente, contudo, os projetos parecem bem sucedidos ao fluir pela produ&ccedil;&atilde;o, mas acabam tendo problemas na hora de serem entregues. Dependendo de em quem se acredita, os projetos de qualquer atividade ligada ao desenvolvimento de software fracassam em pelo menos 15 % das vezes e os desafiados representam pelo menos outros 50 % (III). A realidade &eacute; que quanto maior o projeto, maior a chance de fracassar. &Agrave; medida que os desconhecidos e a complexidade aumentam, torna-se muito dif&iacute;cil otimizar um processo que funciona. Conforme o software flui pela cadeia de valor em termos de inova&ccedil;&atilde;o de neg&oacute;cio, a complexidade e os n&iacute;veis de desconhecido aumentam. &Eacute; da natureza da inova&ccedil;&atilde;o ter que lidar com os desconhecidos, o que significa que a abordagem tradicional falha das seguintes maneiras:</p><ul> 
 <li>O planejamento adiantado requer conhecimento adiantado - Ao se deparar com problemas novos, que a equipe nunca enfrentou antes, &eacute; muito dif&iacute;cil criar planos detalhados. Gastar mais tempo para criar planos supostamente melhores n&atilde;o d&aacute; bons resultados; a &uacute;nica forma de criar planos melhores &eacute; fazer o trabalho de fato e ajustar o plano com base na experi&ecirc;ncia.</li> 
 <li>O neg&oacute;cio n&atilde;o necessita de perfei&ccedil;&atilde;o, precisa de a&ccedil;&atilde;o - Processos bem definidos tendem a dar &ecirc;nfase demasiada na completude, sendo dif&iacute;cil deixar requisitos de lado durante o processo para entregar valor mais r&aacute;pido. Neg&oacute;cios modernos d&atilde;o &ecirc;nfase no <em>time-to-market</em> e em entregar algo no lugar de entregar a perfei&ccedil;&atilde;o. O neg&oacute;cio trabalha com vis&atilde;o de curto prazo, em geral medindo o valor trimestralmente, o que &eacute; bastante diferente da entrega de software que pode ser voltada a projetos em termos de anos, em vez de meses.</li> 
</ul><h2>Abordagens de <em>Cloud</em> e <em>mobile</em> tornam os sistemas mais complexos</h2><p>Abordagens tradicionais do desenvolvimento de software tendem a dar enfoque no desenvolvimento customizado. Os softwares totalmente internos da organiza&ccedil;&atilde;o podem ser constru&iacute;dos utilizando linguagens de terceira gera&ccedil;&atilde;o. Mas o desenvolvimento de software moderno &eacute; muito diferente, com o software sendo montado a partir de um conjunto de servi&ccedil;os. O <em>Mobile</em> junta aplica&ccedil;&otilde;es web com aplica&ccedil;&otilde;es locais executando em uma grande variedade de infraestruturas, aumentando, portanto, a complexidade e os riscos. Perde-se controle porque seu software depende de muitas partes que n&atilde;o s&atilde;o gerenciadas por voc&ecirc; nem por ningu&eacute;m conhecido. Assim como ecosistemas na natureza, n&atilde;o se pode gerenci&aacute;-los, pode-se apenas observ&aacute;-los e reagir a eles. Caso seu desenvolvimento de software comece a parecer um ecosistema, a recomenda&ccedil;&atilde;o &eacute;:</p><ul> 
 <li><strong>Enfoque na visibilidade</strong> - Ganhar visibilidade sobre os <em>assets</em>, a estabilidade deles e como s&atilde;o utilizados oferece percep&ccedil;&otilde;es valiosas sobre quais <em>assets</em> testar, qual a ordem de entrega do software e o risco inerente de certos servi&ccedil;os essenciais. Se um servi&ccedil;o possui uma grande quantidade de defeitos conhecidos, &eacute; importante escrever c&oacute;digo defensivo ou pensar em utilizar outro servi&ccedil;o.</li> 
 <li><strong>Gerencie os</strong> <strong>trade-offs</strong><strong> de forma expl&iacute;cita</strong> - No lugar de deixar isoladas as decis&otilde;es dos engenheiros de software sobre quais <em>assets</em> utilizar ou quais servi&ccedil;os conectar, torne a arquitetura um conjunto de <em>assets</em> vis&iacute;vel e gerenci&aacute;vel. As decis&otilde;es sobre comprar, construir e utilizar precisam ser centrais a qualquer atividade de planejamento.</li> 
 <li><strong>Esteja conectado ao ecossistema</strong> - &Eacute; muito f&aacute;cil utilizar um servi&ccedil;o e nunca mais olhar sua fonte para se manter a par do trabalho mais atual, dos defeitos conhecidos, ou das observa&ccedil;&otilde;es feitas pela comunidade. &Eacute; importante n&atilde;o ser apenas um consumidor de um produto, mas tamb&eacute;m um membro ativo de uma comunidade maior. Isso requer que seu processo de desenvolvimento de aplica&ccedil;&atilde;o seja conectado ao processo da comunidade ou do fornecedor.</li> 
</ul><h2>O Agile n&atilde;o &eacute; suficiente</h2><p>Para muitas pessoas, a utiliza&ccedil;&atilde;o de algum m&eacute;todo &aacute;gil resolver&aacute; esses problemas ao criar uma abordagem flex&iacute;vel com enfoque na equipe para entregar valor. H&aacute; alguma verdade nisso (IV); Os m&eacute;todos &aacute;geis oferecem &agrave;s organiza&ccedil;&otilde;es um <em>framework</em> que permite &agrave;s equipes responder &agrave;s mudan&ccedil;as e entregar valor aos seus clientes. Na realidade, a ado&ccedil;&atilde;o do Agile n&atilde;o &eacute; profunda nem larga o suficiente. Muitas equipes ainda t&ecirc;m dificuldades com os conceitos do Agile, com suas pr&aacute;ticas t&atilde;o diferentes das tradicionais com a qual est&atilde;o acostumados. E o Agile no n&iacute;vel de equipe &eacute; fundamentalmente diferente da ado&ccedil;&atilde;o do Agile no n&iacute;vel organizacional, no qual o tamanho, a complexidade e os modelos de governan&ccedil;a dificultam a ado&ccedil;&atilde;o. As empresas podem at&eacute; querer ser &aacute;geis, mas ainda exigem planos detalhados, organizam-se em modelos departamentais e s&atilde;o resistentes &agrave; ideia de entregar software frequentemente. Para muitas empresas, &quot;water-scrum-fall&quot; (uma mistura do m&eacute;todo cascata com scrum) &eacute; a realidade (V). A ado&ccedil;&atilde;o do Agile &eacute; limitada por:</p><ul> 
 <li>O desenvolvimento de software est&aacute; organizado em departamentos especializados - Quebrar a estrutura departamental e descartar modelos organizacionais existentes exige mudan&ccedil;as importantes, o que para muitas organiza&ccedil;&otilde;es centralizadas de entrega de software est&aacute; al&eacute;m da sua capacidade ou mesmo de sua vontade. Alinhar as equipes &aacute;geis &agrave;s &aacute;reas de neg&oacute;cio requer a cria&ccedil;&atilde;o de novas equipes ou ent&atilde;o estruturar a entrega de software de uma forma muito diferente.</li> 
 <li><strong>Os &quot;donos do dinheiro&quot; necessitam de detalhes antes dos projetos come&ccedil;arem</strong> - Ao enfrentar o cl&aacute;ssico dilema de se precisar de conhecimento para planejar e precisar de um plano para obter conhecimento, muitos grupos de entrega de software dependem da an&aacute;lise detalhada de requisitos para determinar o tamanho e o escopo do projeto. Os requisitos frequentemente mudam logo que se come&ccedil;a o desenvolvimento, o que causa um grande atrito entre a equipe &aacute;gil e o plano original.</li> 
 <li><strong>O trabalho costuma ser uma cole&ccedil;&atilde;o de projetos</strong> - O Agile tem como base a ideia de que equipes auto-gerenciadas, motivadas e talentosas podem resolver qualquer problema, desde que sejam empoderadas para tanto. A realidade &eacute; que as pessoas trabalham em diferentes localidades e equipes trabalham em toda sorte de entregas e projetos. O desenvolvimento de software est&aacute; cada vez mais parecido com uma linha de montagem, em que servi&ccedil;os, muitas vezes de terceiros, s&atilde;o agregados. Esses terceiros n&atilde;o podem ser parte da equipe &aacute;gil, pois s&atilde;o de um fornecedor externo, de um projeto de c&oacute;digo livre ou de uma parte diferente da sua pr&oacute;pria organiza&ccedil;&atilde;o.</li> 
</ul><h2>Uma jun&ccedil;&atilde;o de ALM e Lean parece ser a solu&ccedil;&atilde;o...</h2><p>Vimos que a abordagem n&atilde;o pode ser meramente &aacute;gil e que as abordagens tradicionais n&atilde;o funcionam. O que &eacute; necess&aacute;rio &eacute; uma abordagem de entrega de software que apoie a melhoria e ao mesmo tempo n&atilde;o considere o Agile como a &uacute;nica forma de se entregar valor. Tal abordagem deveria levar em conta as melhores pr&aacute;ticas da gest&atilde;o, sem deixar de adapt&aacute;-las dado o ambiente altamente fluido no qual o software est&aacute; sendo entregue ultimamente. Chegou a hora para o Lean ALM, ou seja, a aplica&ccedil;&atilde;o da disciplina da gest&atilde;o &agrave; pratica da entrega de software para adotar o pensamento Lean, uma abordagem com enfoque no aumento do valor e redu&ccedil;&atilde;o dos desperd&iacute;cios. O Lean ALM ir&aacute;:</p><ul> 
 <li><strong>Considerar a disciplina da entrega de software como um processo chave para o neg&oacute;cio</strong> - Para muitas organiza&ccedil;&otilde;es, tomarem ci&ecirc;ncia de que s&atilde;o uma empresa de software, ou que o software est&aacute; se tornando uma pe&ccedil;a chave em seu neg&oacute;cio, &eacute; de extrema import&acirc;ncia. Essa percep&ccedil;&atilde;o exige delas uma abordagem em rela&ccedil;&atilde;o &agrave; entrega de software igual &agrave; de outros processos chave de neg&oacute;cio. N&atilde;o se trata de uma busca por mais recursos financeiros, pois &eacute; comum que esse n&atilde;o seja o problema, mas de uma busca por mudan&ccedil;as na pr&oacute;pria filosofia.</li> 
 <li><strong>Oferecer ferramentas para melhorar a entrega de software</strong> - O Lean possui uma cole&ccedil;&atilde;o de ferramentas para ajudar as pessoas a melhorar seus processos. T&eacute;cnicas como os Cinco Por qu&ecirc;s, o Kanban e Gemba; encorajam os praticantes a explorar seus processos de uma forma diferente (VI). Com essa &quot;melhoria no processo&quot;, como mais uma KPI(<em>Key Performance Index</em>) para muitas empresas, isso n&atilde;o seria algo inteiramente novo. Para muitas empresas, contudo, exceto uma marca&ccedil;&atilde;o no projeto como finalizado, n&atilde;o h&aacute; foco em melhorias mensur&aacute;veis. Ao introduzir t&eacute;cnicas e uma organiza&ccedil;&atilde;o que apoia e ajuda as pessoas a us&aacute;-las, uma organiza&ccedil;&atilde;o Lean deveria sempre estar sempre se melhorando continuamente. Melhorias Lean de processo n&atilde;o d&atilde;o enfoque nos processos, mas sim nas pessoas, ao fornecer t&eacute;cnicas necess&aacute;rias &agrave; entrega de valor e &agrave; redu&ccedil;&atilde;o de desperd&iacute;cios.</li> 
 <li>Visualizar a entrega de software como uma s&eacute;rie de fluxos - No lugar de dar enfoque nas disciplinas, artefatos ou pap&eacute;is, pense na entrega de software como um fluxo, ou uma s&eacute;rie de fluxos. Ao visualizar os fluxos, &eacute; poss&iacute;vel entender como o trabalho se movimenta pelo sistema, identificar problemas relacionados ao tamanho dos lotes, filas e desperd&iacute;cios. Isso significa que a abordagem tradicional, com foco departamental, ou disciplinar, para organizar a entrega de software foi dividida. Disciplinas especializadas ainda existem como parte de um fluxo conectado, n&atilde;o isoladamente.</li> 
 <li>Dar &ecirc;nfase nos resultados - Ter um foco claro nos resultados que fazem sentido para o neg&oacute;cio e para organiza&ccedil;&otilde;es de entrega tem como dire&ccedil;&atilde;o clara. Para muitas organiza&ccedil;&otilde;es, ter um conjunto claro de m&eacute;tricas descrevem n&atilde;o apenas os objetivos para a equipe, mas os resultados desejados. Contudo, muitas cadeias de entrega de software s&atilde;o fragmentadas, com cada grupo tendo suas pr&oacute;prias m&eacute;tricas. O neg&oacute;cio, os analistas de neg&oacute;cio, o desenvolvimento, os testes, operac&otilde;es etc t&ecirc;m todos m&eacute;tricas claras, mas frequentemente contradit&oacute;rias. Talvez, a maior discrep&acirc;ncia esteja entre o desenvolvimento e opera&ccedil;&otilde;es. Opera&ccedil;&otilde;es &eacute; medida por estabilidade, SLAs, mudan&ccedil;as de desenvolvimento, tempo e custo. A tens&atilde;o tem o objetivo de criar acordo entre as partes para entregar software de alta qualidade a um custo apropriado. Infelizmente, devido ao fato dos trade-offs no desenvolvimento serem dif&iacute;ceis para muitas empresas, a qualidade &eacute; a &uacute;nica m&eacute;trica ativa, o que quer dizer que software de alta qualidade &eacute; lan&ccedil;ado, mas frequentemente tarde, pobre em features e caro. O movimento de DevOps, n&atilde;o discutido aqui, emergiu como uma resposta direta a essa tens&atilde;o, levando as empresas a integrar processos, m&eacute;tricas e ferramentas (VII)</li> 
</ul><p>&nbsp;</p><hr /><p>I <a href="http://online.wsj.com/article/SB10001424053111903480904576512250915629460.html">O software est&aacute; consumindo o mundo</a></p><p>II <a href="http://www.cioinsight.com/c/a/Expert-Voices/Scott-Rosenberg-What-Makes-Software-So-Hard/">Um excelente artigo sobre as raz&otilde;es da entrega de software ser t&atilde;o dif&iacute;cil</a></p><p>III O frequentemente citado relat&oacute;rio sobre fracasso nos projetos &eacute; o <a href="http://blog.standishgroup.com/pmresearch">relat&oacute;rio Standish</a></p><p>IV Existem v&aacute;rias fontes que descrevem como o Agile est&aacute; melhorando a entrega de software; um <a href="http://www.google.com/url?q=http%3A%2F%2Fwww.mountaingoatsoftware.com%2Fblog%2Fagile-succeeds-three-times-more-often-than-waterfall&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNF7pU_5WiJgJ-B98oiWpKmqbtmmNA">artigo do Mike Cohn sobre o relat&oacute;rio CHAOS</a> oferece informa&ccedil;&otilde;es excelentes sobre as taxas de sucesso do Agile</p><p>V Cunhei o termo <a href="http://www.infoq.com/br/news/2012/01/water-scrum-fall;jsessionid=E80184680B464609D8A96A6222826412">Water-scrum-fall</a> ao trabalhar na <a href="http://www.forrester.com/">Forrester Research</a>.</p><p>VI Existem muitos &oacute;timos livros e sites sobre Lean, al&eacute;m de excelentes organiza&ccedil;&otilde;es Lean. Um &oacute;timo ponto para come&ccedil;ar &eacute; o site do <a href="http://www.lean.org/">Lean Enterprise Institute</a></p><p>VII Veja mais sobre DevOps no site <a href="http://devops.com/">DevOps.com</a></p><div class="clearer-space"></div></body></html>