<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Acceptance Test-Driven Development (ATDD), passo a passo</h3><p>O Acceptance Test-Driven Development (ATDD), ou &quot;Desenvolvimento Orientado a Testes de Aceita&ccedil;&atilde;o&quot;, &eacute; uma pr&aacute;tica de obten&ccedil;&atilde;o de requisitos de forma colaborativa aplicada por equipes &aacute;geis, onde exemplos concretos e testes automatizados s&atilde;o utilizados para especificar os requisitos, tornando-os mais claros, com o objetivo de criar especifica&ccedil;&otilde;es execut&aacute;veis. Conhe&ccedil;a um passo a passo dessa t&eacute;cnica.</p>
<p><strong>Resumo de 200 caracteres</strong></p>
<p>O Acceptance Test-Driven Development &eacute; uma pr&aacute;tica de obten&ccedil;&atilde;o de requisitos de forma colaborativa aplicada por equipes &aacute;geis, onde exemplos concretos e testes automatizados s&atilde;o utilizados.</p>
<hr />
<p>O <a href="http://scrumology.com/bas-vodde-on-acceptance-test-driven-development-atdd/">Acceptance Test-Driven Development</a> (ATDD), ou &quot;Desenvolvimento Orientado a Testes de Aceita&ccedil;&atilde;o&quot;, &eacute; uma pr&aacute;tica de obten&ccedil;&atilde;o de requisitos de forma colaborativa aplicada por equipes &aacute;geis, onde exemplos concretos e testes automatizados s&atilde;o utilizados para especificar os requisitos, tornando-os mais claros, com o objetivo de criar especifica&ccedil;&otilde;es execut&aacute;veis. Eles s&atilde;o gerados em sess&otilde;es de cria&ccedil;&atilde;o do backlog do produto, com a participa&ccedil;&atilde;o da equipe, Product Owner, al&eacute;m dos demais interessados.</p>
<p><a href="http://www.shino.de/main/about-me/">Markus G&auml;rtner</a>, em seu <a href="http://www.shino.de/2012/07/02/atdd-by-example/">livro</a> &quot;ATDD by Example: A Practical Guide to Acceptance Test-Driven Development&quot;, cita a seguinte declara&ccedil;&atilde;o:</p>
<blockquote> 
 <p>Um analista de qualidade e um programador que colaboram juntos para atingir a meta da equipe, em rela&ccedil;&atilde;o a automa&ccedil;&atilde;o de teste, agregam muito valor quando iniciam a abordagem do ATDD.</p> 
</blockquote>
<div id="lowerFullwidthVCR"></div>
<p>A imagem abaixo representa o ciclo do desenvolvimento orientado a testes de aceita&ccedil;&atilde;o, composto por 4 passos para aplic&aacute;-lo, conforme <a href="http://testobsessed.com/about/">Elisabeth Hendrickson</a>.</p>
<p><img height="317" src="http://www.infoq.com/resource/articles/atdd-passo-a-passo/pt/resources/image01.png" width="400" _href="img://image01.png" _p="true" alt="" /></p>
<p>Traduzido de: <a href="http://testobsessed.com/wordpress/wp-content/uploads/2008/12/atddexample.pdf">http://testobsessed.com/wordpress/wp-content/uploads/2008/12/atddexample.pdf</a></p>
<p>O ATDD &eacute; muito similar ao <a href="http://www.infoq.com/br/articles/relacao-tdd-qualidade">TDD</a>, diferenciando-se deste &uacute;ltimo pelo fato de termos uma colabora&ccedil;&atilde;o maior entre o desenvolvedor, analista de qualidade (<em>tester</em>) e neg&oacute;cio (cliente/partes interessadas). Enquanto o teste unit&aacute;rio est&aacute; intrinsicamente relacionado com o c&oacute;digo, de um &acirc;ngulo do desenvolvedor (vis&atilde;o interna), o teste de aceita&ccedil;&atilde;o est&aacute; voltado ao ponto de vista do usu&aacute;rio, uma vis&atilde;o externa ao sistema.</p>
<p><strong>Aplicando o ATDD</strong></p>
<p>Enquanto <a href="http://www.craiglarman.com/wiki/index.php?title=Craig_Larman">Craig Larman</a> e <a href="http://blog.odd-e.com/basvodde/">Bas Vodde</a>, em seu <a href="http://wiki.robotframework.googlecode.com/hg/publications/ATDD_with_RobotFramework.pdf">artigo</a>, consideram a aplica&ccedil;&atilde;o do ATDD como um fluxo de 3 etapas, ou seja: debater, desenvolver e revisar; Hendrickson incluiu mais um passo: refinar. Portanto, exploraremos os 4 passos de Hendrickson para ficar mais claro e detalhado como o processo funciona.</p>
<p><strong>Debater os Requisitos</strong></p>
<p>As hist&oacute;rias de usu&aacute;rio (<em>user story</em>) s&atilde;o refinadas em um workshop ou em uma reuni&atilde;o de prepara&ccedil;&atilde;o do backlog do produto (<a href="http://www.scrumalliance.org/community/articles/2011/march/how-to-hold-an-effective-backlog-grooming-session">backlog grooming</a>), antes da reuni&atilde;o de planejamento da itera&ccedil;&atilde;o/sprint. Em ambos os casos, os participantes s&atilde;o uma equipe multifuncional, o Product Owner e, algum outro interessado que potencialmente tem mais informa&ccedil;&otilde;es sobre as hist&oacute;rias.</p>
<p>Algumas perguntas devem ser feitas para elencar exemplos de utiliza&ccedil;&atilde;o ou cen&aacute;rios de uso dessas hist&oacute;rias de usu&aacute;rio e, assim, entendermos melhor o que est&aacute; sendo conversado, de tal forma que esses cen&aacute;rios possam ser escritos como testes.</p>
<p>Suponhamos que um poss&iacute;vel comprador entre em um site de e-commerce e ap&oacute;s buscar um produto desejado, ele recebe a mensagem que o produto est&aacute; indispon&iacute;vel. Como o site poder&aacute; ajudar a fidelizar um iminente cliente? Permitindo que o cliente seja avisado quando o produto voltar a ter estoque. Para exemplificar, vamos criar uma hist&oacute;ria de usu&aacute;rio e depois faremos perguntas que poderiam ser feitas durante a reuni&atilde;o.</p>
<p>&quot;Como comprador do site, eu quero ser avisado por email quando um produto voltar a ficar dispon&iacute;vel para compra, assim eu posso adquiri-lo&quot;.</p>
<p>Algumas perguntas que poderiam ser realizadas s&atilde;o as seguintes:</p>
<p>- O usu&aacute;rio deve possuir uma conta no site? Se sim, o que acontece se o usu&aacute;rio n&atilde;o est&aacute; logado no site?</p>
<p>- O que acontece caso o usu&aacute;rio j&aacute; tenha criado um alerta para o mesmo produto?</p>
<p>Ap&oacute;s a obten&ccedil;&atilde;o dessas respostas, existe um entendimento melhor do que o Product Owner espera que o produto fa&ccedil;a ou n&atilde;o. Ent&atilde;o, pode-se come&ccedil;ar a estruturar os testes de aceita&ccedil;&atilde;o em colabora&ccedil;&atilde;o com todos. Fazemos isso em uma linguagem que todos entendam, por exemplo:</p>
<p>- usu&aacute;rio deve ser cadastrado no site; sen&atilde;o estiver, remeta-o para a p&aacute;gina de cadastro;</p>
<p>- usu&aacute;rio dever&aacute; estar logado; sen&atilde;o estiver, solicite o usu&aacute;rio e senha;</p>
<p>- usu&aacute;rio cadastrado e logado dever&aacute; confirmar o alerta para o e-mail que est&aacute; no cadastro.</p>
<p><strong>Refinar os Testes de Aceita&ccedil;&atilde;o</strong></p>
<p>O pr&oacute;ximo passo &eacute; organizar os testes de aceita&ccedil;&atilde;o em um formato requerido pelo framework de automa&ccedil;&atilde;o de testes. Existem diversos frameworks de automa&ccedil;&atilde;o de teste: <a href="http://fit.c2.com/">FIT</a>, <a href="http://fitnesse.org/">FitNesse</a>, <a href="http://cukes.info/">Cucumber</a>, <a href="http://www.concordion.org/">Concordian</a>, <a href="http://robotframework.org/">Robot Framework</a>, <a href="http://rspec.info/">RSpec</a>, <a href="http://jnario.org/">Jnario</a>, entre outros. Para exemplificar, utilizaremos o Cucumber.</p>
<p><img _p="true" _href="img://image2.png" alt="" src="http://www.infoq.com/resource/articles/atdd-passo-a-passo/pt/resources/image2.png" /></p>
<p><strong>Implementar o C&oacute;digo com TDD</strong></p>
<p>O pr&oacute;ximo passo &eacute; implementar a funcionalidade para fazer com que o teste de aceita&ccedil;&atilde;o passe.</p>
<p>E, para tanto, o desenvolvimento deve iniciar pelos testes unit&aacute;rios, incluindo todas as condi&ccedil;&otilde;es propostas para as expectativas existentes. Um exemplo para um cen&aacute;rio &eacute; exibido abaixo.</p>
<p><img _p="true" _href="img://image3.png" alt="" src="http://www.infoq.com/resource/articles/atdd-passo-a-passo/pt/resources/image3.png" /></p>
<p>Depois de codificados todos os testes unit&aacute;rios, eles s&atilde;o executados e passamos a uma fase para ajustar aqueles que est&atilde;o falhando (frameworks de testes unit&aacute;rios sinalizam por meio de &quot;barras de progresso&quot; vermelha e verde (vide imagem abaixo), onde uma barra vermelha &eacute; porque o teste est&aacute; &quot;quebrado&quot; e verde &eacute; quando ele passa com sucesso), partindo ent&atilde;o para a implementa&ccedil;&atilde;o da hist&oacute;ria de usu&aacute;rio.</p>
<p><img _p="true" _href="img://image4.png" alt="" src="http://www.infoq.com/resource/articles/atdd-passo-a-passo/pt/resources/image4.png" /><img _p="true" _href="img://image5.png" alt="" src="http://www.infoq.com/resource/articles/atdd-passo-a-passo/pt/resources/image5.png" /></p>
<p>Dois tipos de testes unit&aacute;rios, o da direita falhou e o da esquerda passou com sucesso</p>
<p><strong>Apresentar os Resultados dos Testes de Aceita&ccedil;&atilde;o</strong></p>
<p>Ap&oacute;s os testes passarem com sucesso, a hist&oacute;ria &eacute; verificada pelo Product Owner, normalmente em uma reuni&atilde;o de Review/Showcase, onde ele poder&aacute; aprov&aacute;-la ou n&atilde;o. O resultado pode levar &agrave; cria&ccedil;&atilde;o de uma nova hist&oacute;ria ou uma altera&ccedil;&atilde;o nos testes existentes, afim de contemplar novos cen&aacute;rios. Outra forma que tamb&eacute;m funciona bem, e n&atilde;o posterga a valida&ccedil;&atilde;o em uma reuni&atilde;o espec&iacute;fica, &eacute; a valida&ccedil;&atilde;o de cada hist&oacute;ria (Review), imediatamente ap&oacute;s ela ser desenvolvida pela equipe, de tal maneira que o Product Owner possa fazer isso com o desenvolvedor ou o par de desenvolvedores que a finalizaram.</p>
<p>Finalmente, encerramos o ciclo do ATDD.</p>
<p><strong>Diferen&ccedil;as entre ATDD e BDD</strong></p>
<p>Agora, o que muito se confunde na comunidade &aacute;gil s&atilde;o as diferen&ccedil;as entre o ATDD e o BDD, pois eles s&atilde;o muito similares na ess&ecirc;ncia.</p>
<p>O <a href="http://www.infoq.com/br/articles/painel-bdd">Behavior-Driven Development</a> (BDD), ou &quot;Desenvolvimento Orientado a Comportamento&quot;, foi concebido por <a href="http://dannorth.net/about/">Dan North</a>, autor do livro &quot;<a href="http://dannorth.net/books/">The RSpec Book - Behavior-Drive Development with RSpec, Cucumber, and Friends</a>&quot;, como uma evolu&ccedil;&atilde;o a algumas quest&otilde;es encontradas no TDD (Test-Driven Development):</p>
<p>- Por onde come&ccedil;ar no processo?</p>
<p>- O que testar e o que n&atilde;o testar?</p>
<p>- O quanto testar de uma s&oacute; vez?</p>
<p>- O que chamamos de testes?</p>
<p>- Como entender o por qu&ecirc; um teste falha?</p>
<p>Ent&atilde;o, North apresentou a seguinte defini&ccedil;&atilde;o:</p>
<blockquote> 
 <p>O BDD &eacute; uma pr&aacute;tica &aacute;gil que permite uma melhor comunica&ccedil;&atilde;o entre desenvolvedores, analistas de qualidade, &aacute;reas de neg&oacute;cio e pessoas n&atilde;o-t&eacute;cnicas, durante um projeto de software, descrevendo um ciclo de itera&ccedil;&otilde;es com sa&iacute;das bem definidas e resultando na entrega de software testado e que funciona.</p> 
</blockquote>
<p>North criou o primeiro framework BDD para Java chamado <a href="http://jbehave.org/">JBehave</a> e depois o RBehave para Ruby, vindo depois a ser integrado no <a href="http://rspec.info/">RSpec</a>.</p>
<p>Segundo <a href="http://janetgregory.ca/about/">Janet Gregory</a>, co-autora do consagrado livro &quot;<a href="http://janetgregory.ca/publications/">Agile Testing</a>&quot;, juntamente com <a href="http://lisacrispin.com/about/">Lisa Crispin</a>, ela declara em seu <a href="http://janetgregory.ca/atdd-vs-bdd-vs-specification-by-example-vs/">artigo</a> &quot;ATDD vs. BDD vs. Specification by Example vs …&quot;, sobre as diferen&ccedil;as entre ATDD, BDD e Especifica&ccedil;&atilde;o por Exemplo:</p>
<blockquote> 
 <p>Ao chamarmos de &quot;BDD&quot;, ou &quot;ATDD&quot;, ou &quot;Especifica&ccedil;&atilde;o por Exemplo&quot;, queremos o mesmo resultado - um entendimento comum compartilhado do que ser&aacute; constru&iacute;do para tentar entregar o que &eacute; certo, da primeira vez. Sabemos que nunca ser&aacute;, mas com menos retrabalho, ficar&aacute; melhor.</p> 
</blockquote>
<p>&nbsp;</p>
<p>Depois, Gregory finaliza:</p>
<blockquote> 
 <p>Continuarei a usar o termo &quot;Acceptance Test Driven Development (ATDD)&quot;, a menos que a ind&uacute;stria decida sobre um vocabul&aacute;rio comum, porque acho que as &aacute;reas de neg&oacute;cio da empresa n&atilde;o s&oacute; entender&atilde;o como dar exemplos, mas tamb&eacute;m compreender&atilde;o quando eu falar sobre os testes de aceita&ccedil;&atilde;o que comprovam a inten&ccedil;&atilde;o da hist&oacute;ria ou funcionalidade. A equipe entender&aacute; suficientemente o escopo para ent&atilde;o iniciar a codifica&ccedil;&atilde;o e os testes.</p> 
</blockquote>
<p><strong>Conclus&otilde;es</strong></p>
<p>A proposta do ATDD &eacute; favorecer uma colabora&ccedil;&atilde;o e comunica&ccedil;&atilde;o maior entre todos os envolvidos no desenvolvimento de um produto, o que resulta em um entendimento mais claro e refinado dos requisitos, possibilitando um acordo entre ambas as partes do que ser&aacute; desenvolvido durante uma itera&ccedil;&atilde;o/sprint. No final, o resultado estar&aacute; alinhado &agrave;s expectativas do cliente.</p>
<h3>Sobre o Autor</h3>
<p>Paulo Rebelo &eacute; Agile Project Manager &amp; Agile/Lean coach no Walmart.com, editor do InfoQ, revisor do Scrum Gathering e integrante do Program Committee do QCon SP. &Eacute; apaixonado em ajudar empresas e profissionais a entregarem software de forma cont&iacute;nua, al&eacute;m de criar e desenvolver equipes &aacute;geis de desenvolvimento.</p><br><br><br><br><br><br></body></html>