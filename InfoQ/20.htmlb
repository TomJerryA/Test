<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>开发者需要了解的WebKit</h3><p><a href="http://paulirish.com/about/">Paul Irish</a>是著名的前端开发工程师，同时他也是Chrome开发者关系团队成员，jQuery团队成员，Modernizr、 Yeoman、CSS3 Please和HTML5 Boilerplate的lead developer。针对大家对WebKit的种种误解，他在自己的博客发表了<a href="http://paulirish.com/">《WebKit for Developers》</a>一文，试图为大家解惑。</p><p>对许多开发者来说，WebKit就像一个黑盒。我们把HTML、CSS、JS和其他一大堆东西丢进去，然后WebKit魔法般的以某种方式把一个看起来不错的网页展现给我们。但事实上，Paul的同事Ilya Grigorik说：</p><blockquote> 
 <p>WebKit才不是个黑盒。它是个白盒。并且，它是个打开的白盒。</p> 
</blockquote><p>所以让我们来花些时间了解这些事儿：</p><ul> 
 <li>什么是WebKit？</li> 
 <li>什么不是WebKit？</li> 
 <li>基于WebKit的浏览器是如何使用WebKit的？</li> 
 <li>为什么又有不同的WebKit？</li> 
</ul><p>现在，特别是Opera宣布将浏览器引擎转换为WebKit之后，我们有很多使用WebKit的浏览器，但是我们很难去界定它们有哪些相同与不同。下面我争取为这个谜团做些解读。而你也将会更懂得判断浏览器的不同，了解如何在正确的地方报告bug，还会了解如何在特定浏览器下高效开发。</p><p><strong>标准Web浏览器组件</strong></p><p>让我们列举一些现代浏览器的组件：</p><ul> 
 <li>HTML、XML、CSS、JavsScript解析器</li> 
 <li>Layout</li> 
 <li>文字和图形渲染</li> 
 <li>图像解码</li> 
 <li>GPU交互</li> 
 <li>网络访问</li> 
 <li>硬件加速</li> 
</ul><p>这里面哪些是WebKit浏览器共享的？差不多只有前两个。其他部分每个WebKit都有各自的实现，所谓的“port”。现在让我们了解一下这是什么意思……</p><p><strong>WebKit Ports是什么？</strong></p><p>在WebKit中有不同的“port”，但是这里允许我来让WebKit hacker，Sencha的工程主管Ariya Hidayat来解释：</p><blockquote> 
 <p>WebKit最常见的参考实现是Apple在Mac OS X上的实现（这也是<a href="http://lists.kde.org/?l=kfm-devel&amp;m=104197092318639&amp;w=2">最早和最原始的WebKit库</a>）。但是你也能猜到，在Mac OS X下，许多不同的接口在很多不同的原生库下被实现，大部分集中在<a href="https://developer.apple.com/technologies/mac/">CoreFoundation</a>。举例来说，如果你定义了一个纯色圆角的按钮，WebKit知道要去哪里，也知道要如何去绘制这个按钮。但是，绘制按钮的工作最终还是会落到<a href="http://developer.apple.com/library/ios/#documentation/CoreGraphics/Reference/CoreGraphics_Framework/_index.html">CoreGraphics</a>去。</p> 
</blockquote><p>上面已经提到，CoreGraphics只是Mac port的实现。不过Mac Chrome用的是<a href="http://www.chromium.org/developers/design-documents/graphics-and-skia">Skia</a>。</p><blockquote> 
 <p>随时间推移，WebKit被“port”（移植）到了各个不同的平台，包括桌面端和移动端。这种做法被称作“WebKit port”。对Windows版Safari来说，Apple通过<a href="http://developer.apple.com/opensource/internet/webkit_sptlib_agree.html">（有限实现的）Windows版本CoreFoundation</a> 来port WebKit。</p> 
</blockquote><p>……不过Windows版本的Safari<a href="http://www.macworld.com/article/1167904/safari_6_available_for_mountain_lion_and_lion_but_not_windows.html">现在已经死掉了</a>。</p><blockquote> 
 <p>除此之外，还有很多很多其它的“port”（<a href="http://trac.webkit.org/wiki#WebKitPorts">参见列表</a>）。Google创建并维护着它的Chromium port。这其实也是一个基于Gtk+的WebKitGtk。诺基亚通过收购Trolltech，维护着以<a href="http://doc.qt.nokia.com/qtwebkit.html">QtWebKit module</a>而闻名的WebKit Qt port。</p> 
</blockquote><p>让我们看看其中一些WebKit ports：</p><ul> 
 <li>Safari 
  <ul> 
   <li>OS X Safari和Windows Safari使用的是不同的port</li> 
   <li>用于OS X Safari的WebKit Nightly以后会渐渐成为一个边缘版本</li> 
  </ul> </li> 
 <li>Mobile Safari 
  <ul> 
   <li>在一个私有代码分支上维护，不过代码现在正在<a href="http://trac.webkit.org/changeset/142373">合并到主干</a></li> 
   <li>iOS Chrome（使用了Apple的WebView，不过后面的部分有很多不同）</li> 
  </ul> </li> 
 <li>Chrome（Chromium） 
  <ul> 
   <li>安卓Chrome（直接使用Chromium port）</li> 
   <li>Chromium也驱动了<a href="http://browser.yandex.ru/">Yandex Browser</a>、 <a href="http://se.360.cn/">360 Browser</a>、<a href="http://ie.sogou.com/">Sogou Browser</a>，很快，还会有Opera。</li> 
  </ul> </li> 
 <li><a href="http://trac.webkit.org/wiki#WebKitPorts">还有很多</a>： Amazon Silk、Dolphin、Blackberry、QtWebKit、WebKitGTK+、The EFL port (Tizen)、wxWebKit、WebKitWinCE……</li> 
</ul><p>不同的port专注于不同的领域。Mac的port注意力集中在浏览器和操作系统的分割上，允许把ObjectC和C++绑定并嵌入原生应用的渲染。Chromium专注在浏览器上。QtWebKit的port在他的跨平台GUI应用架构上给apps提供运行时环境或者渲染引擎。</p><p><strong>WebKit浏览器共享了那些东西？</strong></p><p>首先，让我们来看看这些WebKit ports的共同之处：</p><p>（作者注：很有意思，这些内容我写了很多次，每次Chrome团队成员都给我纠正错误，正如你看到的……）</p><ol> 
 <li>“WebKit在使用相同的方式解析WebKit。”——实际上，Chrome是唯一支持多线程HTML解析的port。</li> 
 <li>“一旦解析完成，DOM树也会构建成相同的样子。”——实际上Shadow DOM只有在Chromium才被开启。所以DOM的构造也是不同的。自定义元素也是如此。</li> 
 <li>“WebKit为每个人创建了‘window’对象和‘document’对象。”——是的，尽管它暴露出的属性和构造函数可以通过<a href="https://trac.webkit.org/wiki/FeatureFlags">feature flags</a>来控制。</li> 
 <li>“CSS解析都是相同的。将CSS解析为对象模型是个相当标准的过程。”——不过，Chrome只支持-webkit-前缀，而Apple和其他的ports支持遗留的-khtml-和-apple-前缀。</li> 
 <li>“布局定位？这些是基本生计问题啊”—— 尽管Sub-pixel layout和saturated layout算法是WebKit的一部分，不过各个port的实现效果还是有很多不同。</li> 
</ol><p>所以，情况很复杂。</p><p>就像Flickr和GitHub通过flag标识来实现自己的功能一样，WebKit也有相同处理。这允许各个port自行决定是否启用<a href="https://trac.webkit.org/wiki/FeatureFlags">WebKit编译特性标签</a>的各种功能。通过<a href="http://peter.sh/experiments/chromium-command-line-switches/3">命令行开关</a>，或者通过<a href="http://blogs.adobe.com/cantrell/archives/2012/07/all-about-chrome-flags.html">about:flags</a>还可以控制是否通过运行时标识来展示功能特性。</p><p>好，现在让我们再尝试一次搞清楚WebKit究竟有哪些相同…</p><p><strong>每个WebKit port有哪些共同之处</strong></p><ul> 
 <li>DOM、winow、document</li> 
 <li>CSS对象模型</li> 
 <li>CSS解析，键盘事件处理</li> 
 <li>HTML解析和DOM构建</li> 
 <li>所有的布局和定位</li> 
 <li>Chrome开发工具和WebKit检查器的UI与检查器</li> 
 <li>contenteditable、pushState、文件API、大多数SVG、CSS Transform math、Web Audio API、localStorage等功能</li> 
 <li><a href="http://trac.webkit.org/browser/trunk/Source/WebCore">很多其他功能与特性</a></li> 
</ul><p>这些领域现在有点儿模糊，让我们尝试把事情弄得更清楚一点。</p><p><strong>什么是WebKit port们并没有共享的：</strong></p><ul> 
 <li>GPU相关技术 
  <ul> 
   <li>3D转换</li> 
   <li>WebGL</li> 
   <li>视频解码</li> 
  </ul> </li> 
 <li>将2D图像绘制到屏幕 
  <ul> 
   <li>解析方式</li> 
   <li>SVG和CSS渐变绘制</li> 
  </ul> </li> 
 <li>文字绘制和断字</li> 
 <li>网络层（SPDY、预渲染、WebSocket传输）</li> 
 <li>JavaScript引擎 
  <ul> 
   <li>JavaScriptCore 在WebKit repo中。V8和JavaScriptCore被绑定在WebKit中。</li> 
  </ul> </li> 
 <li>表单控制器的渲染</li> 
 <li>&lt;video&gt;和&lt;audio&gt;的元素表现和解码实现</li> 
 <li>图像解码</li> 
 <li>页面导航 前进/后退 
  <ul> 
   <li>pushState()的导航部分</li> 
  </ul> </li> 
 <li>SSL功能，比如Strict Transport Security和Public Key Pins</li> 
</ul><p>让我们谈谈其中的2D图像部分： 根据port的不同，我们使用完全不同的库来处理图像到屏幕的绘制过程：</p><p><img src="https://lh6.googleusercontent.com/--WfQB-Tr1sQ/TfHQSfY38FI/AAAAAAAAB8s/DSNAn8F71i8/s800/graphicscontext.png" alt="" _href="https://lh6.googleusercontent.com/--WfQB-Tr1sQ/TfHQSfY38FI/AAAAAAAAB8s/DSNAn8F71i8/s800/graphicscontext.png" _p="true" /></p><p>更宏观一点来看，一个最近刚添加的功能：CSS.supports()在除了没有css3特性检测功能的win和wincairo这两个port之外，在其它所有port中都<a href="http://trac.webkit.org/changeset/142739">可用</a>。</p><p>现在到了卖弄学问的技术时间。上面讲的内容其实并不正确。事实上那是WebCore被共享的东西。而WebCore其实是当大家讨论HTML和SVG的布局、渲染和DOM处理时提到的WebKit。技术上讲，WebKit是WebCore和各种ports之间的绑定层，尽管通常来说这个差别并不那么重要。</p><p>一个图表应该可以帮助大家理解：</p><p><img src="http://paulirish.com/assets/webkit-diagram.png.pagespeed.ce.6jynYojf8j.png" alt="" _href="http://paulirish.com/assets/webkit-diagram.png.pagespeed.ce.6jynYojf8j.png" _p="true" /></p><p>WebKit中的许多组件都是可以更换的（图中标灰色的部分）。</p><p>举个例子来说，Webkit的JavaScript引擎，JavaScriptCore，是WebKit的默认组件。（它最初是当WebKit从KHTML分支时从KJS演变来的）。同时，Chromium port用V8引擎做了替换，还使用了独特的DOM绑定来映射上面的组件。</p><p>字体和文字渲染是平台上的重要部分。在WebKit中有两个独立的文字路径：Fast和Complex。这两者都需要平台特性的支持，但是Fast只需要知道如何传输字型，而Complex实际上需要掌握平台上所有的字符串，并说“请绘制这个吧”。</p><blockquote> 
 <p>&quot;WebKit就像一个三明治。尽管Chromium的包装更像是一个墨西哥卷。一个美味的Web平台墨西哥卷。&quot;</p> 
</blockquote><p>—— Dimitri Glazkov, Chrome WebKit hacker，Web Components和Shadow DOM拥护者。</p><p>现在，让我们放宽镜头看看一些port和一些子系统。下面是WebKit的5个port；尽管它们共享了WebCore的大部分，但考虑一下它们的stack有哪些不同。</p><table id="wk-matrix"> 
 <tbody> 
  <tr> 
   <td>&nbsp;</td> 
   <th>Chrome (OS X)</th> 
   <th>Safari (OS X)</th> 
   <th>QtWebKit</th> 
   <th>Android Browser</th> 
   <th>Chrome for iOS</th> 
  </tr> 
  <tr> 
   <th>Rendering</th> 
   <td>Skia</td> 
   <td>CoreGraphics</td> 
   <td>QtGui</td> 
   <td>Android stack/Skia</td> 
   <td>CoreGraphics</td> 
  </tr> 
  <tr> 
   <th>Networking</th> 
   <td>Chromium network stack</td> 
   <td>CFNetwork</td> 
   <td>QtNetwork</td> 
   <td>Fork of Chromium’s network stack</td> 
   <td>Chromium stack</td> 
  </tr> 
  <tr> 
   <th>Fonts</th> 
   <td>CoreText via Skia</td> 
   <td>CoreText</td> 
   <td>Qt internals</td> 
   <td>Android stack</td> 
   <td>CoreText</td> 
  </tr> 
  <tr> 
   <th>JavaScript</th> 
   <td>V8</td> 
   <td>JavaScriptCore</td> 
   <td>JSC (V8 is used elsewhere in Qt)</td> 
   <td>V8</td> 
   <td>JavaScriptCore (without JITting) *</td> 
  </tr> 
 </tbody> 
</table><p>*iOS Chrome注：你可能知道它使用 UIWebView。由于UIWebView的能力限制。它只能使用移动版Safari的渲染层，JavaScriptCore（而不是V8）和单进程模式。然而，大量的Chromium 代码还是起到了调节作用 ，比如网络层、同步、书签架构、地址栏、度量工具和崩溃报告。（同时，由于JavaScript很少成为移动端的瓶颈，缺少JIT编译器只有很小的影响。）</p><p><strong>好吧，那么我们该怎么办？</strong></p><p><strong>现在所有WebKit完全不同了，我好怕。</strong></p><p>别这样！<a href="http://trac.webkit.org/browser/trunk/LayoutTests">WebKit的layoutTests覆盖面</a>非常广（据最新统计，有28,000 个layoutTests），这些test不仅针对已存在的特性，而且针对任何发现的回归。实际上，每当你探索一些新的或难懂的DOM/CSS/HTML5特性时，在整个web平台上，layoutTests经常已经有了一些奇妙的小demo。</p><p>另外，W3C正在努力研究一致性测试套件。这意味着我们可以期待使用同一个测试套件来测试不同的WebKit port和浏览器，以此来获得更少的怪异模式，和一个带来更少的怪癖模式和更具互操作性的web。对所有参加过<a href="http://testthewebforward.org/">Test The Web Forward</a>活动的人们……致谢！</p><p><strong>Opera刚刚迁移到了WebKit了。会怎样？</strong></p><p>Robert Nyman和 Rob Hawkes也<a href="http://robertnyman.com/2013/02/14/webkit-an-objective-view/">谈到了这个</a> ，但是我会再补充一些：Opera在公告中明显指出<strong>Opera将采用Chromium</strong>。这意味着WebGL，Canvas，HTML5 表单，2D图像实现——Chrome和Opera将在所有这些功能上保持一致。API和后端实现也会完全相同。由于Opera是基于 Chromium，你可以有足够的信心去相信你的尖端工作将会在Chrome和Opera上获得兼容。</p><p>我还应该指出，所有的Opera浏览器都将采用Chromium：包括他的Windows，Mac、Linux版本，和Opera Mobile（完全成熟的移动浏览器）。甚至Opera Mini都将使用基于Chromium的服务器渲染集群来替换当前的基于Presto的服务器端渲染。</p><p><strong>……那WebKit Nightly是什么？</strong></p><p>它是WebKit的<a href="http://trac.webkit.org/browser/trunk/Source/WebKit/mac">mac port</a> ，和Safari运行的二进制文件一样（尽管会替换一些底层库）。因为苹果在项目中起主导地位，所以它的表现和功能与Safari的总是那么一致。在很多情况下，当其它port可能会试验新功能的时候，Apple却显得相对保守。不管怎样，如果你想我用中学一样的类比，想想这个好了：WebKit Nightly对于Safari就像Chromium对于Chrome。</p><p>同样的，<a href="http://paulirish.com/2012/chrome-canary-for-developers/">Chrome Canary</a> 有着最新的WebKit资源。</p><p><strong>告诉我更多的WebKit内幕吧。</strong></p><p>就在这儿了，小伙子：</p><p><a href="https://docs.google.com/presentation/d/1ZRIQbUKw9Tf077odCh66OrrwRIVNLvI_nhLm2Gi__F0/embed?start=false&amp;loop=false&amp;delayms=3000"> <img src="http://paulirish.com/i/x3fb890.png.pagespeed.ic.6nLbkKT48f.png" alt="" _href="http://paulirish.com/i/x3fb890.png.pagespeed.ic.6nLbkKT48f.png" _p="true" /> </a></p><p><strong>扩展阅读：</strong></p><ul> 
 <li><a href="http://www.webkit.org/coding/technical-articles.html">WebKit internals technical articles | webkit.org</a></li> 
 <li><a href="http://robertnyman.com/2013/02/14/webkit-an-objective-view/">WebKit: An Objective View | Robert Nyman &amp; Rob Hawkes</a> (译者注：本文在InfoQ有授权发布的<a href="http://www.infoq.com/cn/news/2013/02/webkit-history-and-now;jsessionid=26E7B8C50F5D45556015EC1064A36419">中文译文</a>)</li> 
 <li><a href="http://ariya.ofilabs.com/2011/06/your-webkit-port-is-special-just-like-every-other-port.html">your webkit port is special (just like every other port) | Ariya Hidayat</a></li> 
 <li><a href="http://blogs.adobe.com/webplatform/2013/01/21/getting-started-with-the-webkit-layout-code/">Getting Started With the WebKit Layout Code | Adobe Web Platform Blog</a></li> 
 <li><a href="http://arunpatole.com/blog/2011/webkit-documentation/">WebKit Documentation Overview | Arun Patole</a></li> 
 <li><a href="http://www.youtube.com/watch?v=RVnARGhhs9w">Rendering in WebKit, by Eric Seidel | YouTube</a></li> 
 <li><a href="http://www.igvita.com/slides/2012/web-performance-for-the-curious/">web performance for the curious | Ilya Grigorik</a></li> 
</ul><div class="clearer-space"></div><br><br><br><br><br><br></body></html>