<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Behaviour-Driven Development: Value through Collaboration</h3><p>The goal of a software project is to deliver value to stakeholders and <a href="http://en.wikipedia.org/wiki/Behavior-driven_development">Behaviour-Driven Development</a>, (BDD), is designed for that; keeping focus on value for stakeholders throughout the whole project, <a href="http://technologyconversations.wordpress.com/about/">Viktor Farcic</a> states when&nbsp;<a href="http://technologyconversations.wordpress.com/2013/11/14/behavior-driven-development-bdd-value-through-collaboration-part-1-introduction/">describing</a> his view on BDD.<br /> One principle of BDD is that a requirement has to be written in a way that everyone understands it, Viktor, a software developer working on transitions from waterfall to agile processes, continues. In contrast, in traditional waterfall projects value to stakeholders is in many cases unknown or forgotten. Most people involved in such a project are concerned to “do their part” and throw it “over the wall” to those coming next.</p>
<p>A key to describing requirement in BDD is stories, and Viktor describes the format of such a story as comprising of two elements, a Narrative followed by one or more Scenarios. A narrative is a short, simple description of a feature told from the perspective of a person or role that requires the new functionality, just enough to provide a basis for communication between all involved, (business analysts, developers, testers etc.), and with a focus on dialog instead of a written description. The goal is to answer three questions: What is the value, for whom is it valuable and what is the actual feature. With those questions answered, a team can start defining the best solution in collaboration with stakeholders.<br /> A narrative is further defined through scenarios that provide definition of done and acceptance criteria that confirm that a developed narrative fulfils the expectations.</p>
<p>Although narratives for Viktor have some characteristics of traditional requirements he believes there are important differences. One is the focus on verbal and continuous communication in contrast to using written language which can be very imprecise. Another is the focus on features to describe functionality instead of using numerous statements in the form: “The system shall…” which often prevents the reader from understanding the overall picture and real goal of the project.</p>
<p>Finally, Viktor describes moving BDD towards automation. Execution of BDD scenarios can be accomplished using many different frameworks, e.g. <a href="http://jbehave.org/">JBehave</a>, <a href="http://cukes.info/">Cucumber</a>, <a href="http://specflow.org/">SpecFlow</a> and <a href="https://github.com/pivotal/jasmine">Jasmine</a>. His suggestion is to implement BDD automation in 3 phases:</p>
<ul> 
 <li>Creating a library of normalized steps as a help to separate the scenarios from the actual code, thereby simplifying for non-programmers to write stories.</li> 
 <li>Combine steps into composites at a higher business level helping analysts and other alike to a better understanding.</li> 
 <li>Use examples tables so that the same scenario may be executed several times with a different set of parameters.</li> 
</ul>
<p>Victor’s recommendation is to start with the first phase, and continue with the following two when enough steps to support the first scenario are created.</p>
<p>BDD was developed around 2006 by <a href="http://dannorth.net/about/">Dan North</a> who has written both an <a href="http://dannorth.net/introducing-bdd/">introduction</a> and about <a href="http://dannorth.net/whats-in-a-story/">stories from a BDD perspective</a>.<br /> <a href="http://en.wikipedia.org/wiki/Specification_by_example"> Specification by Example</a> is a way of defining requirements closely related to BDD.</p><br><br><br><br><br><br></body></html>