<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Interview with Andy Piper on the Eclipse Paho project and the Internet of Things</h3><p>The Eclipse foundation started a <a href="http://www.eclipse.org/org/workinggroups/m2miwg_charter.php">Machine-to-Machine working group</a> at EclipseCon 2012 looking at forming a community around the growing Internet of Things – hardware devices and sensors that are becoming networked on a massive scale. Recently, the working group <a href="http://ianskerrett.wordpress.com/2014/01/13/growing-an-open-iot-community-in-2014/">renamed to IoT</a> since the Internet-of-Things is more inclusive a term a than Machine-to-Machine.</p>
<p>A key part of this environment is a means to communicate and share data, and instead of requiring high power ethernet and WiFi connections, the growing trend has been to use MQTT as the de-facto communication protocol.</p>
<p>To find out more about where it came from and how people use it, InfoQ caught up with Andy Piper, project lead of the <a href="http://www.eclipse.org/paho/">Eclipse Paho</a> project, which provides clients for the MQTT (Message Queueing Telemetry Transport) protocol in a variety of languages.</p>
<p><b>InfoQ</b>: <strong> The Paho project is specifically aimed at clients for the MQTT protocol. Can you tell us a little about what MQTT is, and where it has come from?</strong></p>
<blockquote> 
 <p><b>Piper</b>: MQTT originated in the industrial sector in the late 1990s – the first implementation was in 1999, to be precise. Companies wanting to monitor industrial and mechanical systems (think pipelines, oil pressures, water levels etc) needed a very lightweight technology, suitable for running on constrained systems and devices.</p> 
 <p>At the time, the primary protocol for dealing with those environments was <a href="http://en.wikipedia.org/wiki/SCADA">SCADA</a> (Supervisory Control and Data Acquisition), and the early versions of that protocol were monolithic or tightly-bound, proprietary and closed systems. IBM worked with some partners, primarily a company called Arcom, to devise a lightweight messaging-based protocol as an alternative, enabling better scalability and ease of integration.</p> 
 <p>So essentially, MQTT is a very light, publish/subscribe, asynchronous messaging protocol, ideal for the Internet of Things, mobile, and sensor networks. It started out at IBM, but in the past few years it has gone open source, with a standard <a href="https://www.oasis-open.org/news/pr/oasis-members-to-advance-mqtt-standard-for-m2m-iot-reliable-messaging">being agreed at OASIS</a> – so it is much more widespread than just being an IBM thing these days.</p> 
</blockquote>
<div id="lowerFullwidthVCR"></div>
<p><b>InfoQ</b><strong>: Is MQTT a proprietary protocol?</strong></p>
<blockquote> 
 <p><b>Piper</b>: Once upon a time, MQTT was only implemented by IBM and a small number of their partners. However, the protocol specification was published &quot;royalty free&quot; for many years, and as a result, a few free implementations emerged – most notably, the very popular <a href="http://mosquitto.org">mosquitto</a> broker from <a href="https://twitter.com/ralight">Roger Light</a>. Since 2011 MQTT has been at Eclipse as part of the Paho project, and during 2013 the specification was submitted to <a href="https://www.oasis-open.org/news/pr/oasis-members-to-advance-mqtt-standard-for-m2m-iot-reliable-messaging">OASIS for standardisation</a>. The list of vendors and interested parties in the standardisation process is impressive! The <a href="https://www.oasis-open.org/news/announcements/call-for-participation-message-queuing-telemetry-transport-mqtt-tc">MQTT OASIS Technical Committee is being formed</a> and welcomes participants.</p> 
 <p>So, no, MQTT isn't proprietary, it is absolutely open, with many free and open source implementations, as well as a number of commercially-licensed and supported brokers and clients. IBM have a very high performance appliance which is being used to back a number of projects like the Internet of Things in connected cars from some manufacturers; one of the newer commercial brokers I'm most excited by is <a href="http://www.hivemq.com">HiveMQ</a>, from <a href="http://www.dc-square.de/en/">dcSquared</a> out of Germany.</p> 
</blockquote>
<p><b>InfoQ</b>: <strong>What makes MQTT a good choice for embedded systems or high latency networks?</strong></p>
<blockquote> 
 <p><b>Piper</b>: As I mentioned, MQTT was born in an era – and in a specific environment – where computing power and bandwidth were at a premium. It was designed for systems with limited CPU cycles and memory, and also for networks with minimal bandwidth or high latency (dial-up networks or satellite links), where users were potentially being charged for every byte transmitted.</p> 
 <p>As a result, even today in our era of broadband connections and smartphones with many more capabilities than the computers used to get us to the moon, MQTT can run very efficiently on small devices or in areas where network coverage is patchy. Analysis has shown that MQTT is very efficient on network and battery consumption on mobile devices.</p> 
 <p>The lightest implementations run on devices like the <a href="https://mbed.org">mbed</a> and <a href="http://arduino.cc">Arduino</a>. The smallest possible packet size is 2 bytes, and there are a bunch of built-in features for dealing with situations where devices lose contact with the network (called the &quot;last will and testament&quot; feature, where a device or client can specify a final message to be sent on its behalf if contact is lost).</p> 
 <p>Publish/subscribe is actually a really good mechanism for distributing data in these kinds of systems, too – you're not making individual point-to-point HTTP-style calls to every node on the network, so this scales very effectively. Any system interested in the data can subscribe on a relevant topic and make use of it; other devices can carry on with the tasks that are important to them, and ignore it.</p> 
 <p>One other thing we should mention is that at the heart of an MQTT system, is a broker – brokers can often be bridged and clustered to share topics and publications (depending on the implementation), to avoid single points of failure – devices talk to the broker, and the broker distributes messages to subscribers.</p> 
</blockquote>
<p><b>InfoQ</b>: <strong>What kinds of Quality of Service does MQTT provide?</strong></p>
<blockquote> 
 <p><b>Piper</b>: Simple answer – there are three of them:</p> 
 <ul> 
  <li><b>QoS 0</b> is essentially &quot;fire and forget&quot; – the message may arrive, it may not, but the data probably isn't critical anyway (in most cases the message will be delivered somewhere, of course, but there's no double-check to make sure that happens).</li> 
  <li><b>QoS 1</b> makes a bit more of an effort to ensure a message arrives: if an acknowledgement of receipt isn't received from the broker, we'll re-send the message again but with a duplicate header byte set, just in case.</li> 
  <li><b>QoS 2</b> is closer to the two-phase commit world and tries to offer once and once-only delivery, for data where you want to be sure the broker did receive the message for onward delivery.&nbsp;</li> 
 </ul> 
</blockquote>
<p><b>InfoQ</b>: <strong>How does MQTT compare with other message broker technologies like JMS?</strong></p>
<blockquote> 
 <p><b>Piper</b>: JMS is actually an interesting example to choose – really, JMS is an API, not a protocol or transport. When Sun specified JMS they essentially allowed any vendor or open source project to plug a suitable transport under a common API (so you ended up with IBM MQ, Tibco, etc. which didn't interoperate at the network layer, even though programs were broadly portable between them).</p> 
 <p>A better analog would be to compare MQTT with, say, <a href="http://www.amqp.org">AMQP</a>, <a href="http://stomp.github.io">STOMP</a>, or <a href="http://zeromq.org" alt="Zero MQ">&Oslash;MQ</a>. The answer is, it sits alongside all of these. It isn't a full-featured enterprise messaging protocol with fine-grained controls, ultra-reliable queueing, like AMQP; but it also isn't a queue grafted on top of a TCP socket like <span alt="Zero MQ">&Oslash;MQ</span> (apologies to the <span alt="Zero MQ">&Oslash;MQ</span> guys, I'm over-simplifying here for the sake of comparison!). It tries to provide a simple API – there are essentially 5 methods; a compact payload suitable for constrained networks; and a publish/subscribe &quot;push&quot; mechanism useful for sensor and mobile scenarios.</p> 
</blockquote>
<p><b>InfoQ</b><strong>: Who is using MQTT at the moment?</strong></p>
<blockquote> 
 <p><b>Piper</b>: There are really a huge number of use cases and examples, and I'll pick on a few of the more high-profile and well-known ones:</p> 
 <ul> 
  <li>Probably the most recognisable name on the list is Facebook – they blogged about <a href="https://www.ibm.com/developerworks/community/blogs/mobileblog/entry/why_facebook_is_using_mqtt_on_mobile">how they use MQTT in their Messenger and mobile apps</a>, due to the lightweight network characteristics (they don't want to drain phone batteries or use all your data).</li> 
  <li>St Jude Medical in the US are using MQTT for remote monitoring of patients.</li> 
  <li>Consert Energy are using MQTT for their smart home meters.</li> 
  <li>The Isle of Wight ferries <a href="http://www.telegraph.co.uk/travel/travelnews/6188760/Twittering-ferries-alert-passengers-to-delays.html">tweet their location</a> as they leave and enter port, driven by an MQTT system.</li> 
  <li>Andy Stanford-Clark (co-inventor of MQTT) has made his house into a sort of <a href="http://www.telegraph.co.uk/science/science-news/6156291/The-house-that-Twitters.html">living laboratory for home automation</a> using MQTT, and monitors everything from which lights are switched on, to whether the garden gate was left open – oh, and whether he needs to re-arm his mousetraps!&nbsp;</li> 
 </ul> 
</blockquote>
<p><b>InfoQ</b>:<strong> How did the Paho project get created, and why was it created at Eclipse?</strong></p>
<blockquote> 
 <p><b>Piper</b>: Eclipse started as an IDE, but the truth is that the Eclipse Foundation has always supported a wide range of open source projects, both around developer tools, and increasingly also runtimes and frameworks.</p> 
 <p>Paho came about when IBM was looking to open source their MQTT client code – and IBM has always had a strong affinity with the Eclipse community. At the same time, two other projects, Eclipse <a href="http://www.eclipse.org/koneki/">Koneki</a> (a Lua tooling extension for the IDE) and Eclipse <a href="http://www.eclipse.org/mihini/">Mihini</a> (an embedded runtime for IoT) were spinning up, and these three projects formed the start of the Eclipse IoT ecosystem. That has now expanded significantly, as the importance of IoT and the Internet of Things has been well-recognised.</p> 
 <p>We now have the mosquitto broker combining with a newly open-sourced IBM broker (&quot;Really Small Message Broker&quot;) at the Foundation, in the Eclipse <a href="http://projects.eclipse.org/projects/technology.mosquitto">Mosquitto</a> project; and there are many other projects like Eclipse <a href="https://projects.eclipse.org/projects/technology.smarthome">SmartHome</a>, <a href="http://www.eclipse.org/proposals/technology.kura/">Kura</a>, <a href="http://www.eclipse.org/proposals/technology.krikkit/">Krittit</a>, <a href="http://www.eclipse.org/proposals/technology.eclipsescada/">SCADA</a>, <a href="http://eclipse.org/proposals/technology.om2m/">OM2M</a>, <a href="http://www.eclipse.org/proposals/technology.liblwm2m/">Wakaama (formerly liblwm2m)</a>, <a href="http://www.eclipse.org/proposals/technology.californium/">Californium</a>, and – importantly, as it bridges between protocols – Eclipse <a href="http://eclipse.org/ponte/">Ponte</a><a>. In fact, we recently took the decision to rename the Eclipse M2M Industry Working Group to </a><a href="http://iot.eclipse.org">Eclipse IoT</a>, to reflect the industry direction on terms and understanding of this space.</p> Ian Skerrett from the Eclipse Foundation recently wrote &quot;
 <a href="http://ianskerrett.wordpress.com/2014/01/13/growing-an-open-iot-community-in-2014/">Eclipse is well on its way to being the community for open source implementations for IoT standards</a>&quot; – and the Paho project is excited to be a core part of that community!&nbsp; 
</blockquote>
<p><b>InfoQ</b>: <strong>What languages does the Paho project have libraries for?</strong></p>
<blockquote> 
 <p><b>Piper</b>: Java, C, and Javascript are currently our &quot;core&quot; or implementations, and came from the commercial IBM libraries originally. The Python client was contributed from the mosquitto project and is also great quality and well-tested. We also have clients in Go, Lua and C++ which are being developed, an <a href="http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.objc.git/tree/">Objective-C client</a> which is just being contributed and we are always happy to look at new contributions.</p> 
 <p>The goal here is to incubate high-quality, specification-compliant clients which can be reference implementations. The <a href="http://mqtt.org">mqtt.org</a> website also lists a wide range of other implementations in many other languages and for different devices – the <a href="http://knolleary.net/arduino-client-for-mqtt/">Arduino client</a> is particularly popular, but is not part of the Paho project.</p> 
</blockquote>
<p><b>InfoQ</b>: <strong>Are there any available MQTT brokers for developers to work with?</strong></p>
<blockquote> 
 <p><b>Piper</b>: Yes, there are lots, these days! As the community lead, it is a pleasure to be able to say that, since we used to just have a couple of examples, some of which were not entirely free to use. I mentioned that RSMB and mosquitto are coming together under the Eclipse Mosquitto project, and in fact you can already point an MQTT client at <a href="mqtt://iot.eclipse.org:1833">iot.eclipse.org:1883</a> and use a free, hosted mosquitto broker.</p> 
 <p>There are some other less well-known free examples around too, such as moquette (a Java-based broker). In the &quot;mature OSS projects&quot; space, RabbitMQ and ActiveMQ both support MQTT as well as their other established messaging protocols. Developers can also get a copy of the commercial HiveMQ broker to try out, or even download a virtual machine image of the full IBM MessageSight appliance (the actual hardware is probably out-of-reach for the majority of standalone developers... IBM won't even send one of the boxes to me!).</p> 
 <p>It is worth noting that while there are a wide range of language implementations of MQTT – not all of them are hosted at inside Paho – and a number of brokers, interoperability remains an important consideration. Not all of the brokers support the same features. At <a href="http://www.eclipsecon.org">EclipseCon</a> in California this March, there will be an interoperability testing day, where developers and hardware vendors can come together and see how well their implementations conform to the specification and work together.</p> 
</blockquote>
<p><b>InfoQ</b>: <strong>Are there any good documentation or tutorials on the web to find out more about MQTT and how to use it with Paho and Mosquitto?</strong></p>
<blockquote> 
 <p><b>Piper</b>: Yes, but we can always do better! A couple of my favourite recent articles are by DJ Walker-Morgan, who wrote some nice tutorials. Take a look at <a href="http://www.infoq.com/articles/practical-mqtt-with-paho">Practical MQTT with Paho</a> and <a href="http://www.eclipse.org/paho/talkingsmall/talking_small.html">Using Eclipse Paho's MQTT on BeagleBone Black and Raspberry Pi</a>. The HiveMQ guys have some <a href="http://www.hivemq.com/documentation/">great tutorials</a> on their website, too. The really nice part about the MQTT community is that it is very active, and there are many places to come together and share ideas and ask questions. <a href="http://mqtt.org/get-involved">http://mqtt.org/get-involved</a> lists some of the community spaces and mailing lists. Chances are, if you've got an idea or a question, someone on the forums can help you!</p> 
 <p>One thing to note is that at the moment, we're in the process of moving the <a href="http://mqtt.org">mqtt.org</a> community website and wiki to be hosted at Github – see <a href="http://github.org/mqtt">http://github.org/mqtt</a> for the new organisation. This is a great time to get involved and help out with revamping the website and reorganising the wiki to be a great source of information for newcomers and experienced developers and users alike!</p> 
</blockquote>
<p>As Facebook shows, MQTT is suitable for low powered or battery devices, as well as for smaller devices or embedded computers. There's a <a href="https://www.eclipsecon.org/na2014/m2mday">special track for the internet of things</a> at <a href="https://www.eclipsecon.org/na2014/">EclipseCon</a> on March 19, 2014. What could you network with MQTT?</p>
<h2>About the Interviewee</h2>
<p><strong><img align="left" _p="true" _href="img://AndyPiper.jpg" alt="" src="http://www.infoq.com/resource/articles/interview-andy-piper/en/resources/AndyPiper.jpg" />Andy Piper</strong> is part of the Pivotal Developer Relations and Community Engineering team, and works as Developer Advocate for Cloud Foundry, the Open Source Platform-as-a-Service. He is probably best known online as a “social bridgebuilder” spanning a number of areas of technology and interest. Andy has a passionate interest in small and mobile devices, cloud, the Internet of Things, and Arduino and related technologies. He was previously with IBM Software Group for more than 10 years, as a consultant, strategist, and WebSphere Messaging Community Lead.</p><br><br><br><br><br><br></body></html>