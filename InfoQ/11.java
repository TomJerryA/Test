<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Serializing Immutable Collections in .NET</h3><p>The serialization story for .NET’s immutable collections is currently less than ideal. When you tag a property of type ImmutableList&lt;T&gt; with the DataMember attribute, the standard deserializer appears to ignore it. There are no runtime errors, the data is just not there.</p>
<p>You can make the property an IList to prevent the data loss, but this leads to a semantic issue. Though you can store an immutable list in an IList, the practice is frowned upon because most people assume that a given IList is not going to marked are read-only. Furthermore, the type checker can’t help catch this mistake at compile time.</p>
<p>To fix the semantic problem one would assume that offering a property of type IReadOnlyList could be used instead. Unfortunately this throws an exception during serialization unless the KnownType attribute is added. And once it is added we’re back to the silent failure to deserialize the property.</p>
<p>Likewise the legacy serialization mechanism, which uses the Serializable attribute, isn’t supported. Immo Landwerth writes,</p>
<blockquote> 
 <p>Yes. First of all, binary serialization isn't support in the portable subset we are using (<a href="http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/3701316-make-the-new-immutable-collection-types-serializab">visualstudio.uservoice.com/.../3701316-make-the-new-immutable-collection-types-serializab</a>). Secondly, we prefer a model where serialization is done outside the core data structures because it makes it more resilient to implementation changes and solves the cross version serialization when used in client/server scenarios. Popular serialization libraries already plan on adding support for immutable collections, e.g. JSON.NET, protobuf-net.</p> 
</blockquote>
<p>This leaves us with third-party libraries such as JSON.NET. As of version 5.0r7, <a href="http://james.newtonking.com/archive/2013/10/14/json-net-5-0-release-7-immutable-collections">JSON.NET has support for .NET’s official immutable collections library</a>. Also new in this version is JsonExtensionData, which stores any additional data that isn’t represented by a property on the class being deserialized.</p>
<p>Marc Gravell also announced that <a href="http://marcgravell.blogspot.com/2013/09/fun-with-immutable-collections.html">protobuf-net will support the immutable collections</a>,</p>
<blockquote> 
 <p>The trunk of <a href="http://code.google.com/p/protobuf-net/">protobuf-net</a> (r666) now has support for immutable lists, arrays, dictionaries, hash-sets, sorted-sets, sorted-dictionaries - and all of their interface twins. But all in a single pattern recognition block.</p> 
</blockquote><br><br><br><br><br><br></body></html>