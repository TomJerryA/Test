<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>REST e SOAP: Usar um dos dois ou ambos?</h3><p>Desenvolvedores web t&ecirc;m uma grande quantidade de tecnologias que podem escolher, de ferramentas para acesso simples a bancos de dados, integra&ccedil;&atilde;o com servi&ccedil;os em middleware, a softwares do lado do cliente. A quantidade de op&ccedil;&otilde;es em si j&aacute; &eacute; um desafio, e escolher uma abordagem espec&iacute;fica para construir partes de um aplicativo web exacerba o problema.</p>
<p>Neste breve artigo, vamos nos concentrar em uma dessas escolhas: SOAP ou REST. Ambas possuem vantagens e desvantagens e fica na m&atilde;o do desenvolvedor determinar a melhor abordagem para cada caso em particular.</p>
<p>A maioria dos desenvolvedores tem exposto seus servi&ccedil;os utilizando REST, que faz uso de um padr&atilde;o de URI (Uniform Resource Identifier), fazendo uma chamada para um servi&ccedil;o web como em:</p>
<p>http://www.minhaempresa.com.br/programa/metodo?Par&acirc;metros=xx</p>
<p>O REST &eacute; simples de entender e pode ser adotado em praticamente qualquer cliente ou servidor com suporte a HTTP/HTTPS. Os desenvolvedores que o utilizam citam, como principais vantagens a facilidade no desenvolvimento, o aproveitamento da infraestrutura web existente e um esfor&ccedil;o de aprendizado pequeno.</p>
<p>Por outro lado, o SOAP, av&ocirc; das interfaces de servi&ccedil;os web, n&atilde;o deixar&aacute; de ser usado t&atilde;o cedo. Com o <a href="http://www.w3.org/TR/soap/">SOAP v 1.2</a>, muitas das defici&ecirc;ncias percebidas nessa tecnologia foram corrigidas e aumentou a facilidade de uso. Al&eacute;m disso, a sigla SOAP deixou de representar &quot;Simple Object Access Protocol&quot;. Na especifica&ccedil;&atilde;o 1.2 da W3C, SOAP &eacute; apenas o nome da especifica&ccedil;&atilde;o.</p>
<div id="lowerFullwidthVCR"></div>
<p>Utilizar o SOAP 1.2 traz uma carga adicional n&atilde;o encontrada ao usar REST, mas h&aacute; tamb&eacute;m vantagens. Primeiramente o SOAP &eacute; baseado em XML, de tr&ecirc;s formas: o envelope, que define o conte&uacute;do da mensagem e informa como process&aacute;-la; um conjunto de regras de codifica&ccedil;&atilde;o para os tipos de dados; e o layout para os procedimentos de chamadas e respostas. Esse &quot;envelope&quot; &eacute; enviado por meio de (por exemplo) HTTP/HTTPS. E uma RPC (Remote Procedure Call) &eacute; executada, e o envelope retorna com as informa&ccedil;&otilde;es do documento XML formatado.</p>
<p>Uma das vantagens do SOAP &eacute; o uso de um m&eacute;todo de transporte &quot;gen&eacute;rico&quot;. Enquanto que o REST faz uso de HTTP/HTTPS, o SOAP pode usar qualquer meio de transporte existente para enviar sua requisi&ccedil;&atilde;o, desde SMTP at&eacute; mesmo JMS (Java Messaging Service). No entanto, uma desvantagem percebida no uso de XML &eacute; a sua natureza prolixa e o tempo necess&aacute;rio para analisar o resultado apresentado.</p>
<p>A boa not&iacute;cia para os desenvolvedores web &eacute; que ambas as tecnologias s&atilde;o muito vi&aacute;veis no mercado atual. Ambos REST e o SOAP conseguem resolver um grande n&uacute;mero de problemas e desafios na web, e em muitos casos tanto um como o outro podem ser utilizados para fazer o que querem os desenvolvedores.</p>
<p>Mas uma hist&oacute;ria n&atilde;o contada &eacute; que ambas as tecnologias podem ser misturadas e combinadas. O REST &eacute; f&aacute;cil de entender e extremamente acess&iacute;vel por&eacute;m faltam padr&otilde;es, e a tecnologia &eacute; considerada apenas uma abordagem arquitetural. Em compara&ccedil;&atilde;o, o SOAP &eacute; um padr&atilde;o da ind&uacute;stria, com protocolos bem definidos e um conjunto de regras bem estabelecidas.</p>
<p>Pode-se afirmar, ent&atilde;o, que casos onde o REST funciona bem s&atilde;o:</p>
<ul class="c6 lst-kix_qoymw46n47nf-0 start"> 
 <li>Situa&ccedil;&otilde;es em que h&aacute; limita&ccedil;&atilde;o de recursos e de largura de banda: A estrutura de retorno &eacute; em qualquer formato definido pelo desenvolvedor e qualquer navegador pode ser usado. Isso porque a abordagem REST usa o padr&atilde;o de chamadas GET, PUT, POST e DELETE. O REST tamb&eacute;m pode usar objetos XMLHttpRequest (a base do velho AJAX) que a maioria dos navegadores modernos suporta.</li> 
 <li>Opera&ccedil;&otilde;es totalmente sem-estado: se uma opera&ccedil;&atilde;o precisa ser continuada, o REST n&atilde;o ser&aacute; a melhor op&ccedil;&atilde;o. No entanto, se forem necess&aacute;rias opera&ccedil;&otilde;es de CRUD stateless (Criar, Ler, Atualizar e Excluir), o REST seria a melhor alternativa.</li> 
 <li>Situa&ccedil;&otilde;es que exigem cache: se a informa&ccedil;&atilde;o pode ser armazenada em cache, devido &agrave; natureza da opera&ccedil;&atilde;o stateless do REST, esse seria um cen&aacute;rio adequado para a tecnologia.</li> 
</ul>
<p>Essas tr&ecirc;s situa&ccedil;&otilde;es abrangem muitas solu&ccedil;&otilde;es. Ent&atilde;o por que ainda precisamos considerar o uso do SOAP? Mais uma vez, o SOAP &eacute; bastante maduro e bem definido e vem com uma especifica&ccedil;&atilde;o completa. J&aacute; a abordagem REST &eacute; apenas isso: uma abordagem. Est&aacute; totalmente aberta. Por isso ao se encontrar uma das situa&ccedil;&otilde;es abaixo, o SOAP pode ser uma &oacute;tima solu&ccedil;&atilde;o:</p>
<ul class="c6 lst-kix_jjexk2izrthc-0 start"> 
 <li>Processamento e chamada ass&iacute;ncronos: se o aplicativo precisa de um n&iacute;vel garantido de confiabilidade e seguran&ccedil;a para a troca de mensagens, ent&atilde;o o SOAP 1.2 oferece padr&otilde;es adicionais para esse tipo de opera&ccedil;&atilde;o como por exemplo o WSRM (<a href="http://docs.oasis-open.org/ws-rx/wsrm/200608/wsrm-1.1-spec-cd-04.html">WS-Reliable Messaging</a>).</li> 
 <li>Contratos formais: se ambos os lados (fornecedor e consumidor) t&ecirc;m que concordar com o formato de interc&acirc;mbio de dados, ent&atilde;o o SOAP 1.2 fornece especifica&ccedil;&otilde;es r&iacute;gidas para esse tipo de intera&ccedil;&atilde;o.</li> 
 <li>Opera&ccedil;&otilde;es stateful: para o caso de o aplicativo precisar de informa&ccedil;&atilde;o contextual e gerenciamento de estado com coordena&ccedil;&atilde;o e seguran&ccedil;a, o SOAP 1.2 possui uma <a href="http://www.ibm.com/developerworks/br/webservices/tutorials/ws-understand-web-services4/">especifica&ccedil;&atilde;o adicional</a> em sua estrutura que apoia essa necessidade (seguran&ccedil;a, transa&ccedil;&otilde;es, coordena&ccedil;&atilde;o etc.). Comparativamente, usar o REST exigiria que os desenvolvedores constru&iacute;ssem uma solu&ccedil;&atilde;o personalizada.</li> 
</ul>
<p>Como se v&ecirc;, cada uma das abordagens tem sua utilidade. Ambas t&ecirc;m problemas nos quesitos de seguran&ccedil;a, camadas de transporte etc.; mas ambas podem realizar o trabalho necess&aacute;rio e trazem sua contribui&ccedil;&atilde;o para o desenvolvimento de aplica&ccedil;&otilde;es web.</p>
<p>Portanto, a melhor abordagem &eacute; a flexibilidade, pois n&atilde;o importa qual seja o problema, no mundo de hoje do desenvolvimento web, conta-se com excelentes resultados ao fazer uso de um desses padr&otilde;es.</p>
<h2>Sobre o autor</h2>
<p><a href="http://mikerozlog.sys-con.com/">Mike Rozlog</a> &eacute; o diretor s&ecirc;nior de produtos para a Embarcadero Technologies, dedicando-se a discutir e explicar os aspectos t&eacute;cnicos e de neg&oacute;cios de produtos e servi&ccedil;os da empresa. Mike fez parte da antiga CodeGear e passou mais de oito anos trabalhando para a Borland, inclusive como Chief Technical Architect.</p><br><br><br><br><br><br></body></html>