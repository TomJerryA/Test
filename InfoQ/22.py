<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Simian Armyを使わないPagerDutyの復元性テスト</h3><p><a target="_blank" href="http://www.infoq.com/news/2013/11/dod-lon-day1-failure-testing"><em>原文(投稿日：2013/11/12)へのリンク</em></a></p>
<div class="article_page_left news_container text_content_container"> 
 <div class="text_info"> 
  <p><a href="http://www.pagerduty.com/">PagerDuty</a>の<a href="http://www.devopsdays.org/events/2013-london/proposals/Failure%20Friday!%20-%20Start%20injecting%20failure%20today/">Doug Barth</a>氏が，特別な自動化作業を前もって用意することなくシステムの復元性テストを開始するという，同社で実施したアプローチについて，<a href="https://speakerdeck.com/dougbarth/failure-friday-start-injecting-failure-today">DevOps Days Londonで講演した</a>。目標としたのは障害発生点の早期発見と，１週間に１時間の時間枠を設けて，その対処方法についてオープンに議論することだ。</p> 
  <p class="MsoNormal"><span lang="EN-GB">Netflixで有名な<a href="http://techblog.netflix.com/2011/07/netflix-simian-army.html">simian army</a>のようなカバレッジで障害テストを自動化することは，PagerDutyのマルチクラウド環境では実現不可能だ。また，社内の自動ツールに投資したとしても，初期結果を得るまでには時間を要する。</span><span lang="EN-GB">そこで同社では，&quot;Failure Friday&quot; と名付けた手動の障害テストアプローチを採用することにした。</span><span lang="EN-GB">毎週金曜日の1時間を使って一連の &quot;アタック&quot; (障害を引き起こす) を実行し，”犠牲者” (テスト対象のシステム)の反応をチェックするのだ。</span></p> 
  <p class="MsoNormal"><span lang="EN-GB">アタックとアタックの間，システムは通常の動作状態に戻される。</span><span lang="EN-GB">大きな障害が発生した (例えば障害発生後，犠牲者システムへ送られたリクエストが，他のサービスインスタンスによって処理されなくなったような) 場合，アタックは中止される。</span><span lang="EN-GB">この時はセッションを停止して，システムを一旦，手動で回復させる。</span><span lang="EN-GB">その上で次の金曜日に，恒久的な対策をテストするのだ。</span><span lang="EN-GB">そういったことがなければ，アタックは1時間，セッションが終了するまで継続される。</span></p> 
  <p class="MsoNormal"><span lang="EN-GB">アタックの方法は，<a href="http://cassandra.apache.org/">Cassandra</a>データベースインスタンスの停止やサーバインスタンスの再起動といった簡単な障害シミュレーションから始まり，より複雑な，ネットワーク分離 (IPテーブルの設定ミスによりドロップしたパケットの特定ポートへの転送) やノードの能力低下 (<a href="http://www.linuxfoundation.org/collaborate/workgroups/networking/netem#Emulating_wide_area_network_delays">netemのネットワークエミュレーション</a>を使用) のシミュレーションにまで及ぶ。</span></p> 
  <p class="MsoNormal"><span lang="EN-GB">システムの問題解決に加えて，障害の処理とテストの必要性に関する全般的な意識向上などが，期待される効果として挙げられる。</span><span lang="EN-GB">しかしそれよりも氏が強調したのは，実際に体験するまでの間に陳腐化したり不正確なものになるような，単なる理論的知識ではなく，故意に発生させた障害を経験し理解した結果として，新たなオンコール対応技術者(開発あるいは運用において)の数的拡大が可能になるという，副次的な効果の方だ。</span><span lang="EN-GB">その他にも期待していなかった効果として，シミュレーションの難しいコンポーネント障害の所在が明らかになったことがある。これが要因となってアーキテクチャが変更され，システム全体のテスト性を向上することができた。</span></p> 
  <p class="MsoNormal"><span lang="EN-GB">実務的組織の観点から氏は，実施記録と活動時間，発見項目と障害記録に加えて，ダッシュボードと測定基準を公開することの重要性にも言及した。</span><span lang="EN-GB">さらに氏は，監視システムが所定の動作をしていることの確認のため，セッション中も警告を停止しないことを推奨した。ただし，故意に起こした障害がアラームエスカレーションされるのを避けるため，アタックセッションの実施をすべての人々に周知することも付け加えている。</span>
   <o:p></o:p></p> 
 </div> 
</div><br><br><br><br><br><br></body></html>