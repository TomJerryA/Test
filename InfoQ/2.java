<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>PeerJS 0.1.7: A WebRTC Wrapper For P2P In The Browser</h3><p><a href="http://github.com/michellebu">Michelle Bu</a> and <a href="http://github.com/ericz">Eric Zhang</a> announced the release of <a href="http://peerjs.com/">PeerJS 0.1.7</a> on March 6th as a wrapper around <a href="http://dev.w3.org/2011/webrtc/editor/webrtc.html">WebRTC</a>, a W3C initiative meant to facilitate P2P communication in the browser.</p> 
<p>The burgeoning role of <a href="http://www.w3.org/TR/2011/WD-websockets-20110929/">websockets</a> notwithstanding, PeerJS represents a radical shift away from server-orchestrated data transfer.</p> 
<blockquote>
 &quot;Websockets and WebRTC DataChannels seem the same—both support binary and allow you to send arbitrary data from one client that may eventually reach another client. However, they're fundamentally different. With WebRTC DataChannels, peers can send data to each other without information ever going through some central server. Take Facebook or Google chat, for example. Sending a message to someone sitting right next to you takes a good second. That's because your message has to travel physically from your computer to Facebook’s servers some 50, 60 router hops away. From a networking point of view this is terribly suboptimal. Ideally, this packet should travel just about 20 feet—and this is what WebRTC allows us to do. The entire topology of networking is changing from something that looks like a spider to something that is more like a web,&quot; Bu says.
</blockquote> 
<p>Embracing this new ecosystem, PeerJS is meant to wrap the complexity of the WebRTC spec into a digestible api:</p> 
<ul> 
 <li><i>Use Chrome version 26 or higher.</i> At this time, that means versions of<a href="https://www.google.com/intl/en/chrome/browser/canary.html">canary</a> or <a href="https://www.google.com/intl/en/chrome/browser/beta.html">beta</a> are the only browsers that work. Watch the WebRTC status for <a href="http://peerjs.com/status">browser compatibility updates</a> in the coming months. Bu estimates interoperability with the latest versions of Firefox to be 2-3 months out.</li> 
 <br /> 
 <li><i>Set up a PeerServer.</i> Either <a href="http://peerjs.com/peerserver">sign up</a> for the hosted variant, <a href="https://github.com/peers/peerjs-server">grab the source</a> and build your own, or <code> npm install peer</code> on node.js. &quot;Once you connect to a peer, you no longer need the server anymore unless you plan to connect to more peers,&quot; Bu says.</li> 
 <br /> 
 <li><i>Spin up the code.</i> Take a look at the <a href="https://github.com/peers/peerjs/blob/master/examples/helloworld.html">hello world example</a> to see how &quot;PeerJS saves you the trouble of having to build and running a brokering server and having to understand all of the intricacies of the WebRTC PeerConnection and DataChannel spec, which includes countless handlers that need to be set, edge cases that need to be considered, and browser differences that need to be handled,&quot; Bu says.</li> 
</ul> 
<p>Outside of the handful of chat demos, examples of PeerJS in the wild are rare given the fluid nature of the WebRTC spec. An exception is <a href="http://peerkit.com/">PeerKit</a>, an emerging project created by Zhang as a P2P CDN. “Imagine a world where cat images are served from the guy next to you in a coffee shop who happens to be browsing the same site instead of a central server in Nevada,” Bu says.</p> 
<p>A coming generation of apps built atop stateful, bi-directional data transfers between browsers is likely a couple years out, but in the interim, &quot;[WebRTC is] a party for developers,&quot; Bu says. &quot;There are definitely lots of technical problems to tackle when considering all state to be held in the clients.&quot;</p> 
<p id="lastElm"></p><br><br><br><br><br><br></body></html>