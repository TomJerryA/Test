<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Gulp Aiming to Dethrone Grunt</h3><p><a href="http://www.wearefractal.com/">Fractal</a>, a company who has been actively involved in the development of several popular Node.js modules has just released <a href="http://gulpjs.com">gulp</a>, a new building system which is trying to replace Grunt as the most popular JavaScript task-runner.</p>
<p>According to gulp's documentation, the main characteristics this tool is trying to achieve are:</p>
<ul> 
 <li>Easy to use: by preferring code over configuration, gulp keeps simple things simple and makes complex tasks manageable.</li> 
 <li>Efficient: by harnessing the power of node's streams you get fast builds that don't write intermediary files to disk.</li> 
 <li>High Quality: gulp's strict plugin guidelines assure plugins stay simple and work the way you expect.</li> 
 <li>Easy to Learn: with a minimal API surface, you can pick up gulp in no time. Your build works just like you envision it: a series of streaming pipes.</li> 
</ul>
<p>Gulp tries to simplify the writing of tasks using streams and code-over-configuration which can be seen as a &quot;jQuery like&quot; approach for chaining actions and creating build tasks. Streams have been around since the earliest days of UNIX and are a very important part of Node.js ecosystem, so writing in gulp can be seen as writing in Node.js. While making use of streams, gulp gets rid of intermediary files and only the final output is written to disk which makes the whole process faster. By preferring code-over-configuration, gulp keeps simple things simple and makes complex tasks manageable.</p>
<p>Just as any task-runner, every task can be a simple unit-of-work:</p>
<pre><p>var gulp = require('gulp'); <br />var uglify = require('gulp-uglify');</p><p>gulp.task('scripts', function() {&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;return gulp<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.src(['src/js/**/*.js'])<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(uglify())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest('build/js'));&nbsp;&nbsp;&nbsp;&nbsp; <br />});</p></pre>
<p>Or have dependencies from other tasks:</p>
<pre><p>gulp.task('default-task', function(){<br />&nbsp;&nbsp;&nbsp;gulp.run('scripts'); <br />&nbsp;&nbsp;&nbsp;// watch files and run scripts if they change <br />&nbsp;&nbsp;&nbsp;gulp.watch(&quot;./src/**/*.js&quot;, function(event { <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gulp.run('scripts'); <br />&nbsp;&nbsp;&nbsp;});<br />);</p></pre>
<p>Besides being more verbose, other complaints about Grunt refers to the fact that a lot of plugins do more than they should. <a href="http://markgoodyear.com/2014/01/getting-started-with-gulp/">On a blog post</a>, Mark Goodyear shows the example of Grunt’s imagemin, which not only compress images but also uses caching. According to him, with gulp the cache is an extra plugin that can be used by other plugins and this promotes reusability.</p>
<p>Checking <a href="https://github.com/gulpjs/gulp/network">gulp’s code repository activity</a> and the number of <a href="https://github.com/gulpjs/gulp/stargazers">stargazers</a> on github, one can see this build system is starting to gain momentum. It also has already received a lot of interest from the JavaScript community: <a href="https://twitter.com/addyosmani">Addy Osmani</a>, lead developer at Yeoman, <a href="https://github.com/yeoman/yeoman/issues/1232">opened an issued</a> for the Yeoman team to review gulp as a replacer for the current build system. <a href="https://twitter.com/sindresorhus">Sindre Sorhus</a>, part of the Yeoman team and leading NPM contributor, wrote a <a href="http://robo.ghost.io/getting-started-with-gulp-2/">blog post about gulp</a> and as referred to it on Twitter as “Think Grunt, but faster and less config”.</p><br><br><br><br><br><br></body></html>