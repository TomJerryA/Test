<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>ReactiveCocoa - iOS开发的新框架</h3><p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>（其简称为RAC）是由<a href="https://github.com/blog/1107-reactivecocoa-for-a-better-world">Github</a> 开源的一个应用于iOS和OS X开发的新框架。RAC具有函数式编程和响应式编程的特性。它主要吸取了.Net的 <a href="http://msdn.microsoft.com/en-us/data/gg577609">Reactive Extensions</a>的设计和实现。本文将详细介绍该框架试图解决什么问题，以及其用法与特点。</p>
<h2>ReactiveCocoa试图解决什么问题</h2>
<p>经过一段时间的研究，我认为ReactiveCocoa试图解决以下3个问题：</p>
<ol> 
 <li>传统iOS开发过程中，状态以及状态之间依赖过多的问题</li> 
 <li>传统MVC架构的问题：Controller比较复杂，可测试性差</li> 
 <li>提供统一的消息传递机制</li> 
</ol>
<h3>传统iOS开发过程中，状态以及状态之间依赖过多的问题</h3>
<p>我们在开发iOS应用时，一个界面元素的状态很可能受多个其它界面元素或后台状态的影响。</p>
<p>例如，在用户帐户的登录界面，通常会有2个输入框（分别输入帐号和密码）和一个登录按钮。如果我们要加入一个限制条件：当用户输入完帐号和密码，并且登录的网络请求还未发出时，确定按钮才可以点击。通常情况下，我们需要监听这两个输入框的状态变化以及登录的网络请求状态，然后修改另一个控件的<code>enabled</code>状态。</p>
<p>传统的写法如下（该示例代码修改自<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa官网</a> ） ：</p>
<pre>
static void *ObservationContext = &amp;ObservationContext;
(void)viewDidLoad {
    [super viewDidLoad];
    
    [LoginManager.sharedManager addObserver:self
             forKeyPath:@&quot;loggingIn&quot;
                                    options:NSKeyValueObservingOptionInitial
             context:&amp;ObservationContext];
    [self.usernameTextField addTarget:self action:@selector(updateLogInButton)
             forControlEvents:UIControlEventEditingChanged];
    [self.passwordTextField addTarget:self action:@selector(updateLogInButton)
            forControlEvents:UIControlEventEditingChanged];
}

- (void)updateLogInButton {
    BOOL textFieldsNonEmpty = self.usernameTextField.text.length &gt; 0 
&amp;&amp; self.passwordTextField.text.length &gt; 0;
    BOOL readyToLogIn = !LoginManager.sharedManager.isLoggingIn &amp;&amp; !self.loggedIn;
    self.logInButton.enabled = textFieldsNonEmpty &amp;&amp; readyToLogIn;
}

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object
                        change:(NSDictionary *)change context:(void *)context {
    if (context == ObservationContext) {
        [self updateLogInButton];
    } else {
        [super observeValueForKeyPath:keyPath ofObject:object
                               change:change context:context];
    }
}
</pre>
<p>RAC通过引入信号（Signal）的概念，来代替传统iOS开发中对于控件状态变化检查的代理（delegate）模式或target-action模式。因为RAC的信号是可以组合（combine）的，所以可以轻松地构造出另一个新的信号出来，然后将按钮的<code>enabled</code>状态与新的信号绑定。如下所示：</p>
<div id="lowerFullwidthVCR"></div>
<pre>
RAC(self.logInButton, enabled) = [RACSignal
    combineLatest:@[
        self.usernameTextField.rac_textSignal,
        self.passwordTextField.rac_textSignal,
        RACObserve(LoginManager.sharedManager, loggingIn),
        RACObserve(self, loggedIn)
    ] reduce:^(NSString *username, NSString *password, NSNumber *
loggingIn, NSNumber *loggedIn) {
        return @(username.length &gt; 0 &amp;&amp; password.length &gt; 0 &amp;&amp; !
loggingIn.boolValue &amp;&amp; !loggedIn.boolValue);
    }];</pre>
<p>可以看到，在引入RAC之后，以前散落在<code>action-target</code>或KVO的回调函数中的判断逻辑被统一到了一起，从而使得登录按钮的<code>enabled</code>状态被更加清晰地表达了出来。</p>
<p>除了组合（combine）之外，RAC的信号还支持链式（chaining）和过滤（filter)，以方便将信号进行进一步处理。</p>
<h3>试图解决MVC框架的问题</h3>
<p>对于传统的<a href="http://zh.wikipedia.org/zh-cn/MVC">Model-View-Controller</a>的框架，Controller很容易变得比较庞大和复杂。由于Controller承担了Model和View之间的桥梁作用，所以Controller常常与对应的View和Model的耦合度非常高，这同时也造成对其做单元测试非常不容易，对iOS工程的单元测试大多都只在一些工具类或与界面无关的逻辑类中进行。</p>
<p>RAC的信号机制很容易将某一个Model变量的变化与界面关联，所以非常容易应用<a href="http://en.wikipedia.org/wiki/Model_View_ViewModel">Model-View-ViewModel</a> 框架。通过引入ViewModel层，然后用RAC将ViewModel与View关联，View层的变化可以直接响应ViewModel层的变化，这使得Controller变得更加简单，由于View不再与Model绑定，也增加了View的可重用性。</p>
<p>因为引入了ViewModel层，所以单元测试可以在ViewModel层进行，iOS工程的可测试性也大大增强了。InfoQ也曾撰文介绍过MVVM：<a href="http://www.infoq.com/cn/articles/mvvm-revelation/">《MVVM启示录》</a> 。</p>
<h3>统一消息传递机制</h3>
<p>iOS开发中有着各种消息传递机制，包括KVO、Notification、delegation、block以及target-action方式。各种消息传递机制使得开发者在做具体选择时感到困惑，例如在objc.io上就有<a href="http://www.objc.io/issue-7/communication-patterns.html">专门撰文</a>（<a href="http://beyondvincent.com/blog/2013/12/14/124-communication-patterns/">破船的翻译</a> ），介绍各种消息传递机制之间的差异性。</p>
<p>RAC将传统的UI控件事件进行了封装，使得以上各种消息传递机制都可以用RAC来完成。示例代码如下：</p>
<pre>
// KVO
[RACObserve(self, username) subscribeNext:^(id x) {
    NSLog(@&quot;成员变量 username 被修改成了：%@&quot;, x);
}];

// target-action
self.button.rac_command = [[RACCommand alloc] initWithSignalBlock:
^RACSignal *(id input) {
    NSLog(@&quot;按钮被点击&quot;);
    return [RACSignal empty];
}];

// Notification
[NSNotificationCenter.defaultCenter addObserver:self 
        selector:@selector(keyboardDidChangeFrameNotificationHandler:) 
        name:UIKeyboardDidChangeFrameNotification object:nil]; </pre>
<p>RAC的<code>RACSignal</code> 类也提供了<code>createSignal</code>方法来让用户创建自定义的信号，如下代码创建了一个下载指定网站内容的信号。</p>
<pre>
(RACSignal *)urlResults {
    return [RACSignal createSignal:^RACDisposable *(id
 <racsubscriber>
   subscriber) {         NSError *error;         NSString *result = [NSString stringWithContentsOfURL:             [NSURL URLWithString:@&quot;http://www.devtang.com&quot;]              encoding:NSUTF8StringEncoding   error:&amp;error];         NSLog(@&quot;download&quot;);         if (!result) {             [subscriber sendError:error];         } else {             [subscriber sendNext:result];             [subscriber sendCompleted];         }         return [RACDisposable disposableWithBlock:^{             NSLog(@&quot;clean up&quot;);         }];     }];  }
 </racsubscriber></pre>
<h2>如何使用ReactiveCocoa</h2>
<p>ReactiveCocoa可以在iOS和OS X的应用开发中使用，对于iOS开发者，可以将<a href="https://github.com/ReactiveCocoa/ReactiveCocoa.git">RAC源码</a>下载编译后，使用编译好的<code>libReactiveCocoa-iOS.a</code>文件。</p>
<p>开发者也可以用<a href="http://cocoapods.org/">CocoaPods</a>来设置目标工程对ReactiveCocoa的依赖，只需要编辑Podfile文件，增加如下内容即可：</p>
<pre>
pod 'ReactiveCocoa', ‘2.0'</pre>
<h2>ReactiveCocoa的特点</h2>
<p>RAC在应用中大量使用了block，由于Objective-C语言的内存管理是基于<a href="http://zh.wikipedia.org/zh-cn/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0">引用计数</a> 的，为了避免循环引用问题，在block中如果要引用self，需要使用<code>@weakify(self)</code>和<code>@strongify(self)</code>来避免强引用。另外，在使用时应该注意block的嵌套层数，不恰当的滥用多层嵌套block可能给程序的可维护性带来灾难。</p>
<p>RAC的编程方式和传统的MVC方式差异巨大，所以需要较长的学习时间。并且，业界内对于RAC并没有广泛应用，这造成可供参考的项目和教程比较欠缺。另外，RAC项目本身也还在快速演进当中，1.x版本和2.x版本API改动了许多，3.0版本也正在快速开发中，对它的使用也需要考虑后期的升级维护问题。</p>
<p>作为一个iOS开发领域的新开源框架，ReactiveCocoa带来了函数式编程和响应式编程的思想，值得大家关注并且学习。</p>
<h3>作者简介：</h3>
<p>唐巧，资深iOS开发者和Blogger，曾开发有道云笔记、猿题库和粉笔网的iOS客户端。他维护着iOS开发博客 http://www.devtang.com/ 和微信 iOS开发公众账号 iosDevTips。唐巧在<a href="http://qconbeijing.com">2014年QCon北京</a>将进行一场iOS开发进阶的培训，介绍<a href="http://www.qconbeijing.com/node/465">如何基于CoreText自己实现一个排版引擎</a>。</p><br><br><br><br><br><br></body></html>