<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>SOLID Design Principles for JavaScript</h3><p>Many developers have worked in object oriented languages and many are working in JavaScript but very few use object orientation principles together with JavaScript, <a href="http://lostechies.com/derickbailey/">Derick Bailey</a>, an author and developer focusing on JavaScript, stated in a recent <a href="http://www.youtube.com/watch?v=TAVn7s-kO9o">presentation</a> at <a href="http://codemash.org/">CodeMash</a>. In object oriented programming we talk about foundations and principles as a base for our work but when moving from class based static languages to loosely typed, not class based languages, we often find it hard to apply the same principles.<br /> Derick claims there are a lot of good principles, practices and patterns available in order to help developers writing good stable JavaScript code, one example being the <a href="http://en.wikipedia.org/wiki/SOLID">SOLID</a> principles, identified by <a href="http://en.wikipedia.org/wiki/Robert_c_martin">Robert C. Martin</a>, in the early 2000s.<br /> Derick describes the SOLID principles as five individual patterns that play well together and walks through all five using code samples and looking at some idiosyncrasies in JavaScript that makes applying these principles a little bit different compared to when using them in languages like Java and C#.<br /> Derick’s definition of the five principles are:</p>
<ul> 
 <li><b>Single Responsibility Principle</b>. Everything should have only one reason to change. This will help developers understand the context and responsibility of what they are building and when there is a need for change.</li> 
 <li><b>Open-Closed Principle</b>. A change in behaviour should be possible without changing existing code, e.g. by using extension points and creating code that can be plugged in.</li> 
 <li><b>Liskov Substitution Principle</b>. Derived objects or types must be substitutable for their base. For Derick this is a more focused version of the Open-Closed principle.</li> 
 <li><b>Interface Segregation Principle</b>. A client should not be forced to depend on interfaces it doesn’t use. A problem is that there are no explicit interfaces in JS, but there are ways around this.</li> 
 <li><b>Dependency Inversion Principle</b>. Consists of two concepts, abstraction which states that we should depend on abstractions, not on concrete implementations and ownership that states that low level implementation should depend on high level concepts.</li> 
</ul>
<p>Derick ends with stating that if you have large monolithic chunks of code in your system, SOLID will help you break these into individual pieces. It will not decrease complexity, but will help you create abstractions and group details into larger concepts that we can reason about.</p><br><br><br><br><br><br></body></html>