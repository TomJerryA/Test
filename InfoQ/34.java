<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>FutureOps with Immutable Infrastructures and Built-in Failure Recovery</h3><p>Mitchell Hashimoto, creator of <a href="http://www.vagrantup.com/">Vagrant</a>, gave a talk last month at <a href="http://velocityconf.com/velocityeu2013">Velocity Conf London</a> about his vision for a “FutureOps” with <a href="http://www.infoq.com/news/2013/08/immutable-servers">immutable infrastructures</a> and built-in failure recovery.</p>
<p><span lang="EN-GB">Mitchell’s vision encompasses repeatable environments (through configuration management tools) and extremely fast deployments times (through pre-built static images) and service orchestration times (through decentralized orchestration tools). I</span>n this scenario provisioning a new server behaves no different from replacing a failing server.
 <o:p></o:p></p>
<p class="MsoNormal">This vision relies on the idea of <span lang="EN-GB">immutable infrastructures where machines are configured at startup and never modified again. Any later environment change results in a new machine deployment that replaces the outdated immutable machine (with some caveats such as complex database server changes or small application changes like a CSS modification for example). This <a href="http://www.slideshare.net/MaheshKumar135/uncertain-infrastructure-2">idea has been deemed utopian</a> by some due to the large number of external dependencies in any system today. </span></p>
<p class="MsoNormal"><span lang="EN-GB">For Mitchell those issues are accentuated by current configuration management tools such as <a href="http://puppetlabs.com/">Puppet</a> or <a href="http://www.getchef.com/">Chef</a>. Repeatable deployments of the same server are hard to guarantee due to dependencies on packages, network availability or changes in the environment descriptions (<a href="http://docs.opscode.com/essentials_cookbooks.html">cookbooks</a> in Chef or <a href="http://docs.puppetlabs.com/learning/manifests.html#manifests">manifests</a> in Puppet). The key to predictability, says Mitchell, is to use machine images (binaries) that have been pre-built and tested, akin to software binaries compiled from source code. </span></p>
<p class="MsoNormal">According to Mitchell, machine images gained a bad reputation in the past due to the difficulty to maintain them. But with the current configuration management tools images can now evolve easily and be built in a continuous integration style. New tools such as <a href="http://sysadvent.blogspot.pt/2013/12/day-14-what-is-packer.html">Packer</a> simplify the task further by building images for multiple <a href="http://en.wikipedia.org/wiki/Hypervisor">hypervisors</a> (VirtualBox, VMWare, etc) based on a single set of templates and environment descriptions.
 <o:p></o:p></p>
<p class="MsoNormal">However, service discovery and orchestration tasks (like setting up load balancing), still have to take place after deployment of the image (as opposed to being part of the deployment process itself). <a href="http://sysadvent.blogspot.pt/2013/12/day-13-controlling-cluster-of-servers.html">Serf</a> is another tool developed by Mitchell to help in this domain. According to Mitchell, Serf was designed to support failure detection and recovery by relying on loosely coupled agents and gossip-based membership (a new agent must contact an existing one to join the system). Similarly, an agent might detect a failing node and “gossip” the news to other agents which will then decide if it needs to be replaced.
 <o:p></o:p></p>
<p class="MsoNormal">The main benefits, says Mitchell, include the speed of orchestration and the simplification of the configuration management process (only needs to configure the Serf agent service, Serf then starts automatically at machine startup) during the machine image generation. 
 <o:p></o:p></p>
<p class="MsoNormal">During the Q&amp;A Mitchell also mentioned that he sees no problem in the cohabitation of Docker (for application containers), Packer (for common infrastructure) and Serf (for service orchestration).
 <o:p></o:p></p><br><br><br><br><br><br></body></html>