<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Datomic情報モデル</h3><p><a target="_blank" href="http://www.infoq.com/articles/Datomic-Information-Model;jsessionid=E6CC641DC7CBE8FC1321660CDD1E8FB9"><em>原文(投稿日：2013/02/01)へのリンク</em></a></p><p><a target="_blank" href="http://datomic.com">Datomic</a>は、シンプルなサービスで組み立てられた新しいデータベースです。従来のRDBMSの機能性と新世代の冗長な分散ストレージシステムの柔軟なスケイラビリティを両立しようとしています。</p><h2>動機</h2><p>Datomicは、次のゴールを目指しています。</p><ul> 
 <li>その場で更新しない、堅牢な情報モデルの提供</li> 
 <li>冗長でスケーラブルなストレージシステムの強化</li> 
 <li>ACIDトランザクションと一貫性の提供</li> 
 <li>アプリケーションでの宣言的なデータプログラミング</li> 
</ul><p>Datomicは、<em>情報システム</em>であるデータベースと考えられています。情報は事実の集合であり、事実は起きたことです。人は過去を変えられません。つまり、データベースはその部分を更新するのではなく、事実を<em>蓄積する</em>ものなのです。過去は忘れられる一方で、変えることはできません。そのため、誰かが住所を「変更」したら、Datomicは過去の事実を置き換えるのではなく、新しい住所を持つという事実を記憶します。(現時点のことが単に格納されています。) この不変性により、数多くの重要なアーキテクチャに関する利点と機会が生まれます。<a target="_blank" href="http://www.infoq.com/jp/articles/Architecture-Datomic;jsessionid=E6CC641DC7CBE8FC1321660CDD1E8FB9">前回の記事</a>では、Datomicアーキテクチャのことを書きました。この記事では、情報モデルとプログラミングの経験に注目します。</p><p>従来のデータベース(と数多くの新しいデータベース!)は、<em>「今」</em>、目の前にある事実、に注目しますが、そうすることで情報を失っています。ビジネスは歴史的情報の中により多くの価値を見出し、その情報を保存しない理由はほとんどありません。バックアップやログのように、単に履歴を手元に残すかどうかという問題ではなく、アクティブな意思決定プロセスをサポートできるようにするのです。あなたに荷物を送るために現住所を知っておくことは、ビジネス上必要ですが、<em>「どの顧客が頻繁に引っ越しをするのか、そして、どこから移動するのか?」</em>というのは、マーケティング部門や製品開発チームにとって、とても興味深いことかもしれません。サプライヤ価格の履歴等も同様です。サプライヤは、サプライヤ価格の履歴を知るために、バックアップを復元したり、ログを再読み込みしたりしたくはないでしょう。</p><p>なぜアクティブな履歴を保持することが問題になるのか考えてみるのはおもしろいでしょう。結局、コンピュータ以前は、記録をどんどん増やし続けました。あることわざのように「会計士は消しゴムを使いません。」 私の推測では、初期の計算システムは単にその容量を持っていませんでした。(または、誰もその余裕がありませんでした) しかし、この推測は再考に値します。過去25年間で容量は何百万倍も増加しています。自分たちのコードベースがもはやフロッピィディスクに合わないからといって、gitのような版管理システムを使わない開発者がいるでしょうか?</p><p>データベースは、主にデータを通して提供する力のおかげでデータベースだと言えます。他の点では、単なるストレージシステムです。通常、この力は、データの組織化 (例えば、インデックス) と、組織に影響を与えるクエリシステムの組み合わせから来ています。開発者たちは、興味深い、ますます広く使われる冗長な分散<em>ストレージシステム</em>を、自由に手に入れていますが、しばしばその影響力を失っています。Datomicはこれらのストレージシステム上で動き、スケイラビリティや組織化した情報の保存、そして、開発者自身の手に力を取り戻そうとしています。</p><h2>構造と表現</h2><p>データベースは、リレーション、列とドキュメント等、そのモデルの下部にある基本ユニットを持ちます。Datomicのユニットは、私たちが<strong>Datom</strong>と呼ぶ原子的な<em>事実</em>です。</p><p>Datomは以下のコンポーネントを持ちます。</p><ul> 
 <li>Entity</li> 
 <li>Attribute</li> 
 <li>Value</li> 
 <li>Transaction (データベース時間)</li> 
 <li>Add/Retract</li> 
</ul><p>この表現は、<a target="_blank" href="http://en.wikipedia.org/wiki/Resource_Description_Framework">RDF</a>ステートメントのSubject/Predicate/Objectデータモデルと明らかに似ています。しかし、時間の経過を表す概念や取り消しの適切な表現がないため、RDFステートメントは履歴情報を十分に表現できません。ビジネス情報システム指向であるDatomicはクローズドワールドの仮定を採用しています。そして、<a target="_blank" href="http://en.wikipedia.org/wiki/Semantic_Web">semantic web</a>の万国共通の名前を持ち、オープンワールドで共有されたセマンティクスへの挑戦を避けています。Datomは事実の必要最小限の表現です。</p><p>モデルの底に原子ユニットを持つことで、トランザクション等の新しいものの表現は、新しい事実自体の大きさでしかありません。これに対して、一部を更新するためにドキュメント全体を再提出したり、それを避けようとしてデルタスキーマで不安定になったりすることを比べてみましょう。</p><p>Datomは、1つのフラットで普遍的なリレーションを構成します。Datomicに対する構造的なコンポーネントは他にありません。これは重要です。モデルに構造的なコンポーネントが増えれば増えるほど、アプリケーションは柔軟性を失っていきます。例えば、従来のリレーショナルデータベースでは、リレーションはそれぞれ名前を持たなければならず、データを配置するにはそれらの名前を知らなければなりません。さらに悪いことに、例えば、many-to-manyリレーション等のモデルを作成するために任意のジョインテーブルを作成する必要があります。これらの構造の名前は、同様に知られていなければなりません。物理的な構造化決定からアプリケーションを分離するために、論理ビューを提供するよう最大限の努力を払わなければならないでしょう。しかし、これらのビューは同様に数が多くて、固有のものになっています。ドキュメント内の階層はアプリケーションの中でハードコーディングされているので、構造から間接的に提供するビューのようなツールがあるとしても、ドキュメントの保存は構造的にさらに変更が難しいでしょう。</p><h2>スキーマ</h2><p>すべてのデータベースにはスキーマがあります。その違いは、どれだけ明示的なスキーマをサポートするか、または、必要とするかということです。Datomicの場合、属性は使用前に定義しなければなりません。</p><p>属性はエンティティそのものであり、とりわけ以下の属性があります。</p><ul> 
 <li>名前</li> 
 <li>値のデータ型</li> 
 <li>カーディナリティ (属性が複数の値を持てる)</li> 
 <li>一意性</li> 
 <li>インデックスプロパティ</li> 
 <li>コンポーネントの本質 (あなたの足はあなたのコンポーネントだが、あなたの母親はそうではない。)</li> 
 <li>ドキュメンテーション</li> 
</ul><p>エンティティに当てはまる属性に制約はありません。そのため、エンティティはオープンでわずかしかありません。属性はエンティティの中で共有され、名前空間は衝突を避けるために使われます。次のように指定します。</p><pre>
:person/name</pre><p>属性:&nbsp;</p><pre>
{:db/ident       :person/name,
&nbsp;:db/valueType   :db.type/string,
&nbsp;:db/cardinality :db.cardinality/one,
&nbsp;:db/doc         &quot;A person's name&quot;}</pre><p>Datomicのすべての相互作用のようにスキーマは、上記で<a target="_blank" href="http://edn-format.org">edn形式</a>のマップで表しているデータによって表されます。DDLはありません。</p><p>これら単純なdatomのプリミティブ型と、ほんのわずかで、おそらく複数の値を持つ属性を用いて、スキーマは、行のタプル、階層的なドキュメントのエンティティ、列保存のカラム、グラフ等を表します。</p><h2>トランザクション</h2><p>最も基本的なレベルにおいて、Datomicのトランザクションは、原子的にデータベースに送られて受け入れられたアサーションや取り消しの単なる一覧です。基本的なトランザクションは、ただのdatomの一覧です。</p><pre>
[[:db/add entity-id attribute value]
&nbsp;[:db/add entity-id attribute value]...]</pre><p>もう一度言いますが、Datomicのすべての相互作用は、データによって表されます。上記では、<em>edn</em>形式で一覧にしたものを表しています。内部リストは次のような順番でdatomを表しています。</p><pre>
[op entity attribute value]</pre><p>同じエンティティで複数の事実をデータベースに送りたければ、代わりにマップを利用できます。</p><pre>
[{:db/id entity-id,
&nbsp;&nbsp;attribute value,
&nbsp;&nbsp;attribute value}
&nbsp;...]</pre><p>記事の中では、このようにテキストで表現する必要がありますが、トランザクションが実は普通のデータ構造(すなわち、j.u.Lists、j.u.Maps、配列等)であり、使用する言語で構築できるものであることは、Datomicの設計にとってとても重要なことです。Datomicへの第一のインタフェースは、文字列でもDMLでもなく、データです。</p><p>datomのトランザクションの決め方に注意してください。決めるのはトランザクタです。そうは言っても、トランザクションはそれ自体エンティティであり、その起源となるメタデータ、外部時間、起点となるプロセス等、トランザクション自体の事実をアサートできます。</p><p>もちろん、すべての変換が、最後の人が勝つレースやコンフリクトに委ねられることなく、単なるアサーションや取り消しとして表されるのではありません。このように、Datomicはデータベース関数の概念をサポートします。これらはJavaやClojure等、普通のプログラミング言語で書かれた関数であり、もちろんトランザクション中にデータとして送信されて、データベースにインストールされています。一度インストールされると、データベース関数の「call」は、トランザクションの一部になります。</p><pre>
[[:db/add entity-id attribute value]
&nbsp;[:my/giveRaise sally-id 100]
&nbsp;...]</pre><p>トランザクションの一部として使われる時、データベース関数はトランザクション関数とみなされます。そして、<em>データベース自体のトランザクション内の値</em>である追加された最初の引数が渡されます。このようにして、関数はクエリ等を実行します。トランザクション関数はトランザクションデータを返さなければなりません。返されるデータが何であれ、トランザクション内で置き換えられます。すべてのトランザクション関数が単純なadd/retractを返すまで、このプロセスが繰り返されます。こうして、上記のトランザクション内で、giveRaise関数はSallyの現在の給与を調べ、45,000であることを見つけ出し、新しい値に関するアサーションを返し、トランザクションデータの結果は次のように表されます。</p><pre>
[[:db/add entity-id attribute value]
&nbsp;[:db/add sally-id :employee/salary 45100]
&nbsp;...]</pre><p><em>:employee/salary</em>はカーディナリティが1なので、Sallyの給与にこの事実を追加することは、暗に前の事実を取り消します。トランザクション関数はトランザクション内で原子的に連続して実行されるので、任意のコンフリクトのない変換を実行するのに使われます。データベース関数については、<a target="_blank" href="http://docs.datomic.com/database-functions.html">このドキュメント</a>でさらに読むことができます。</p><h2>コネクションとデータベースの値</h2><p>書き出し側について、特に変わったことはありません。URIを利用してデータベースに接続します。URIは、ストレージへ到達する方法やストレージを通して現在の処理者と通信する方法等の情報を含んでいます。トランザクションは上記で述べたようにトランザクションデータを渡して、接続中に<em>transact</em>関数を呼ぶことで発生します。</p><p>読み込み側では、全く異なります。従来のデータベースでは、読み込みとクエリも接続関数です。接続中にクエリを渡し、現在のデータベースの状態の通常は再生できないコンテキストの中で実行されるサーバに到達します。これは、サーバに埋め込まれたクエリ言語の制限次第であり、ライタを含む他のすべてのユーザと共に、リソースと同期を奪い合います。</p><p>一方、Datomicでは接続の唯一のread操作はdb()であり、実際に回線を通じて読み出すのではありません。その代わりに、接続は継続的に十分な情報を送り続け、アプリケーション内で不変なオブジェクトとして使うデータベースの値をすぐに届けます。このようにデータの消費やクエリ等はローカルで起こります。 (エンジンは、必要に応じてデータを取得するためにストレージを自由に読み出します。) データベース全体がアプリケーション毎のサーバピアに保持されているのではないことに注意してください。保持されているのは、最新部分とストレージのその他の部分へのポインタだけです。また、「スナップショットをとる」操作は起きません。アプリケーションやクエリエンジンはデータベースを所有している感じがしますが、実際にはかなり軽く、メモリとストレージの<a target="_blank" href="http://en.wikipedia.org/wiki/Persistent_data_structure">永続するデータ構造</a>への2、3の参照があるだけです。広範囲に渡るキャッシングが内部で起きています。</p><h2>クエリ</h2><p>Datomicでは、クエリは接続関数ではなく、データベース関数でもありません。その代わり、クエリは引数として1つ以上のデータソースをとるスタンドアロン関数です。これらのデータソースはデータベースの値や普通のデータコレクション、または、その組み合わせでしょう。これは、データベースのコンテキスト内で実行されることからクエリを自由にする大きな恩恵をもたらします。</p><p>Datomicピアライブラリには、<a target="_blank" href="http://en.wikipedia.org/wiki/Datalog">Datalog</a>に基づくクエリエンジンが付属しています。Datalogは、クエリされたdatomとインメモリコレクションに向いている、パターンマッチング風のロジックに基づく宣言型クエリ言語です。</p><p>クエリの基本型は以下の通りです。</p><pre>
{:find [variables...] :where [clauses...]}</pre><p>または、次のようにタイプするのが簡単なリスト形式があります。</p><pre>
[:find variables... :where clauses...]</pre><p>もう一度言いますが、これらは、プログラム的に構築できるデータ構造をただテキストで表したものです。クエリはデータであり、文字列ではありません。文字列は提供されたときに、受け入れられてデータに変換されます。</p><p>これらのdatomを含むデータベースがある場合、(sally、fred、ethelはエンティティIDの代わりです)</p><pre>
[[sally :age 21]
&nbsp;[fred :age 42]
&nbsp;[ethel :age 42]
&nbsp;[fred :likes pizza]
&nbsp;[sally :likes opera]
&nbsp;[ethel :likes sushi]]</pre><p>次のようなクエリが書けます。</p><pre>
;;who is 42?
[:find ?e :where [?e :age 42]]</pre><p>結果は以下の通りです。</p><pre>
[[fred], [ethel]]</pre><p><em>:where</em>節は位置的に一致し、データソースにとって各datomは以下のタプルと一致します。</p><pre>
[entity attribute value transaction].</pre><p>この場合のトランザクションである右側は省略できます。?で始まるシンボルは、変数であり、その結果には一致するソースタプルの変数の値であるタプルが含まれます。</p><p>Joinは暗に示され、1回以上変数を使ったときにはいつでも起こります。</p><pre>
;;which 42-year-olds like what?
[:find ?e ?x
&nbsp;:where [?e :age 42]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[?e :likes ?x]</pre><p>結果は以下のようになります。</p><pre>
[[fred pizza], [ethel sushi]]</pre><p>クエリのAPIは<em>q</em>と呼ぶ関数です。</p><pre>
Peer.q(query, inputs...); </pre><p><em>inputs</em>はデータベース、コレクション、スカラ等です。クエリは、また、(再起的な)ルールを利用し、自分自身のコードを呼びます。クエリに関する情報は、<a target="_blank" href="http://docs.datomic.com/query.html">こちらのドキュメント</a>で参照できます。</p><p>全部まとめると以下の通りです。</p><pre>
//接続
Connection conn = Peer.connect(&quot;a-db-URI&quot;);
//データベースの現在の値を取得
Database db = conn.db();
//ストリングを使う。Javaはコレクションを持たない。
String query = &quot;[:find ?e :where [?e :likes pizza]]&quot;;
//誰がピザを好きか?
Collection result = Peer.q(query, db);</pre><h2>同じクエリ、異なる基礎</h2><p>dbがすべての履歴情報を持つという事実を活用すると、物事はおもしろくなり始めます。</p><pre>
//先週、ピザを好きだったのは誰?
Peer.q(query, db.asOf(lastTuesday));</pre><p>データベースの<em>asOf</em>メソッドは、日付時間やトランザクションによって決められる前回のポイントで、そのデータベースのビューを返します。接続を戻したり、クエリを変更したりしないことに注意してください。今まで自分のタイムスタンプを動かしたことがあるならば、一時的に当てはまるクエリが、普通、｢今」とは異なることをお分かりでしょう。似たようなものでは、<em>since</em>メソッドがあります。</p><pre>
//もしBrooklynのみんなを追加したらどうなるだろうか?
Peer.q(query, db.with(everyoneFromBrooklyn));</pre><p><em>with</em>メソッドはトランザクションデータを取得して、データが追加されたデータベースのローカルの値を返します。接続を通してトランザクションは発生しません。このように推論的な仮のクエリを実行したり、トランザクションが発生したりする前に、トランザクションデータを確認できます。また、<em>filter</em>メソッドは、ある属性によってフィルタリングされたデータベースを返します。もう一度言いますが、この時に接続やdb、クエリには触れていません。</p><p>それでは、データベースを設定せずにクエリをテストしたい場合はどうでしょうか? 同じ形でデータを提供できます。</p><pre>
//データベースを使わずにクエリをテストする
Peer.q(query, aCollectionOfListsWithTestData);</pre><p>ここでまた言いますが、クエリは変更されていなくても、実際に動いています。対照的に、データベース接続をモックしています。</p><p>今までのところ、すべてのテクニックは、過去か未来の特定のポイントで動いています。しかし、多くの興味深い分析では、時間を超えて見たいはずです。</p><pre>
//今までピザが好きだった人は誰?
Peer.q(query, db.history());</pre><p><em>history</em>メソッドは、時間を超えてすべてのdatomを返します。これは、<em>asOf</em>等と組み合わせられます。このクエリはそのままの状態で動くために使われますが、通常、時間を超えるクエリは異なっていて、集合体等になります。</p><p>クエリは1つ以上のデータソースを取得でき、データベースを簡単に組み合わせたり、同じデータベースの様々なビューを使ったりすることができます。クエリにコレクションを渡せることは、ステロイド剤を使用したパラメータ化状態のようなものです。</p><h2>異なるクエリ(または、参加者)、同じ基礎</h2><p>データベースの値は不変なため、トランザクションではないマルチステップの計算ができ、何も変更されていないことが分かります。同様に、データベースの基礎ポイントを取得して、別プロセスに渡せます。そして、同じ状態のデータベースの値を取得できます。このように、プロセスや時間によって分けられた異なるクエリは、まったく同じ基礎で動きます。</p><h2>ダイレクトインデックスアクセス</h2><p>最後に、データベースの値は、不変なインデックスから基礎となるソートされたdatomに何度もアクセスするために、ハイパフォーマンスなAPIを提供します。これは、他のクエリアプローチをビルトする原料になります。例えば、このAPIを通して、ClojureのPrologのような<em>core.logic</em>ライブラリを使い、Datomicデータベースをクエリできます。</p><h2>サマリ</h2><p>この記事で、Datomic情報モデルの本質といくつかの詳細を知ってもらうことを望んでいます。データベースを値として扱うことは、とても特別で、効果的です。私は、みんなでその可能性を明らかにしているところだと思っています。<a target="_blank" href="http://docs.datomic.com/">Datomicのドキュメント</a>からさらに学ぶことができます。</p><h2>著者について</h2><p><b><img alt="" align="left" src="http://www.infoq.com/resource/articles/Datomic-Information-Model/ja/resources/richHickey.jpg;jsessionid=E6CC641DC7CBE8FC1321660CDD1E8FB9" _href="img://richHickey.jpg" _p="true" />Rich Hickey</b>氏はClojureの作者であり、Datomicの設計者です。また、さまざまなドメインで、25年以上の経験を持つソフトウェア開発者です。スケジューリングシステム、放送の自動化、オーディオ分析と指紋採取、データベース設計、収益管理、出口調査システム、マシンリスニングに、様々な言語で取り組んできています。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="clearer-space"></div><br><br><br><br><br><br></body></html>