<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Functional Patterns in Domain-Driven Design</h3><p><a href="http://en.wikipedia.org/wiki/Domain-driven_design">Domain-Driven Design</a> (DDD) does a great job in encouraging developers to create a domain model and an&nbsp;<a href="http://en.wikipedia.org/wiki/Domain-driven_design#Core_definitions">ubiquitous language</a>, but trying to implement DDD concepts using object orientation principles with state and behaviour often gives you a muddled mutable model, <a href="https://plus.google.com/106871002817915335660/posts">Debasish Ghosh</a> states in a blog post about <a href="http://debasishg.blogspot.se/2014/05/functional-patterns-in-domain-modeling.html">functional patterns in domain modelling</a>.</p>
<p>Debasish, a senior member of <a href="http://www.acm.org/">ACM</a> and author of <a href="http://www.manning.com/ghosh/">DSLs in Action</a>, argues that a model may be rich in the sense that all concepts related to a particular domain abstraction are located in one class but that this also makes the class more fragile with a local instead of a global focus, thus when composing all abstractions in a domain it may become too polluted with code just needed to resolve the impedance mismatch between class boundaries.</p>
<p>In his arguing he refers to <a href="http://www.deanwampler.com/">Dean Wampler</a> who recently <a href="http://www.slideshare.net/deanwampler/reactive-design-languages-and-paradigms">argued</a> that functional programming principles can help improve in domain driven design. Dean claims that &quot;Models should be anaemic&quot;, encouraging a practice with domain objects having only state and moving behaviours into standalone functions.</p>
<p>Another statement Debaish argues against is that bundling state and behaviour in a class increases encapsulation, instead he believes that building domain behaviours as standalone functions leads to a better modularization and realization of the domain model according to the principles of DDD. All domain behaviours are then modelled as functions in a module representing the aggregate.</p>
<p>As an example he continues from earlier blog posts where he implemented the Specification and Aggregate patterns in DDD using functional programming principles, now using functional patterns and functions as building blocks to build behaviours that model the ubiquitous language of the domain. Debaish claims that one principle in DDD is to lift the domain model vocabulary into your implementation so that the functionality becomes obvious during the whole system lifecycle.</p>
<p>Dean Wampler also did a presentation on a similar topic at the <a href="http://reactconf.com/">React conference</a> in April talking about <a href="https://www.youtube.com/watch?v=4L3cYhfSUZs">reactive design and language paradigms</a>.</p><br><br><br><br><br><br></body></html>