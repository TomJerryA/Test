<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Docker: Automated and Consistent Software Deployments</h3><p><a href="https://www.dotcloud.com/">dotCloud</a>, a PaaS provider, has open sourced <a href="https://github.com/dotcloud/docker/">Docker</a>, a key component of their platform. Docker is a <a href="http://en.wikipedia.org/wiki/LXC">LinuX Container (LXC)</a> technology augmented with a a high level API providing a lightweight virtualization solution that runs Unix processes in isolation. It provides a way to automate software deployment in a secure and repeatable environment.</p> 
<p>Docker uses the concept of a Standard Container which contains a software component along with all its dependencies - binaries, libraries, configuration files, scripts, virtualenvs, jars, gems, tarballs, etc. – and can be run on any x64-bit Linux kernel that supports <a href="http://en.wikipedia.org/wiki/Cgroups">cgroups</a>. Such containers can be deployed on a laptop, on a distributed infrastructure, in the cloud, etc., preserving its environment, making it appropriate for a broad range of uses: continuous deployment, web deployments, database clusters, SOA, etc., as <a href="http://www.kavistechnology.com/blog/docker-is-open-source/">Mike Kavis explained on his blog</a>:</p> 
<blockquote> 
 <p>The use case that was relevant to me, the application guy, is to use Docker to streamline a continuous delivery process. In every place that I have worked in my career, from the mainframe days, to the client server days, to the cloud days, getting the different environments in sync and successfully testing applications has been a nightmare. When code moves from Dev to QA to Stage to Prod, no matter how good or bad our processes were these environments were NEVER the same. The end result was always a hit in the quality of a production release. “It worked in test” became the most shrugged off phrase since “the check is in the mail”.</p> 
 <p>With Continuous Delivery (CD), the <em>entire environment</em> moves with the code from Dev to QA to Stage to Prod. No more configuration issues, no more different systems, no more excuses. With CD, if it didn’t work in Prod it didn’t work in Test. With Docker, I can see writing scripts to automate the CD process. I can see gains in speed to market because of how quickly new environments can be created without dealing with all of the setup and configuration issues.</p> 
</blockquote> 
<p>Solomon Hykes, CEO of dotCloud, <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=wW9CAH9nSLs">demoed Docker at PyCon</a>, explaining that it’s a repeatable lightweight virtualization solution because “it’s isolated at the process level and it has its own file system”. The API enables system administrators to execute a number of operations on containers: start, stop, copy, wait, commit, attach standard streams, list file system changes, etc.</p> 
<p>Some of Docker’s <a href="https://github.com/dotcloud/docker/">main features</a> are:</p> 
<blockquote> 
 <ul> 
  <li> <p>File system isolation: each process container runs in a completely separate root file system.</p> </li> 
  <li> <p>Resource isolation: system resources like CPU and memory can be allocated differently to each process container, using cgroups.</p> </li> 
  <li> <p>Network isolation: each process container runs in its own network namespace, with a virtual interface and IP address of its own.</p> </li> 
  <li> <p>Copy-on-write: root file systems are created using copy-on-write, which makes deployment extremely fast, memory-cheap and disk-cheap.</p> </li> 
  <li> <p>Logging: the standard streams (stdout/stderr/stdin) of each process container are collected and logged for real-time or batch retrieval.</p> </li> 
  <li> <p>Change management: changes to a container's file system can be committed into a new image and re-used to create more containers. No templating or manual configuration required.</p> </li> 
  <li> <p>Interactive shell: docker can allocate a pseudo-tty and attach to the standard input of any container, for example to run a throwaway interactive shell.</p> </li> 
 </ul> 
</blockquote> 
<p>So far, Docker has been tested with Ubuntu 12.04 and 12. 10, but it should be working with any Linux 2.6.24 or later, according to dotCloud. It can also be installed on Windows or Mac OS X via <a href="https://www.virtualbox.org/">VirtualBox</a> using <a href="http://www.vagrantup.com/">Vagrant</a>.&nbsp;Docker was written in Go, and uses Linux <a href="http://blog.dotcloud.com/kernel-secrets-from-the-paas-garage-part-24-c">cgroup</a>&nbsp;and <a href="http://blog.dotcloud.com/under-the-hood-linux-kernels-on-dotcloud-part">namespacing</a>, <a href="http://aufs.sourceforge.net/aufs.html">AUFS</a>&nbsp;– file system with copy-on-write capabilities-, and <a href="http://lxc.sourceforge.net/">LXC</a> scripts.</p> 
<p id="lastElm"></p><br><br><br><br><br><br></body></html>