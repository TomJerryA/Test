<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>アジャイルチームの構成を変える</h3><p><a target="_blank" href="http://www.infoq.com/news/2013/12/change-composition-teams"><em>原文(投稿日：2013/12/19)へのリンク</em></a></p>
<div class="article_page_left news_container text_content_container"> 
 <div class="text_info"> 
  <p>「<a href="http://www.infoq.com/jp/news/2013/04/stable-teams">安定したチーム作りと機能不全なチームの対処</a>」でレポートしたように、組織は安定したチームを構築、育成することを望んでいる。だが時として、チーム内あるいはチーム群の構成を変える必要がある。チーム構成を変更する必要があるとき、どのように実施すればよいのだろうか？</p> 
  <p>Pawel Brodzinski氏は「<a href="http://brodzinski.com/2013/08/teams.html">teams</a>」というブログ記事で、なぜチーム作りに時間がかかるのか、チーム構成を変えるときにどんな影響があるのかを説明している。</p> 
  <blockquote> 
   <p>「Forming, Storming, Norming, Performing」として知られているTuckman氏のグループ開発モデルは、パフォーマンスが満足できるレベルになるまで、時として苦痛なステージを経験する必要があることを私たちに教えてくれます。(…) チームの再構築は常に大きなリスクとして扱われ、通常、その過程でパフォーマンスは悪化するものです。</p> 
  </blockquote> 
  <p>Pawel氏はチーム構成を変える理由について、新メンバーを迎えることでチームを新鮮に保つため、そして、うまくいっていないチームを救うため、の2つを挙げている。Pawel氏が言っているように、こうした理由でチーム構成を変えるときには注意が必要だ。</p> 
  <blockquote> 
   <p>チームに参加している全員が新鮮な血をもたらします。新メンバーの経験、知識、観点を利用して、これまでのやり方を疑うチャンスなのです。(…) 時々、チームに新しい人を追加した方がよいのは、このためです。でも、チームを水増ししすぎて、優れたチームを新メンバーの負荷であふれさせてしまうと、最初からやり直しになることを覚えておきましょう。結局、チームをすぐに解散して、再び作り直すことになります。</p> 
   <p>ハイレベルな組織観点から、短期的に見れば、トップクラスのチームを守ることに価値があるでしょう。ところが、長期的に見ると、そのカルチャーを他のチームに展開する方が良いでしょう。ただし、繰り返しになりますが、ロックスターチームをすぐに解散してメンバーを組織内に展開する前に、思い出してください。チームをすぐに変えることは魔法ではなく触媒のようなものです。ベストプラクティスや健全なカルチャーを社内に展開することは、役立つかもしれないし、役立たないかもしれません。少しずつ適用していきましょう。さもないと、コストに見合うほどのメリットは得られません。</p> 
  </blockquote> 
  <p>Edwin Dando氏は「<a href="http://agileforeveryone.com/2013/07/23/does-your-team-have-a-bad-apple/">Does your agile team have a bad apple</a>」というブログ記事で、たった一人の不作法なチームメンバーがいかにチーム全体を機能不全に陥らせ、破滅へと導くかについて説明している。彼の意見は、Will Felps氏、Terence R. Mitchell氏、Eliza Byington氏による<a href="http://openwetware.org/images/a/a5/Final_BA_ROB.pdf">ネガティブなグループメンバーと機能不全のグループ</a>に関する研究結果に基づいている。:</p> 
  <blockquote> 
   <p>チームに腐ったリンゴが含まれていると、他のメンバーまで腐ったリンゴの性質を帯びてきます。チームに憂鬱な悲観論者（depressive pessimist）、わがままな人（jerk）、なまけ者（slacker）のいずれかで振る舞う人がいたとき、他のチームメンバーも同じように振る舞いました。それがわがままな人だと、他のチームメンバーもわがままに振る舞うようになります。それがなまけ者だと、周りもなまけ始めるのです。</p> 
   <p>悪いことに、チームメンバーはそういう人に対して、このような振る舞いをするわけではありません。彼らは他のチームメンバーに対して、このような振る舞いをするのです。言い換えると、ある人の悪い振る舞いは、さざ波のようにチーム全体の振る舞いへと伝播するのです。</p> 
   <p>これは極めて重要な発見です。たった1つの腐ったリンゴが、チーム全員の振る舞いを変えてしまい、チーム全体を腐らせてしまうのです。</p> 
  </blockquote> 
  <p>この結果に従うと、チームに腐ったリンゴがあるときには対策を講じる必要がある。</p> 
  <blockquote> 
   <p>こうした振る舞いを大目に見ることはできません。それはチーム全体を破滅させ、プロダクト全体にはね返ってきます。これを許してはいけません。結局のところ、取り得る選択肢は3つしかありません。</p> 
   <ol> 
    <li>何もしない – 我慢します。明らかに、よい選択肢とは言えません。</li> 
    <li>予防措置を講じる – チームとして、どんな振る舞いがチームを強くし、お互いに何を期待しているのか、定義して合意します。 (…)</li> 
    <li>チームのために、彼らをチームから排除する。難しい？ そうですね – これは非常に難しいことで、これが簡単だという人はいませんでした。 (…)</li> 
   </ol> 
  </blockquote> 
  <p>Len Lagestee氏は「<a href="http://illustratedagile.com/2012/08/30/it-only-takes-one-handling-bad-team-member/">It Only Takes One (Handling a Bad Team Member)</a>」というブログ記事を書いている。そこで彼は、誰かをチームから外したり動かす必要があるときにできること、を提案している。</p> 
  <blockquote> 
   <p>価値と原則を定義して伝えましょう。 (…) 価値とはあなたの判断を導くものです。</p> 
   <p>準備しましょう。アジャイル環境で仕事をするために期待している文化的で協調的な性質について、人事部に説明しましょう。 (…)</p> 
   <p>計画を立てましょう。最初の問題が判明したとき、個人のコーチングが始めやすくなります。 (…)</p> 
   <p>機会を与えましょう。根付いた価値、人材、そして計画ができたら、それらを変更する機会を与えましょう。それらを改善する機会を与える時間をタイムボックス化するのです。</p> 
   <p>対策を講じましょう。タイムボックスの終わりになって問題が残っていれば、それを明確にしましょう。うまくいっているか全員で見回すのです。</p> 
  </blockquote> 
  <p>Vin D’Amico氏は「<a href="http://brainslink.com/2013/11/dont-let-your-team-become-complacent-and-predictable/">Don’t Let Your Team Become Complacent and Predictable</a>」というブログ記事を書いている。そこで彼は、新しいチームメンバーを迎えることでチーム構成を変える理由についてこう述べた。</p> 
  <blockquote> 
   <p>新メンバーをチームに迎えることは、新しいアイデアを生み、イノベーションを促します。新メンバーはチームに新しい経験、新しい観点、新しいエネルギーをもたらします。新人は定着した考えや過去の判断に束縛されません。彼らは自由に、すべてに疑問を持ち、何も受け入れないことができるのです。</p> 
  </blockquote> 
  <p>チーム構成の変更について、彼はいくつか提案している。</p> 
  <blockquote> 
   <ul> 
    <li>もし会社に複数のソフトウェア開発チームがあるなら、チーム間で人を動かしてみよう。</li> 
    <li>もし会社が小さければ、複数領域にわたるスキルを養えるよう、チームメンバーの責務をローテーションしてみよう。</li> 
    <li>業界外から様々なバックグラウンドを持った人を新しく雇い入れよう。</li> 
    <li>技術者でない人をアナリストやテスターとして開発チームに入れよう。</li> 
    <li>時々みんなを現場に出して、実際のユーザがどのように仕事をしているか観察させよう。</li> 
   </ul> 
  </blockquote> 
  <p>あなたはチーム構成を変えたことがあるだろうか？</p> 
 </div> 
</div><br><br><br><br><br><br></body></html>