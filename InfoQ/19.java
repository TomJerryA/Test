<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Experiences from Enterprise Integration with REST</h3><p>Large-scale legacy replacement is the hardest job in the IT industry, <a href="http://brandonbyars.com/about/">Brandon Byars</a>, a principal consultant at Thoughtworks, claims when <a href="http://martinfowler.com/articles/enterpriseREST.html">sharing his experiences</a> from using <a href="http://en.wikipedia.org/wiki/Representational_state_transfer#Applied_to_Web_Services">RESTful</a> integration in large scale legacy replacement projects.<br /> Brandon consider <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> over HTTP to be an attractive option for many of these projects; it is simple to use and understand, and requires no large frameworks. Architecturally he believes that REST has proven to be scalable as well as fit in well with domain modelling. Too often though he finds the discussions on REST to be about small details instead of aspects as deployment and testing strategies which he consider to be more important in ensuring success in his projects.</p>
<p>Brandon's first advice is to use logical environments during development to satisfy the needs for different teams and roles:</p>
<blockquote>
  A logical environment is an appropriately isolated set of interrelated applications, services, and infrastructural components needed to satisfy a business or development need. 
</blockquote>
<p>He then describes different techniques he has found valuable working with and maintaining a large number of these environments. One thing he argues against is versioning of environments, which he thinks can complicate working with a system significantly.</p>
<p>Brandon's experience is that poorly defined data boundaries are one of the most expensive mistakes an architect can make. A common anti-pattern is storing all information about an entity in a single data store, and export as needed, a strategy he believes is encouraged by a superficial misunderstanding of <a href="http://en.wikipedia.org/wiki/Master_data_management">master data management</a> (MDM). Instead his solution is to wrap each team's definition inside a <a href="http://en.wikipedia.org/wiki/Domain-driven_design#Bounded_context">bounded context</a>, a concept from <a href="http://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a>, DDD, within which a term means the same thing whenever it is used.</p>
<blockquote>
  Each business unit has a different model for common entities with explicit translation between their bounded contexts 
</blockquote>
<p>When working in distributed systems Brandon recommends grouping user stories for high level features into epics and to use these epics for measuring progress. That avoids a scenario with a false sense of progress; most stories are completed showing the teams are delivering, but the few stories missing prevent demonstration of the feature.</p>
<blockquote>
  Program-level metrics keep epics as the principal metric for tracking velocity, as team user-story velocity can give a false sense of progress. 
</blockquote>
<p>Brandon ends by emphasizing that although he is for a strategy using RESTful services, believing that it facilitates a simpler development, REST is far from a silver bullet.</p><br><br><br><br><br><br></body></html>