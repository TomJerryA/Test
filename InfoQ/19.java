<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>JSON-LD Reaches W3C Recommendation Status</h3><p>The W3C RDF Working Group has moved the JSON-LD and JSON-LD 1.0 Processing Algorithms and API standards forward to recommended status. JSON-LD is a standard to add &quot;linked data&quot; semantics to JSON. A JSON-LD document looks like this:</p>
<pre><p>{<br />&nbsp;&nbsp;&quot;@context&quot;: &quot;http://json-ld.org/contexts/person.jsonld&quot;,<br />&nbsp;&nbsp;&quot;name&quot;: &quot;Manu Sporny&quot;,<br />&nbsp;&nbsp;&quot;homepage&quot;: &quot;http://manu.sporny.org/&quot;,<br />&nbsp;&nbsp;&quot;image&quot;: &quot;http://manu.sporny.org/images/manu.png&quot;<br />}</p></pre>
<p>If you're not familiar with the W3C's standards process, there are three levels of maturity a specification can be in. A Recommendation is the final step in the maturity of a particular specification. The W3C suggests that Recommendations be &quot;widely implemented,&quot; meaning that they're ready and stable enough for broad public usage.</p>
<p>It has taken a lot of work for JSON-LD to reach this stage of maturity: 100 teleconferences, 281 issues logged, 2,000 source code commits, and 2,500 emails over the course of four years.</p>
<h2>More on JSON-LD</h2>
<p>Here's an example, straight from <a href="http://www.w3.org/TR/2014/REC-json-ld-20140116/">the specification</a>:</p>
<pre><p>{<br />&nbsp;&nbsp;&quot;name&quot;: &quot;Manu Sporny&quot;,<br />&nbsp;&nbsp;&quot;homepage&quot;: &quot;http://manu.sporny.org/&quot;,<br />&nbsp;&nbsp;&quot;image&quot;: &quot;http://manu.sporny.org/images/manu.png&quot;<br />}</p></pre>
<p>This is a JSON document representing a person. It's easy for humans to infer the semantics here: &quot;name&quot; is the name of the person, &quot;homepage&quot; is their home page, and &quot;image&quot; is some kind of photo of them. Machines don't understand terms like &quot;name&quot; and &quot;image,&quot; though.</p>
<p>To resolve this, we can use linked data. Here's the same example with JSON-LD:</p>
<pre><p>{<br />&nbsp;&nbsp;&quot;http://schema.org/name&quot;: &quot;Manu Sporny&quot;,<br />&nbsp;&nbsp;&quot;http://schema.org/url&quot;: { &quot;@id&quot;: &quot;http://manu.sporny.org/&quot; },<br />&nbsp;&nbsp;&quot;http://schema.org/image&quot;: { &quot;@id&quot;: &quot;http://manu.sporny.org/images/manu.png&quot; }<br />}</p></pre>
<p>By linking to definitions from schema.org, we can teach a machine how to understand the semantics of a &quot;name&quot;, &quot;url,&quot; and &quot;image.&quot; This is a bit more complicated, though. We can achieve the conciseness of the original example and the semantic understanding of the second example through what JSON-LD calls a &quot;context.&quot; Let's take that first example, and introduce a context:</p>
<pre><p>{<br />&nbsp;&nbsp;&quot;@context&quot;: &quot;http://json-ld.org/contexts/person.jsonld&quot;,<br />&nbsp;&nbsp;&quot;name&quot;: &quot;Manu Sporny&quot;,<br />&nbsp;&nbsp;&quot;homepage&quot;: &quot;http://manu.sporny.org/&quot;,<br />&nbsp;&nbsp;&quot;image&quot;: &quot;http://manu.sporny.org/images/manu.png&quot;<br />}</p></pre>
<p>We now link to a context hosted on json-ld.org. A context document looks like this:</p>
<pre><p>{<br />&nbsp;&nbsp;&quot;@context&quot;:<br />&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;: &quot;http://schema.org/name&quot;, <br />&nbsp;&nbsp;&nbsp;&nbsp;&quot;image&quot;: {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;@id&quot;: &quot;http://schema.org/image&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;@type&quot;: &quot;@id&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;},<br />&nbsp;&nbsp;&nbsp;&nbsp;&quot;homepage&quot;: {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;@id&quot;: &quot;http://schema.org/url&quot;,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;@type&quot;: &quot;@id&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;}<br />}</p></pre>
<p>Bam! Another advantage of the contextual approach is that the same context can be used across multiple documents.</p>
<h2>Why not RDF?</h2>
<p>JSON-LD takes on the flavor of semantic web technologies, but isn't exactly one. They both have similar goals: to provide shared context around some kind of knowledge. For example, it's a shame that every website re-invents concepts around names. Imagine you wanted to investigate several different services to compare the way people identify themselves. In order to get people's names, you'd have to re-build different code for each API to determine exactly how to fetch the name.</p>
<p>With semantic web technologies, each service would expose &quot;This is a <a href="http://schema.org/Person">Person</a>,&quot; and you'd only need to write the code to understand what a Person is one time. You could generically re-use it across services.</p>
<p>While JSON-LD and more traditional semantic web technologies (like RDF) have the same end goals in mind, they don't use the same building blocks. Manu Sporny, char of the JSON-LD W3C Community Group, <a href="http://manu.sporny.org/category/json-ld/">wrote a blog post</a> about the relationship between the two:</p>
<blockquote> 
 <p>That's why my personal approach with JSON-LD just happened to be burning most of the Semantic Web technology stack (TURTLE/SPARQL/Quad Stores) to the ground and starting over. It's not a strategy that works for everyone, but it's the only one that worked for us, and the only way we could think of jarring the more traditional Semantic Web community out of its complacency.</p> 
</blockquote>
<p>Manu also elaborates on using simple, clear writing in the specification:</p>
<blockquote> 
 <p>We tried our best to eliminate complex techno-babble from the JSON-LD specification. I made it a point to not mention RDF at all in the JSON-LD 1.0 specification because you didn't need to go off and read about it to understand what was going on in JSON-LD. There was tremendous push back on this point, which I'll go into later, but the point is that we wanted to communicate at a more conversational level than typical Internet and Web specifications because being pedantic too early in the spec sets the wrong tone.</p> 
</blockquote>
<p>Both of these things point to how JSON-LD tries to move the conversation about semantic web technologies: simple, noncomplex, and for the average developer.</p><br><br><br><br><br><br></body></html>