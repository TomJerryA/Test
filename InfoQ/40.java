<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Parse Announces Bolts, a Collection of Low-level Libraries for iOS and Android</h3><p>Parse, <a href="https://developers.facebook.com/blog/post/2013/04/25/welcoming-parse-to-facebook/">acquired by Facebook a few months ago</a>, has recently open-sourced a collection of low-level libraries for Android and iOS collectively called Bolts. According to Parse announcement, Bolts is the outcome of the joint Parse/Facebook effort to consolidate small, low-level utility classes that both companies had already developed on their own.</p>
<p>The first Bolts component that is <a href="https://github.com/BoltsFramework">available on GitHub</a> is Tasks, aimed at handling asynchronous operations according to the <a href="http://www.promisejs.org/intro/">JavaScript Promises model</a>.</p>
<p>Promises attempt to solve a <a href="http://www.promisejs.org/intro/">number of issues which are usually found when using callbacks to handle asynchronous operations</a>, specifically the fact that trying to compose multiple serial or parallel asynchronous operations becomes quickly cumbersome due to nesting of asynchronous operations within callbacks.</p>
<p>To this aim, a Promise represents the result of a task that may or may not have completed, and which could eventually turn out into an error. Any asynchronous operation thus can immediately return a Promise on the result of its execution; the Promise can be accessed at any time, possibly blocking the caller if the async operation has not been completed yet.</p>
<p>Usually, though, a Promise is associated two callbacks that are to be called when the asynchronous task has been completed or has failed. What is peculiar of Promises is that callbacks are themselves encapsulated in a Promise, since they will be only executed at some point in the future, or not at all, depending on what happens with the original Promise.</p>
<p><img src="http://www.infoq.com/resource/news/2014/02/parse-announces-bolts/en/resources/promise-chaining.png" alt="" _href="img://promise-chaining.png" _p="true" /></p>
<p>Thanks to this mechanism, handling a sequence of asynchronous operations becomes straightforward, since Promises can be chained together to represent asynchronous operations and their callbacks, as shown in the picture above (source: <a href="http://www.slideshare.net/drprolix/promises-16473115">Promises, Luke Smith</a>.)</p>
<p>Another advantage of Promises lies with the way error propagates through a chain of Promises: since a Promise knows whether it has been fulfilled or not, it can propagate an error condition down along the Promises chain until an error handler is found, so you do not need to provide an error handler for each asynchronous operation in the chain.</p>
<p>Promises implementations are available in <a href="http://www.infoq.com/articles/surviving-asynchronous-programming-in-javascript">JavaScript</a>, <a href="http://www.infoq.com/presentations/Asynchronous-Scala-Java">Scala</a>, <a href="http://dev.clojure.org/display/design/Promises">Clojure</a>, and many other languages.</p>
<p>Parse claims that Tasks offers several advantages over both <a href="https://github.com/BoltsFramework/Bolts-Android">Android AsyncTask</a> and <a href="https://github.com/BoltsFramework/Bolts-iOS">iOS NSOperation</a>, among them:</p>
<ul> 
 <li>Performing several tasks in a row will not create nested &quot;pyramid&quot; code as you would get when using only callbacks.</li> 
 <li>Tasks are fully composable, allowing you to perform branching, parallelism, and complex error handling.</li> 
 <li>You can arrange task-based code in the order that it executes, rather than having to split your logic across scattered callback functions.</li> 
</ul>
<p>Bolts components are completely unrelated to Parse or Facebook services and do not require having a Parse or Facebook developer account to be used.</p>
<p>More Bolts components are announced, but Parse has not released any details yet about them.</p><br><br><br><br><br><br></body></html>