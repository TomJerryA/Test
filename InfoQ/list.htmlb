<html>
 <head></head> 
 <body>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/36.htmlb">Apache Kafka：下一代分布式消息系统</a> Apache Kafka是一种分布式发布-订阅消息系统。本文介绍了Kafka框架的架构模型、特性和特征，并与传统消息系统进行了对比。 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/35.htmlb">技术人攻略访谈：开放制造的机器之心</a> 《技术人攻略访谈》系列将在InfoQ上开辟专栏，我们会定期挑选好的访谈在这里分享。本期采访对象罗未@WRTnode，是豌豆机器小组（WRTnode machine team）发起人。 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/34.htmlb">远程工作</a> 你觉得远程工作是否是一种妥协？大约五年前，Biomni的一些团队开始尝试在家办公的模式。他们中的许多人离开伦敦投身乡村生活，用饲养家禽、山地自行车等取代酒吧和餐馆作为休闲娱乐。现在，他们感到自己的团队更加紧密、协作更有效、招募到了更好的人才，同时工作起来也比以前更加高效。在此期间，远程办公究竟起到了怎样的作用？ 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/33.htmlb">前端开发体系建设日记</a> 本文来自前端工程师张云龙的博客，由作者本人推荐至InfoQ进行分享。目前本系列已经发布了三个部分，本处分享的是第二部分，浅谈前端集成解决方案。建议在阅读本文前先阅读本文作者和其团队之前分享的《前端工程精粹》系列一、二、三。 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/32.htmlb">J.P.摩根运用LeSS框架实施大规模敏捷</a> 顶尖金融服务企业中的大型组织是如何采用大规模Scrum框架(LeSS)的？本文将揭开谜底。 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/31.htmlb">存储系统的那些事</a> 存储系统从其与生俱来的使命来说，就难以摆脱复杂系统的魔咒。无论是从单机时代的文件系统，还是后来C/S或B/S结构下数据库这样的存储中间件兴起，还是如今炙手可热的云存储服务来说，存储都很复杂，而且是越来越复杂。 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/30.htmlb">对话机器学习大神Yoshua Bengio（下）</a> Yoshua Bengio教授（个人主页）是机器学习大神之一，尤其是在深度学习这个领域。他连同Geoff Hinton老先生以及 Yann LeCun（燕乐存）教授，缔造了2006年开始的深度学习复兴。 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/29.htmlb">HBase ORM SimpleHBase设计</a> 目前企业软件开发占据主流的开发模式为面向对象模式。无论是建立在集合论之上的传统关系型数据库，还是以CAP定理/Hadoop/BigTable为基石的HBase，都面临问题，数据存储如何提供增、删、改、查的服务能力，应用如何方便的使用该能力。关系型数据库给出的答案为SQL，JDBC和各种ORM框架（典型例子为Hibernate和MyBatis）。 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/28.htmlb">当IoC遇见了Node.js</a> 本文将深度介绍IoC在Node.js中的应用以及所带来的好处。 
  </div>
  <div>
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/27.htmlb">虚拟圆桌：云计算中PaaS的未来</a> InfoQ特意请来了四位云领域的领袖人物（云先驱Krish Subramanian，云开发者Dan Turkenkopf，云执行官JP Morgenthal，以及云专家James Urquhart）来分享他们对PaaS未来的看法。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/26.htmlb">构建服务端的AMD/CMD模块加载器</a> 在前端开发领域，相信大家对AMD/CMD规范一定不会陌生，尤其对requireJS、seaJS等模块加载器更是耳熟能详，不少网站目前也正在使用。requireJS、seaJS的出现，极大程度的促进了前端模块化编程方式的发展，前端的代码风格趋近标准化。而两者的共同特点都是运行在浏览器端的模块加载器，可以智能解析模块依赖关系，并自动加载相关模块。而我们今天介绍的是服务端的AMD/CMD模块加载器— styleCombine，一个为前端模块化开发及性能提升而诞生的前端开发神器。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/25.htmlb">企业数据移动化</a> Val Huber介绍了企业数据移动化的一些方法，包括从现有数据库Schema创建RESTful API，扩展API，定义多表层级资源，使用声明式响应表达式增加行为。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/24.htmlb">书籍问答：敏捷文化 —— 信任与责任引导之道</a> 当企业采用敏捷时，发展敏捷文化是他们经常要做的事情。这样的文化变革使管理者领导人们的方式，转变为帮助人们成为自组织。这本The Agile Culture介绍了如何塑造具有活力和创造力的文化，并且提供了建立信任、主人翁意识和克服组织中的阻力和壁垒的工具。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/23.htmlb">深入理解Tagged Pointer</a> 为了节省内存和提高执行效率，苹果提出了Tagged Pointer的概念。对于64位程序，引入Tagged Pointer后，相关逻辑能减少一半的内存占用，以及3倍的访问速度提升，100倍的创建、销毁速度提升。本文从Tagged Pointer试图解决的问题入手，带领读者理解Tagged Pointer的实现细节和优势，最后指出了使用时的注意事项。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/22.htmlb">Netty系列之Netty高性能之道</a> Netty是一个高性能、异步事件驱动的NIO框架，它提供了对TCP、UDP和文件传输的支持，作为一个异步NIO框架，Netty的所有IO操作都是异步非阻塞的，通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/21.htmlb">架构与敏捷：不得不说的故事</a> 这篇文章描述了架构和软件开发过程间的关系，以及架构将如何满足诸如功能需求、操作特性和开发者适居性等一系列需求。文章中还谈到了务实的架构师与开发者和涉众共事时的责任。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/20.htmlb">基于开源软件在Azure平台建立大规模系统的最佳实践</a> 本文和读者分享一些最佳实践经验，并在文末以中国网络电视台的系统迁移作为参考案例。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/19.htmlb">数据库持续交付</a> 在各种持续过程中，数据库是一个真正的挑战。对自动化来说，数据库对象变更脚本放入传统版本控制工具或使用“比较并同步”工具，这是效率低下或者风险很高的事情，因为两个概念彼此互不相识。在持续交付和DevOps中，需要更好的解决方案。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/18.htmlb">一种有效的测试策略</a> 文章介绍Jimmy Bogard在做一个大型项目时实施的一种有效的测试分层策略：包括系统测试、皮下测试、单元测试。作者认为最有价值的测试策略是从全系统测试开始，然后往下移，直至单元测试。当一个应用程序对业务有决定性作用时它将不得不面临变更，这样的全盘考虑特别有效。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/17.htmlb">浅谈Java 8的函数式编程</a> Java 8为Java带来了函数式编程。Ben Evans在本文中讨论了函数的意义。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/16.htmlb">从数据库查询中寻找设计问题</a> 企业应用程序的开发人员经常和数据库打交道，有时会过于依赖SQL强大的查询能力，随着需求的演化，SQL可能会越来越复杂，难以维护。复杂查询带来可能不仅仅是性能问题，其背后隐藏的还有可能是不恰当的架构和设计。查询应该受到更多的关注。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/15.htmlb">支付宝分布式事务测试方案</a> 传统的基于数据库本地事务的解决方案只能保障单个服务的一次处理具备原子性、隔离性、一致性与持久性，但无法保障多个分布服务间处理的一致性。因此，我们必须建立一套分布式服务处理之间的协调机制，保障分布式服务处理的原子性、隔离性、一致性与持久性。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/15.htmlb">书评：《使用Chef框架进行测试驱动基础设施开发第2版》</a> Stephen Nelson-Smith在他的新书《使用Chef框架进行测试驱动基础设施开发第2版》中涵盖了“基础设施即代码”理论之后的基本原理，并且对Ruby、Chef框架和一些重要工具进行了介绍。本书的主要部分通过详细的示例来描述如何使用必需的工具编写完整测试的基础结构代码。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/14.htmlb">采访与书评——《软件工程的技术与社会化历史》</a> Capers Jones是《软件工程的技术与社会化历史》一书的作者，他在本书中为读者介绍了信息技术与软件开发的进化概况。InfoQ有幸与Capers进行了一番对话，谈论了软件工程的发展动力和重大事件，以及它们对我们的社会所带来的影响。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/13.htmlb">Node.js V0.12新特性之给子进程的同步API</a> ShellJS给Node.js添加了一个编写shell脚本的用处，但Node.js的异步I/O对shell脚本来说是块难啃的骨头。ShellJS虽然找到了办法，但效率低下又丑陋不堪。所以Node.js的核心团队决定让Node v0.12支持同步运行子进程。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/12.htmlb">给高管当教练</a> 敏捷教练们对与管理层一起工作并不感到陌生，他们常会与项目经理以及团队经理一道促进团队层面的变革。但现在他们需要促进管理层面的变革，这彻底改变了敏捷教练的工作范围。本文帮助敏捷教练了解他们的目标受众的语境，并提出一套与这种语境相匹配的教练语言。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/11.htmlb">微博关系服务与Redis的故事</a> 新浪微博的工程师们曾经在多个公开场合都讲到过，微博平台当前在使用并维护着可能是世界上最大的Redis集群，其中最大的一个业务，单个业务使用了超过 10T 的内存，这里说的就是微博关系服务。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/10.htmlb">投资于质量，不再有技术债务</a> 在软件系统中处理技术债务是一个复杂的挑战。代码总是能进一步优化，但客户只关心功能。本文讨论一个新的比喻“质量投资（Quality Investment）”。它有助于更好地沟通系统质量，并通过权衡偿还技术债务与投资回报来指导质量提升。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/10.htmlb">左耳朵耗子谈云计算：拼的就是运维</a> 本文根据InfoQ中文站跟陈皓（@左耳朵耗子）在2014年3月的一次聊天内容整理而成。在沟通中，陈皓分享了自己对云计算的理解，包括云计算为什么会分三层，实现一个云平台的难点在什么地方，运维之于云计算的重要性，电商云为什么有价值等。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/9.htmlb">虚拟座谈会：大数据一栈式方案Spark</a> Spark正在占据越来越多的大数据新闻的重要位置，除了性能优异，Spark到底具备了那些特性，让学术界和工业界对其充满了兴趣？同时，Spark还处在快速发展的阶段，开发者和用户不得不解决不稳定和bug，Scala语言也有较高的学习门槛，这些也会成为Spark普及的障碍。当然，尽管Spark提供了一栈式的大数据方案，但并不意味着他适合任何场景。本期虚拟座谈会将讨论Spark的优势和不足，分享在国内领先的Spark开发者遇到的挑战和瓶颈。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/9.htmlb">4个9是如何炼成的？</a> 微博服务可用性提升是2013年微博平台技术团队的一个重要目标，为此，平台内部还特别建立的微博平台的SLA指标体系，其中微博平台核心服务接口（主要以feed服务相关接口为主）的可用性指标为：全年平均接口请求性能&lt;100ms的比例&gt;99.99%，即4个9的可用性指标。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/9.htmlb">一秒钟法则：来自腾讯无线研发的经验分享</a> 在2014年4月11日的腾讯分享日活动上， 来自腾讯MIG的移动互联网事业群运营总监/T4专家，负责运营QQ手机浏览器、腾讯PC浏览器、腾讯手机安全管家、腾讯电脑管家产品的刘昕介绍了移动无线产品研发中的“一秒钟法则”。本文根据该演讲内容整理形成。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/8.htmlb">作者访谈：Programming for Kids</a> “Programming for Kids”一书中含有大量Ruby编写的、适合9-14岁孩子学习编程基础的实例。书中还向孩子们展示了如何在Mac上使用命令行。父母可以坐在孩子身边一起学习。InfoQ就”孩子该如何学编程”采访了本书作者Peter Armstrong。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/8.htmlb">发布一个package</a> 合理使用Node.js的包能够解决很多问题，本章将带领大家一步步开发一个基于libuv库让Node.js支持多线程的名为libuv_thread包，开发并测试完成后，我们将它发布到npm上供其他开发人员下载和使用。在学习本章之前，读者需要有C++语法基础；对libuv库和v8引擎的嵌入式开发有所了解；熟悉Node.js的基本模块用法。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/7.htmlb">单元化架构，为什么要用以及我们如何做到</a> 微博粉丝服务平台在单元化架构方面的实践已经在QCon讲过，这次重又写起文章，我想传播知识已经不那么重要（单元化架构不是创新，稍后会详细介绍），更重要的是还是希望能够借此引起诸位的思考，能够在架构层面多投入精力思考和尝试。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/6.htmlb">SQL Server 2014 – 关系型的能力、NoSql的速度</a> 近4年来，微软一直在致力于重写SQL Server的查询执行引擎，这还是自1998年来的首次尝试。重写的目标是在不牺牲关系型数据库特色的前提下，提供类似于NoSQL的高速度。其中的核心是Hekaton，即内存优化表。虽然依然能够通过传统的T-SQL操作对其进行访问，但其内部已经是基于完全不同的技术所实现。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/5.htmlb">探寻从HDFS到Spark的高效数据通道：以小文件输入为案例</a> 为了保证高效的数据移动，locality是大数据栈以及分布式应用程序所必须保证的性质，这一点在Spark中尤为明显。如果数据集大到不能保证完全放入内存，那就不能贸然使用cache()将数据固化到内存中。如果读取数据不能保证较好的locality性质的话，不论是对即席查询还是迭代计算都将面临输入瓶颈。而作为常用的分布式文件系统，HDFS承担着数据存储、一致性保证等关键问题。HDFS自开发之初就与Google GFS一脉相承，因此也继承了其无法较好的处理小文件的问题，但大量小文件输入又是分布式计算中常见场景。本文以小文件输入为案例，看看从HDFS到Spark的数据通道中到底发生了什么，并讨论如何设计有效的小文件输入。了解了这些话题，可以更高效的使用Spark。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/4.htmlb">微博config service实践</a> 作为大型复杂分布式系统，微博平台中存在大量的配置信息，这些配置信息定义了平台中的RPC服务和资源（memcached、redis、mysql等）的地址，以及这些服务和资源的元数据信息。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/3.htmlb">理论上的开放式敏捷实施</a> 在关于开放式敏捷实施的一系列文章中的第三篇文章里，Dan Mezick介绍了该方法的理论背景，并且解释了为什么其他文章中所描述的技术能够有助于实现可持续的敏捷转型。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/2.htmlb">使用MySQL、Hudson、Gradle、Maven和Git实现数据库DevOps</a> DevOps这个术语描述的是经改良的开发团队与运维团队之间的协作。在软件工程中，数据库通常都位于关键路径之中。本文介绍了什么是DevOps，并且解释了使用了具体概念和工具的数据库DevOps是什么样的。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/1.htmlb">豆瓣的基础架构</a> 本文根据InfoQ中文站对豆瓣洪强宁（@hongqn）的沟通交流整理而成。洪强宁介绍了豆瓣的架构和组件，并分享了豆瓣基础平台部的一些团队经验。文中截图来自洪强宁在2013年CTO俱乐部中的分享。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/0.htmlb">DevOps @ Spotify</a> 本文是“DevOps每月实战故事”系列的一部分。每个月我们都会听听来自不同团队的DevOps故事，了解哪些对我们有用，哪些没有用，并且描绘出DevOps实施过程中所面对的挑战。在这个问题上，我们学会了如何从DevOps中吸取经验教训并贯穿在Spotify的工程师管理中。其结果是团队领导者、产品经理以及敏捷教练共同收获一个健康的Potlac（注：Potlac是作者自造的生词，意思是Product Owner + Team Lead + Agile Coach）。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/49.htmlb">更好地实施敏捷</a> 敏捷实施现在举步维艰——组织对敏捷实践进行授权式管理并期望团队可以改变其工作的方式，但是这种改变看上去是不可持续的。该文是一系列研究文章中的第一篇，这些文章探讨了为什么这种情况会发生，并且给出了一个替代方案——开放式敏捷实施基于邀请和参与，而不是来自上级的授权和指示。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/48.htmlb">通过Microsoft Azure服务设计网络架构的经验分享</a> 本文从产品设计和架构角度分享了Microsoft Azure网络服务方面的使用经验，希望你在阅读本文之后能够了解这些服务之间，从而更好地设计你的架构。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/47.htmlb">Pair Painting 结对粉刷房间</a> Victoria上周粉刷了一下家中的厨房，这一过程使她联想起了结对编程。她和她的搭档之前也有过粉刷房间的经验，而且出来的效果也让她们感到十分自豪。但换成了她自己来做的话，尽管她具有良好的技能与知识，但最终的效果也不那么理想。她对此产生了疑问：事情为什么是这样？ 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/47.htmlb">最好的流程是没有流程</a> 官僚机构常常烦恼于大型产品开发的工作量。正如技术债会减缓研发速度，流程债则会减缓商业发展。你有没有节省过12,096,000%的时间？理清战略。流程自动化。并行工作。专心地协作。你知道吗？MS project的一个系统默认值有可能会让你的计划缺乏弹性。消除流程债，快速上市。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/46.htmlb">Node.js的线程和进程</a> 很多Node.js初学者都会有这样的疑惑，Node.js到底是单线程的还是多线程的？通过本章的学习，能够让读者较为清晰的理解Node.js对于单/多线程的关系和支持情况。同时本章还将列举一些让Node.js的web服务器线程阻塞的例子，最后会提供Node.js碰到这类cpu密集型问题的解决方案。在学习本章之前，读者需要对Node.js有一个初步的认识，熟悉Node.js基本语法、cluster模块、child_process模块和express框架；接触过apache的http压力测试工具ab；了解一般web服务器对于静态文件的处理流程。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/45.htmlb">高质量代码——书评与采访</a> 由Stephen Vance所撰写的《高质量代码》（Quality Code）一书涵盖了软件开发生命周期的各个方面，尤其关注于提交高质量的产品。Stephen在本书中谈论了为支持软件技术水准测试所需的一些实践。InfoQ有幸与作者进行了交流，对本书的内容以及测试应用程序代码的最佳实践进行了一番讨论。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/44.htmlb">Web安全实战</a> 本章将主要介绍使用Node.js开发web应用可能面临的安全问题，读者通过阅读本章可以了解web安全的基本概念，并且通过各种防御措施抵御一些常规的恶意攻击，搭建一个安全的web站点。 
  </div> 
  <div> 
   <a href="https://raw.github.com/TomJerryA/Test/master/InfoQ/43.htmlb">用Kiji构建实时、个性化推荐系统</a> 现在网上到处都有推荐。亚马逊等主流电子商务网站根据它们的页面属性以各种形式向用户推荐产品。Mint.com之类的财务规划网站为用户提供很多建议，比如向用户推荐他们可能想要办理的信用卡，可以提供更好利率的银行。谷歌根据用户搜索历史记录的信息优化搜索结果，找到相关性更高的结果。 
  </div>           
 </body>
</html>