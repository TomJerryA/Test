<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>関数型言語F#を使ったDDDとCQRS</h3><p><a target="_blank" href="http://www.infoq.com/news/2014/03/ddd-cqrs-fsharp"><em>原文(投稿日：2014/03/31)へのリンク</em></a></p>
<div class="article_page_left news_container text_content_container"> 
 <div class="text_info"> 
  <p><a href="http://en.wikipedia.org/wiki/Domain-driven_design">ドメイン駆動設計</a>(DDD)を実践する上で、C#のようなオブジェクト指向言語から<a href="http://en.wikipedia.org/wiki/F_Sharp_(programming_language)">F#</a>のような関数型の言語へ移行すると、振る舞いに着目できることとより宣言的なコードになることのふたつの利点がある、と<a href="http://gorodinski.com/">Lev Gorodinski氏</a>は言う。氏は最近の<a href="https://www.youtube.com/watch?v=MHvr71T_LZw">プレゼン</a>で<a href="https://github.com/eventstore/eventstore/wiki/Event-Sourcing-Basics#event-sourcing">イベントソーシング</a>と<a href="http://martinfowler.com/bliki/CQRS.html">Command-Query Responsibility Separation</a>(CQRS)を例に挙げて説明した。</p> 
  <p>Lev氏は昨年、F#を使い込み、この8ヶ月はF#しか使っていない。氏のプセゼンでは<a href="http://goodenoughsoftware.net/about/">Greg Young氏</a>のオリジナルの<a href="https://github.com/gregoryyoung/m-r">CQRSのサンプル</a>を使って、どのようにしてF#の実装がC#と違うのかを説明し、利点と難点を明らかにした。</p> 
  <p>典型的なオブジェクト指向言語でCQRSのサンプルを開発することで、Lev氏はいくつかの論点を見つけた。例えば、冗長さやエンティティがイベントソースの実装に依存することだ。<br /> F#の実装には利点がある、コードは少なくて済み、明確で、隠れた副作用なして関数が何をするのかはっきりわかる。</p> 
  <p>F#でDDDを実践するには利点がある。実装に必要なインフラではなく振る舞いに着目できる。つまり、<a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>的な発想を捨てられるのだ。また、より宣言的なコードにできる。コードを書く代わりに宣言的な仕様をF#で実装できるのだ。<br /> Lev氏が指摘するのは、このような利点はすべてDDDの利点であり、<a href="http://www.informit.com/store/domain-driven-design-tackling-complexity-in-the-heart-9780321125217">Eric Evans氏</a>の本でも<a href="http://www.informit.com/store/implementing-domain-driven-design-9780321834577">Vaughn Vernon氏</a>の本でも書かれている。</p> 
  <p>F#に移行したときの難点は新しいパラダイムだった、と氏は言う。始めたときはC#スタイルのコーディングをしてしまい、これを克服して関数が他言語のプログラミングスタイルに移行するのには時間がかかった。関数型もオブジェクト指向もサポートする言語なので、どちらで書けばいいのか判断が難しい場合もあった。</p> 
 </div> 
</div><br><br><br><br><br><br></body></html>