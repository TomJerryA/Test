<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Facebook’s Release Process Behind the Move from Web-based to Native App</h3><p><a href="http://velocityconf.com/velocityeu2013/public/schedule/speaker/157901">Chaitanya Mishra</a>, from Facebook, <a href="http://velocityconf.com/velocityeu2013/public/schedule/detail/31081">spoke</a> at <a href="http://velocityconf.com/velocityeu2013">Velocity Conf London</a> last month about the <a href="http://www.infoq.com/interviews/legnitto-mobile-facebook">approach to scale Facebook’s Android app</a> from a web view interface to a full-fledged native app. To achieve this transition each product team took ownership of their features on Android. A core integration team regression tests and focuses on global app optimization over individual features optimization in order for the distributed development model to work.</p>
<p class="MsoNormal"><span lang="EN-GB">Because shipping new app versions (and fixes) to users depends first on an <a href="https://play.google.com/store/apps/details?id=com.facebook.katana&amp;hl=en">external party approval</a> and then on the users’ initiative to upgrade, the continuous delivery model used for Facebook’s web development (<a href="https://www.facebook.com/notes/facebook-engineering/ship-early-and-ship-twice-as-often/10150985860363920">the site ships twice a day</a>) needed to be adapted to keep a fast cycle time for Android development. Immediate feedback to developers when a build breaks, dog fooding new releases (shipped internally to employees 4 weeks before shipping to the app store) and production-like monitoring (providing quick feedback to dev on functional errors and performance problems) help increase confidence in the releases before they get delivered externally. During that 4 weeks period fixing takes place in a release branch parallel to the master branch (where new features are continuously added and tested for later release). </span></p>
<p class="MsoNormal"><span lang="EN-GB">Besides functional and performance testing (via the UI using <a href="http://selendroid.io/">Selendroid</a>), other Android specific checks in the build process include app size (are changes unwittingly increasing the app size), memory usage and power consumption (down to actual battery usage). Chaitanya gave the example of a significant and hard to explain power usage increase which turned out to be due to a minor change with a polling mechanism which prevented the app from going to sleep mode.</span></p>
<p class="MsoNormal"><span lang="EN-GB">After shipping to the outside world, app performance and error monitoring is done using <a href="https://code.google.com/p/droid4me/source/browse/trunk/droid4me/src/com/smartnsoft/droid4me/analytics/?r=546#analytics">Analytics Logger</a>. Feedback data is analysed regularly using an in-house tool called <a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-data-diving-with-scuba/10150599692628920">Scuba</a>. Chaitanya mentioned an example when an increasing number of DB crashes was found. Suspecting of low available space on users’ devices, the team added free space measurements only to discover it was actually the app which was consuming a lot more space than needed due to over allocation or even entire copies of database, large caches and also some unnecessary files. After the fixes the rate of DB crashes diminished considerably.</span></p>
<p class="MsoNormal"><span lang="EN-GB">Despite the success in transitioning to a fully native app, Chaitanya conceded that the swing towards native probably went too far occasionally, in particular for less used features that could have remained purely web based. According to Chaitanya the drawback of relying on web is the need to maintain a backwards compatible web site API as much as possible.&nbsp;</span></p><br><br><br><br><br><br></body></html>