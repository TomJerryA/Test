<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>DevOps de zero a 100%: Níveis e passos de adoção</h3><p>Nos &uacute;ltimos anos, o termo DevOps apareceu em centenas de artigos, apresenta&ccedil;&otilde;es, keynotes e discuss&otilde;es em geral. O DevOps alega criar um ciclo de feedback r&aacute;pido e reduzir o custo de cria&ccedil;&atilde;o de novas vers&otilde;es de produtos, ao mesmo tempo que melhora a estabilidade geral dos sistemas. Dadas essas alega&ccedil;&otilde;es talvez exageradas, era f&aacute;cil ignorar ou desmentir o movimento, considerando imaturidade ou falta de evid&ecirc;ncias. Mas as empresas continuaram a mostrar ganhos reais, e surgiram v&aacute;rios processos para ado&ccedil;&atilde;o de DevOps nas organiza&ccedil;&otilde;es. Por isso, o momento nunca foi melhor para investigar e trazer o movimento para o seu ambiente de trabalho.</p><p>Para quem n&atilde;o conhece, &eacute; facil imaginar o DevOps como uma mudan&ccedil;a &uacute;nica, de uma vez s&oacute;, como um apagar ou acender de luzes. Olhando dessa maneira, adotar tal mudan&ccedil;a pode parecer uma tarefa desanimadora. E como na engenharia civil, tentar construir algo complexo com uma &uacute;nica mudan&ccedil;a normalmente resulta em falhas. Felizmente, o DevOps n&atilde;o &eacute; instant&acirc;neo, e pode ser quebrado em uma s&eacute;rie de pequenas mudan&ccedil;as. A implanta&ccedil;&atilde;o e a escolha dos melhores momentos para aplic&aacute;-las podem ser controladas e ajustadas com base no que &eacute; mais adequado para sua organiza&ccedil;&atilde;o.</p><p>Convenientemente, as mudan&ccedil;as necess&aacute;rias para que o DevOps aconte&ccedil;a podem ser ilustradas em um gr&aacute;fico no estilo linha do tempo, onde a extrema esquerda representa as culturas e pr&aacute;ticas tradicionais da equipe de opera&ccedil;&otilde;es, e a extrema direita representa o novo estilo DevOps. Nessa vis&atilde;o de mundo, a quest&atilde;o n&atilde;o &eacute; se &quot;Sua empresa est&aacute; praticando DevOps?&quot;, e sim &quot;Qual a profundidade da ado&ccedil;&atilde;o da cultura DevOps na sua empresa?&quot;.</p><h2>A amplitude do DevOps</h2><p>Considerando a gama de ado&ccedil;&atilde;o do DevOps, &eacute; importante estabelecer claramente o que de fato representam os extremos esquerdo e direito dessa gama, para que possamos entender melhor o que significa passar de um ponto a outro.</p><p>O lado esquerdo representa a cultura e as pr&aacute;ticas tradicionais da equipe de opera&ccedil;&otilde;es. Uma descri&ccedil;&atilde;o comum desse extremo pode ser &quot;opera&ccedil;&otilde;es caixa preta&quot;. Nessa cultura, a equipe de opera&ccedil;&otilde;es &eacute; isolada da de desenvolvimento, e as intera&ccedil;&atilde;o entre as duas &eacute; evitada ou for&ccedil;ada. A caracter&iacute;stica marcante desse extremo &eacute; que o desenvolvimento e as opera&ccedil;&otilde;es t&ecirc;m objetivos marcadamente contr&aacute;rios. A equipe de desenvolvimento &eacute; comprometida e recompensada com entregas de novas funcionalidades e em levar o produto adiante. O objetivo da equipe de opera&ccedil;&otilde;es &eacute; manter a estabilidade acima de tudo. Sem a comunica&ccedil;&atilde;o correta, os objetivos entram em conflito, pois o interesse da equipe de opera&ccedil;&otilde;es &eacute; n&atilde;o entregar novas funcionalidades, e o maior interesse do desenvolvimento &eacute; entregar novas funcionalidade o mais r&aacute;pido poss&iacute;vel. Como a introdu&ccedil;&atilde;o de qualquer tipo de mudan&ccedil;a em um sistema est&aacute;vel pode potencialmente introduzir instabilidades inesperadas, o grupo de opera&ccedil;&otilde;es evita essa a&ccedil;&atilde;o o m&aacute;ximo poss&iacute;vel.</p><p>Um exemplo concreto &eacute; o de um desenvolvedor de aplica&ccedil;&otilde;es que introduz um defeito no c&oacute;digo, causando um loop infinito em um caso de exce&ccedil;&atilde;o n&atilde;o detectado nem pelo QA, nem pelos testes. Se essa modifica&ccedil;&atilde;o fosse aplicada pela equipe de opera&ccedil;&otilde;es, um servidor poderia aumentar a CPU para 100%, causando instabilidades. Se a equipe de opera&ccedil;&otilde;es evitasse aplicar tal altera&ccedil;&atilde;o, n&atilde;o haveria um problema, ou ao menos n&atilde;o haveria um novo problema. Esse &eacute; o ponto de vista desse extremo. O lado direito representa a completa aceita&ccedil;&atilde;o da cultura DevOps, em que desenvolvimento e opera&ccedil;&otilde;es s&atilde;o uma coisa s&oacute;. A equipe de desenvolvimento faz atividades de opera&ccedil;&otilde;es, e a equipe de opera&ccedil;&otilde;es faz atividades de desenvolvimento - e ambas as equipes t&ecirc;m o objetivo comum de entregar juntas novas funcionalidades, enquanto mant&ecirc;m certo n&iacute;vel de confiabilidade.</p><p><img src="http://www.infoq.com/resource/articles/wide-range-devops/pt/resources/101.jpg;jsessionid=877CD6B4EF136F3F36546E78A06879EB" alt="" _href="img://101.jpg" _p="true" /></p><p>Conhecer os dois extremos - que de fato s&atilde;o extremos - faz parecer assustador sair de um lado para o outro. E <em>&eacute; mesmo</em> assustador, se a mudan&ccedil;a for vista como um &uacute;nico grande passo. Ao quebrar o processo em uma s&eacute;rie de partes gerenci&aacute;veis, a tarefa torna-se muito mais fact&iacute;vel, os benef&iacute;cios mais n&iacute;tidos e os resultados finalmente parecem ating&iacute;veis.</p><h2>Mudan&ccedil;as culturais e t&eacute;cnicas para o DevOps</h2><p>A implanta&ccedil;&atilde;o do DevOps em uma organiza&ccedil;&atilde;o requer tanto uma mudan&ccedil;a cultural quanto mudan&ccedil;as t&eacute;cnicas. O ajuste &eacute; cultural por um lado, pois barreiras precisam ser quebradas para que as equipes de opera&ccedil;&otilde;es e de desenvolvimento possam se comunicar mais abertamente e compartilhar objetivos em comum. Por outro, &eacute; uma mudan&ccedil;a t&eacute;cnica, pois os desenvolvedores precisam entender melhor como a equipe de opera&ccedil;&otilde;es trabalha, assim como necessitam obter um bom conhecimento da arquitetura do sistema. A equipe de opera&ccedil;&otilde;es precisa conhecer como o processo de desenvolvimento funciona e ter um melhor entendimento do c&oacute;digo.</p><p>&Eacute; mais f&aacute;cil introduzir o DevOps quando essa introdu&ccedil;&atilde;o &eacute; dividida em partes menores, alternando-se entre mudan&ccedil;as culturais e mudan&ccedil;as t&eacute;cnicas. As pr&oacute;ximas se&ccedil;&otilde;es seguir&atilde;o esse modelo, pois se as mudan&ccedil;as comuns j&aacute; s&atilde;o dif&iacute;ceis de se conseguir, as radicais ent&atilde;o s&atilde;o praticamente imposs&iacute;veis. E ao alternar o que se est&aacute; mudando, cada mudan&ccedil;a &eacute; introduzida de forma mais sutil.</p><p>Ao inv&eacute;s de uma grande mudan&ccedil;a, ocorrer&aacute; uma pequena mudan&ccedil;a cultural, seguida por uma pequena mudan&ccedil;a t&eacute;cnica, seguida por outra mudan&ccedil;a cultural e assim sucessivamente. Dessa maneira, as equipes nunca ir&atilde;o acordar sentindo que tudo mudou repentinamente. Ao inv&eacute;s disso, sentir&atilde;o que as mudan&ccedil;as ocorreram mais organicamente e em ritmo natural, o que aumenta a probabilidade de que tais mudan&ccedil;as perdurem na empresa.</p><h2>M&eacute;tricas por todos os lados</h2><p>A primeira parte ao se mover da esquerda para a direita na gama de ado&ccedil;&atilde;o do DevOps &eacute; permitir a agrega&ccedil;&atilde;o de m&eacute;tricas por toda a organiza&ccedil;&atilde;o, tanto na infraestrutura quanto no n&iacute;vel das aplica&ccedil;&otilde;es. Existem muitas <a href="http://www.youtube.com/watch?v=czes-oa0yik">palestras excelentes sobre o assunto</a>, mas no final o objetivo sempre &eacute; responder a uma quest&atilde;o crucial: o que meu c&oacute;digo faz?</p><p>A equipe de desenvolvimento responder&aacute; rapidamente a essa quest&atilde;o, mostrando o c&oacute;digo que, infelizmente, s&oacute; mostra o que <em>deveria</em> fazer, n&atilde;o o que efetivamente <em>faz</em>. C&oacute;digo &eacute; como uma receita culin&aacute;ria que descreve os passos para chegar a um resultado saboroso, mas n&atilde;o tem muito efeito no resultado final. Da mesma forma, o c&oacute;digo pode descrever um processo para atingir algum efeito desej&aacute;vel, mas tal efeito no sistema real &eacute; imprevis&iacute;vel se olharmos apenas o c&oacute;digo. Veja abaixo um exemplo de c&oacute;digo no qual o desenvolvedor trocou o tempo de expira&ccedil;&atilde;o do cache de 3600 para 1800 segundos. Olhando apenas para o c&oacute;digo, pode-se ver essa mudan&ccedil;a, mas &eacute; dif&iacute;cil prever o impacto no sistema como um todo.</p><p><img src="http://www.infoq.com/resource/articles/wide-range-devops/pt/resources/02.jpg;jsessionid=877CD6B4EF136F3F36546E78A06879EB" alt="" _href="img://02.jpg" _p="true" /></p><p>A equipe de opera&ccedil;&otilde;es responder&aacute; a essa quest&atilde;o acessando o servidor e levantando alguns dados do sistema, como por exemplo o consumo de mem&oacute;ria e de CPU. Essa &eacute; uma resposta boa, pois mostra o efeito do c&oacute;digo no mundo real. A equipe de opera&ccedil;&otilde;es tem acesso a muito mais dados, permitindo respostas para quest&otilde;es importantes como &quot;Qual &eacute; o efeito desta mudan&ccedil;a no sistema como um todo&quot;, ou &quot;Por que o servi&ccedil;o Y ficou mais lento depois que o servi&ccedil;o X entrou em produ&ccedil;&atilde;o?&quot;. Antes, os desenvolvedores podiam apenas responder a esta quest&atilde;o especulando a partir de como o c&oacute;digo iria operar, o que podia funcionar algumas vezes; mas ter acesso aos dados reais &eacute; sem d&uacute;vida muito mais poderoso. A imagem abaixo ilustra o que a equipe de opera&ccedil;&otilde;es pode ver: dados do sistema em produ&ccedil;&atilde;o.</p><p><img src="http://www.infoq.com/resource/articles/wide-range-devops/pt/resources/03.jpg;jsessionid=877CD6B4EF136F3F36546E78A06879EB" alt="" _href="img://03.jpg" _p="true" /></p><p>&Eacute; importante lembrar em que ponto estamos na faixa de ado&ccedil;&atilde;o de DevOps: Estamos come&ccedil;ando a deixar a extrema esquerda, ou seja, ainda estamos em um ambiente tradicional de opera&ccedil;&otilde;es. Por isso, dar acesso aos desenvolvedores para o ambiente de produ&ccedil;&atilde;o n&atilde;o parece ser uma boa solu&ccedil;&atilde;o. Muitos desenvolvedores n&atilde;o se sentem confort&aacute;veis nesse ambiente, e quando as pessoas n&atilde;o se sentem confort&aacute;veis &eacute; natural que voltem ao que consideram um ambiente confort&aacute;vel. Tentar qualquer tipo de mudan&ccedil;a em uma organiza&ccedil;&atilde;o sem manter um certo n&iacute;vel de conforto no processo significar&aacute; uma mudan&ccedil;a com pouco embasamento, a qual provavelmente acabar&aacute; culminando na volta dos velhos h&aacute;bitos.</p><p>Disponibilizar esses dados de maneira amig&aacute;vel para o desenvolvedor &eacute; muito simples: gr&aacute;ficos. Tecnologias para gera&ccedil;&atilde;o de gr&aacute;ficos est&atilde;o por a&iacute; h&aacute; muito tempo, mas t&ecirc;m ficado particularmente populares nos &uacute;ltimos anos com o surgimento de ferramentas como Graphite e Statsd. Ao se capturar m&eacute;tricas do sistema para dentro do Graphite e expor a API para os desenvolvedores, consegue-se levar ao melhor dos dois mundos: a equipe de opera&ccedil;&otilde;es pode expor as m&eacute;tricas do sistema e os desenvolvedores podem expor as m&eacute;tricas da aplica&ccedil;&atilde;o. Assim, os desenvolvedores t&ecirc;m acesso &agrave; mem&oacute;ria, ao uso de CPU etc. al&eacute;m de estat&iacute;sticas sobre eventos da aplica&ccedil;&atilde;o, como registros de entrada (login), de sa&iacute;da (logout) e assim por diante.</p><p>Para um desenvolvedor, implementar uma m&eacute;trica pode representar apenas uma linha de c&oacute;digo:</p><p><img src="http://www.infoq.com/resource/articles/wide-range-devops/pt/resources/04.jpg;jsessionid=877CD6B4EF136F3F36546E78A06879EB" alt="" _href="img://04.jpg" _p="true" /></p><p>Isso resulta em um gr&aacute;fico no Graphite parecido com o seguinte:</p><p><img src="http://www.infoq.com/resource/articles/wide-range-devops/pt/resources/05.jpg;jsessionid=877CD6B4EF136F3F36546E78A06879EB" alt="" _href="img://05.jpg" _p="true" /></p><p>Configurar um sistema de gr&aacute;ficos &eacute; um trabalho normal para um time tradicional de opera&ccedil;&otilde;es, e a interface com Statsd e Graphite &eacute; t&atilde;o simples que desenvolvedores podem come&ccedil;ar a plotar gr&aacute;ficos com apenas algumas linhas de c&oacute;digo. Com apenas essas pequenas mudan&ccedil;as t&eacute;cnicas, desenvolvedores podem passar a conhecer melhor o desempenho, os efeitos do c&oacute;digo no sistema como um todo, e opera&ccedil;&otilde;es em geral. Pode-se dizer, agora, que sua organiza&ccedil;&atilde;o est&aacute; fazendo alguma coisa de DevOps, porque as equipes de desenvolvimento e opera&ccedil;&otilde;es est&atilde;o agora interagindo ao menos de forma m&iacute;nima. As intera&ccedil;&otilde;es ir&atilde;o aumentar, mas esta &eacute; uma posi&ccedil;&atilde;o inicial confort&aacute;vel.</p><h2>Documenta&ccedil;&atilde;o da infraestrutura</h2><p>Com a possibilidade de se ter uma vis&atilde;o do desempenho e da sa&uacute;de do sistema em produ&ccedil;&atilde;o, &eacute; natural que os desenvolvedores tornem-se curiosos sobre o que est&aacute; contido no sistema. Para muitos desenvolvedores, um sistema de larga escala em produ&ccedil;&atilde;o &eacute; uma caixa preta: uma requisi&ccedil;&atilde;o entra e uma resposta sai, mas os v&aacute;rios sistemas utilizados no caminho s&atilde;o desconhecidos.</p><p>Como solu&ccedil;&atilde;o, a infraestrutura deveria ser documentada. Isto pode come&ccedil;ar com um diagrama em alto n&iacute;vel do fluxo de uma requisi&ccedil;&atilde;o, indicando qual software &eacute; acessado em qual ponto. Quando isso estiver maduro, a documenta&ccedil;&atilde;o deveria mostrar o que cada parte da arquitetura faz e porque foi escolhida ao inv&eacute;s das solu&ccedil;&otilde;es dos competidores. Adicionalmente, a documenta&ccedil;&atilde;o deve mostrar pontos sobre como novos servidores s&atilde;o disponibilizados, potenciais cen&aacute;rios de falhas e resolu&ccedil;&otilde;es, introdu&ccedil;&atilde;o a ferramentas Unix, e da&iacute; por diante. O objetivo dessa documenta&ccedil;&atilde;o &eacute; permitir que os desenvolvedores tenham uma fonte de informa&ccedil;&atilde;o para ficarem mais confort&aacute;veis com a arquitetura, em alto n&iacute;vel, do sistema em produ&ccedil;&atilde;o.</p><p>Uma vez que esses recursos estejam dispon&iacute;veis, os desenvolvedores poder&atilde;o aprender mais sobre a arquitetura do sistema se estiverem interessados. E o interesse na infraestrutura vir&aacute; do sistema gr&aacute;fico implementado anteriormente, j&aacute; que ele oferece aos desenvolvedores uma maneira f&aacute;cil de olhar para o sistema em produ&ccedil;&atilde;o. Com m&eacute;tricas e documenta&ccedil;&atilde;o, a caixa preta por tr&aacute;s de opera&ccedil;&otilde;es est&aacute; come&ccedil;ando a desaparecer. Ainda n&atilde;o existem muita colabora&ccedil;&atilde;o entre os dois times, mas as barreiras para que isso se torne realidade come&ccedil;am a rapidamente desaparecer.</p><h2>Ambientes de desenvolvimentos e produ&ccedil;&atilde;o espelhados</h2><p>At&eacute; este ponto, os desenvolvedores interagiram com a equipe de opera&ccedil;&otilde;es, principalmente por meio da instrumenta&ccedil;&atilde;o do sistema e da documenta&ccedil;&atilde;o escrita. Estando equipados com esse conhecimento b&aacute;sico, seria &oacute;timo se pudessem realmente experimentar e interagir com os sistemas internos de opera&ccedil;&otilde;es. Fazer isso com o ambiente em produ&ccedil;&atilde;o neste momento n&atilde;o &eacute; apenas irreal, mas implica em uma amea&ccedil;a &agrave; estabilidade dos seus sistemas. &Eacute; prefer&iacute;vel dar aos desenvolvedores uma &aacute;rea segura para que possam experimentar.</p><p>Feito especificamente com esse prop&oacute;sito, o <a href="http://vagrantup.com/">Vagrant</a> &eacute; uma ferramenta para empacotar e distribuir ambientes de desenvolvimento na forma de m&aacute;quinas virtuais <a href="http://virtualbox.org/">VirtualBox</a>. Essas m&aacute;quinas virtuais s&atilde;o constru&iacute;das utilizando gerenciadores de configura&ccedil;&atilde;o padr&atilde;o como o <a href="http://opscode.com/chef">Chef</a>, o <a href="http://puppetlabs.com/">Puppet</a>, ou mesmo shell scripts b&aacute;sicos. Gra&ccedil;as a isso, o grupo de opera&ccedil;&otilde;es pode usar os mesmos scripts de configura&ccedil;&atilde;o de produ&ccedil;&atilde;o para preparar ambientes de desenvolvimento port&aacute;veis. Para os desenvolvedores, &eacute; esperado que o trabalho seja feito nesses ambientes, porque s&atilde;o os mais pr&oacute;ximos poss&iacute;veis aos de produ&ccedil;&atilde;o. Al&eacute;m disso, os desenvolvedores n&atilde;o precisam mais se preocupar com configura&ccedil;&atilde;o manual do seus computadores, porque a equipe de opera&ccedil;&otilde;es pode cuidar disso usando m&aacute;quinas Vagrant corretamente configuradas.</p><p>Esses ambientes de desenvolvimento, criados com base em scripts de produ&ccedil;&atilde;o da equipe de opera&ccedil;&otilde;es, d&aacute; aos desenvolvedores uma &aacute;rea para experimentar com sistemas reais. Se algum dano for feito, a m&aacute;quina virtual pode ser destru&iacute;da e recriada. Al&eacute;m de simplesmente oferecer uma &aacute;rea para experimentos, a configura&ccedil;&atilde;o real da m&aacute;quina virtual d&aacute; aos desenvolvedores uma vis&atilde;o de como os servidores s&atilde;o provisionados, como as mudan&ccedil;as de opera&ccedil;&otilde;es s&atilde;o aplicada nas m&aacute;quinas, e uma vis&atilde;o do mundo real da arquitetura dos sistemas.</p><h2>DevOps no hor&aacute;rio comercial</h2><p>Os desenvolvedores agora t&ecirc;m uma &aacute;rea para experimentar com o sistema real, al&eacute;m de documenta&ccedil;&atilde;o para aprender mais sobre o sistema, assim como m&eacute;tricas como uma forma de obter dados de produ&ccedil;&atilde;o. Mesmo com todo esse aparato, o trabalho de opera&ccedil;&otilde;es ainda &eacute; uma novidade e portanto intimida. &Eacute; hora de iniciar intera&ccedil;&otilde;es reais entre as duas equipes. Essa intera&ccedil;&atilde;o pode vir de f&oacute;runs, help desks, ou mesmo caminhando at&eacute; a outra pessoa para uma conversa cara a cara.</p><p>A melhor forma que encontrei at&eacute; o momento para introduzir essa nova pr&aacute;tica &eacute; a de &quot;hor&aacute;rio comercial&quot;. O hor&aacute;rio comercial tem uma quantidade fixa de tempo agendada de forma regular, em que as opera&ccedil;&otilde;es e os desenvolvedores ficam dedicados para responder a qualquer tipo de d&uacute;vida. Estas d&uacute;vidas podem variar das mais b&aacute;sicas, por exemplo, &quot;Como posso buscar arquivos na m&aacute;quina?&quot; at&eacute; algumas relativamente avan&ccedil;adas como &quot;Voc&ecirc; pode explicar a raz&atilde;o por tr&aacute;s deste par&acirc;metro de configura&ccedil;&atilde;o HAProxy?&quot;. O princ&iacute;pio mais importante dessas &quot;horas comerciais&quot; &eacute; que nenhum julgamento pode ser feito, n&atilde;o importa a quest&atilde;o. Essas horas s&atilde;o um tempo para que engenheiros possam se sentir seguros fazendo qualquer pergunta relevante, conseguindo dessa forma atingir um importante marco: a comunica&ccedil;&atilde;o! Ambos, desenvolvedores e opera&ccedil;&otilde;es ganham entendimento do que cada equipe faz; ambos veem e interagem com o trabalho do outro, e ambos est&atilde;o conversando.</p><h2>Mitigando os riscos de desenvolvedores fazendo opera&ccedil;&otilde;es</h2><p>Antes de continuar, gostaria de ressaltar que nesse ponto sua organiza&ccedil;&atilde;o j&aacute; atingiu uma cultura de DevOps mais saud&aacute;vel que a maioria das organiza&ccedil;&otilde;es. Essa cultura foi introduzida de maneira lenta, met&oacute;dica e com baixo risco. Continuando, come&ccedil;amos a chegar ao extremo direito de nossa linha do tempo de DevOps, uma &aacute;rea ainda radical se comparada aos passos anteriores e n&atilde;o t&atilde;o bem definida. No entanto, algumas organiza&ccedil;&otilde;es t&ecirc;m conseguido chegar nesse ponto com sucesso, obtendo os benef&iacute;cios dessas mudan&ccedil;as.</p><p>Os desenvolvedores possuem agora todas as ferramentas para come&ccedil;arem a executar mudan&ccedil;as reais de opera&ccedil;&otilde;es e tomar responsabilidade por isso. Como nos passos anteriores, isso pode ser introduzido em pequenos peda&ccedil;os, para reduzir riscos e deixar todos mais confort&aacute;veis.</p><p>O primeiro passo &eacute; adotar um modelo padr&atilde;o do mundo open source para mudan&ccedil;as em opera&ccedil;&otilde;es: <em>pull requests</em> e revis&otilde;es de c&oacute;digo. Quando os desenvolvedores desejam introduzir algo novo, podem realizar as altera&ccedil;&otilde;es e abrir um <em>pull request</em>. No cen&aacute;rio de DevOps, os desenvolvedores podem testar a mudan&ccedil;a numa m&aacute;quina Vagrant gerenciada configurada anteriormente. O <em>pull request</em> daria &agrave; equipe de opera&ccedil;&otilde;es a chance de revisar e checar a mudan&ccedil;a. Caso haja algo errado, coment&aacute;rios podem ser feitos para que o desenvolvedor evite cometer os erros novamente no futuro. No final, o <em>pull request</em> &eacute; aceito, com o desenvolvedor se sentindo confiante de ter feito a mudan&ccedil;a, enquanto a equipe de opera&ccedil;&otilde;es sente seguran&ccedil;a ao saber que a modifica&ccedil;&atilde;o foi aprovada por eles.</p><p>O segundo passo, e bastante experimental ainda, &eacute; utilizar algum n&iacute;vel de integra&ccedil;&atilde;o cont&iacute;nua com as opera&ccedil;&otilde;es. Em um n&iacute;vel b&aacute;sico, isso seria um servidor de integra&ccedil;&atilde;o cont&iacute;nua como o <a href="http://jenkins-ci.org/">Jenkins</a>, verificando se os scripts de opera&ccedil;&otilde;es rodam sem erros em cada <em>commit</em>, dentro de um ambiente pr&oacute;prio, possivelmente gerenciado via Vagrant. <em>Smoke Tests</em> b&aacute;sicos tamb&eacute;m podem ser realizados, como uma verifica&ccedil;&atilde;o de que um request HTTP pode ser feito para a infraestrutura resultante.</p><p>Com uma ou ambas solu&ccedil;&otilde;es aplicadas, os desenvolvedores podem fazer altera&ccedil;&otilde;es de opera&ccedil;&otilde;es com seguran&ccedil;a, ao mesmo tempo que a equipe de opera&ccedil;&otilde;es sente-se segura, porque a valida&ccedil;&atilde;o das mudan&ccedil;as ainda &eacute; responsabilidade deles. Trata-se da primeira vez que o desenvolvimento e as opera&ccedil;&atilde;o est&atilde;o realmente trabalhando juntos e compartilhando algum n&iacute;vel de responsabilidade. Ainda h&aacute; equipes de desenvolvimento e de opera&ccedil;&otilde;es distintos, mas essa distin&ccedil;&atilde;o est&aacute; em processo de desaparecimento acelerado.</p><h2>Desenvolvedores: Divirtam-se!</h2><p>Agora, no lado extremo direito da linha do tempo de DevOps: os desenvolvedores fazem toda as atividades de opera&ccedil;&otilde;es. Tendo implementado todos os peda&ccedil;os anteriores, as mudan&ccedil;as culturais e t&eacute;cnicas aplicadas tornam isso uma possibilidade real. Na pr&aacute;tica, isso geralmente funciona mantendo duas equipes separadas que trabalham muito mais pr&oacute;ximas. A equipe de opera&ccedil;&otilde;es pode ser menor e mais desenvolvedores podem ser contratados, pois podem realizar atividades de opera&ccedil;&otilde;es com a supervis&atilde;o de poucas pessoas da equipe de Ops. Os desenvolvedores podem e devem ser acionados em casos de problemas, com a equipe de opera&ccedil;&otilde;es sendo a segunda linha de defesa.</p><p>Repetindo, isso s&oacute; funciona por causa da funda&ccedil;&atilde;o que constru&iacute;mos passo a passo. As m&eacute;tricas oferecem uma vis&atilde;o ampla dos efeitos do c&oacute;digo do desenvolvedor sobre o sistema como um todo. A documenta&ccedil;&atilde;o permite ao desenvolvedor aprender mais sobre a arquitetura em produ&ccedil;&atilde;o, para ajudar a entender melhor os efeitos de diferentes modifica&ccedil;&otilde;es. As m&aacute;quinas virtuais, juntamente com um fluxo criado sobre scripts de configura&ccedil;&atilde;o autom&aacute;ticos economizam tempo para a equipe de opera&ccedil;&otilde;es, pois permitem que haja uso de ferramentas de produ&ccedil;&atilde;o para criar ambientes de desenvolvimento; enquanto isso, oferecem aos desenvolvedores uma &aacute;rea para realmente experimentarem com a arquitetura do sistema.</p><p>As &quot;horas comerciais&quot;, ou f&oacute;runs, s&atilde;o um ambiente para qualquer tipo de quest&otilde;es que os desenvolvedores ou a equipe de opera&ccedil;&otilde;es possam ter sobre suas respectivas atividades, e prov&ecirc;m um ambiente seguro para aprendizagem. Os testes automatizados de infraestrutura e a revis&atilde;o de c&oacute;digo d&atilde;o a ambos, desenvolvedores e opera&ccedil;&otilde;es, uma cobertura para que o risco de mudan&ccedil;as operacionais seja mitigado. O resultado final &eacute; que ambas as equipes comunicam-se muito mais livremente, confiando mais no outro, e no final as diferen&ccedil;as entre as equipes tornam-se muito menos claras.</p><h2>DevOps</h2><p>Os benef&iacute;cios de DevOps s&atilde;o muitos. Em primeiro lugar, existe mais colabora&ccedil;&atilde;o e confian&ccedil;a dentro da empresa. A taxa de funcionalidades entregues &eacute; aumenta porque existem mais pessoas para fazer as opera&ccedil;&otilde;es e a equipe de opera&ccedil;&otilde;es n&atilde;o precisa apenas dizer &quot;n&atilde;o&quot;, pois os desenvolvedores tamb&eacute;m s&atilde;o respons&aacute;veis por qualquer altera&ccedil;&atilde;o. O DevOps tamb&eacute;m melhora a estabilidade geral do sistema, porque existem mais olhos capacitados observando os efeitos das v&aacute;rias mudan&ccedil;as.</p><p>Como as funcionalidades podem ser (e s&atilde;o) mais rapidamente entregues, ocorrem menos entregas grandes que requerem indisponibilidade do sistema. Ao inv&eacute;s disso, mudan&ccedil;as s&atilde;o implantadas em peda&ccedil;os pequenos e mais gerenci&aacute;veis, que n&atilde;o requerem indisponibilidade alguma.</p><hr /><p>Onde est&aacute; sua organiza&ccedil;&atilde;o na linha de ado&ccedil;&atilde;o do DevOps? Onde deseja estar? Contanto que n&atilde;o se esteja na extrema esquerda, sua organiza&ccedil;&atilde;o j&aacute; est&aacute; praticando DevOps. Essa estrutura&ccedil;&atilde;o dos passos lhe d&aacute; o caminho necess&aacute;rio para seguir com confian&ccedil;a e com baixo risco. E caso sinta que as mudan&ccedil;as n&atilde;o estejam funcionando corretamente, elas ser&atilde;o pequenas o suficiente para serem revertidas e experimentadas novamente no futuro.</p><div class="clearer-space"></div><br><br><br><br><br><br></body></html>