<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>PivotalがReactorをGAリリース</h3><p><a target="_blank" href="http://www.infoq.com/news/2013/11/reactor-goes-ga"><em>原文(投稿日：2013/11/13)へのリンク</em></a></p>
<div class="article_page_left news_container text_content_container"> 
 <div class="text_info"> 
  <p>オープンソースらしく単純な名前の<a href="http://gopivotal.com" target="_blank">Pivotal</a>のライブラリ “Reactor” が，先の火曜日に，バージョン1.0の<a href="https://spring.io/blog/2013/11/12/it-can-t-just-be-big-data-it-has-to-be-fast-data-reactor-1-0-goes-ga" target="_blank">GA(General Availability)リリース</a>というマイルストンに達した。イベント駆動でリアクティブなプログラミングモデル用に低レベルの抽象化を提供するReactorは，<a href="https://spring.io/platform" target="_blank">Spring IO Platform</a>の&quot;IO Foundation&quot;レイヤの構成メンバだ。</p> 
  <p>ReactorはSpring IO Platformの基本的なコンポーネントとして設計されているが，それ自身はSpring Frameworkへの直接的な依存性を持っていない。<a href="https://github.com/reactor/reactor/wiki" target="_blank">プロジェクトのwiki</a>には，&quot;reactor-spring&quot; モジュールによってSpringを &quot;ネイティブにサポート&quot;するが，コアAPIは自己完結的なライブラリとして提供されているので，Springのアプリケーションコンテキスト外でも利用可能だ，と説明されている。</p> 
  <p>Reactorは &quot;毎秒数千，数万，あるいは数百万という並列要求を処理する必要のある&quot; ，高スループットで低レイテンシなアプリケーション開発を可能にする。確かにリリース発表のブログ記事では，Reactorを &quot;標準的な開発用ラップトップ上で毎秒1,000～1,500万のイベント&quot; を処理する能力がある，としているが，同時に &quot;アプリケーションの処理内容に ... Reactorの処理能力の低下は，処理するタスクに大きく依存&quot; することも明記されている。</p> 
  <p>Reactorの発想の大部分は，イベントディスパッチによる非同期処理モデルを定義した<a href="http://en.wikipedia.org/wiki/Reactor_pattern" target="_blank">Reactorデザインパターン</a>から得たものだ。プロジェクトにインスピレーションを与えたのは，しかしながらデザインパターンのみではない。他にリリースノートには，多数のオープンソースプロジェクト，さらには近く公開されるJava 8 リリースが引用されている。Reactorはこれらの領域からコンセプトを借用して，StreamsやPromisesといった非同期プログラム技術を抽象化して提供しているのだ。</p> 
  <p>Reactorはインテグレーションを簡素化するために，さまざまな有名ライブラリや言語に対して，充実したサポートを組み込みで提供している。またキャッチフレーズである &quot;Fast Data&quot; をさらに強調するものとして，&quot;極めてハイパフォーマンスな金融取引を実現するために&quot; 設計された，高スループットの<a href="http://lmax-exchange.github.io/disruptor/files/Disruptor-1.0.pdf" target="_blank">LMAX Disruptor</a>用のAPIについて明記することも忘れていない。</p> 
  <p>さらにプロジェクトでは，<a href="http://netty.io" target="_blank">Netty</a>ベースのTCPクライアントおよびサーバ用APIを備えた “reactor-tcp” モジュールを開発，提供している。Nettyは “高パフォーマンス，高スケーラビリティの ... 非同期イベント駆動のネットワークアプリケーションフレームワークとツーリング” 提供するJVM用のネットワークライブラリだ。</p> 
  <p>文法面でのシンプルさと関数プログラミングサポートの両方を提供するため，主要言語としてGroovyを採用し，Closureをコールバックとして使用する。ReactorはGroovy DSLを広範に採用することで，シンプルなコンフィギュレーション体験を提供している。Java 8も主要な開発言語の対象とされていて，ReactorのAPIではコールバックとしてメソッド参照に加えて，ラムダを活用するように設計されている。またClojurewerkzのプロジェクトである<a href="https://github.com/clojurewerkz/meltdown" target="_blank">Meltdown</a>では，ClojureからReactorへのインターフェースを提供している。ReactorチームはライブラリのAPIについて，&quot;拡張性を備えた設計である ... したがって，非JVM言語でも利用可能&quot; である点を強調している。</p> 
  <p>ReactorのソースコードはApacheライセンスで公開されていて，<a href="https://github.com/reactor/reactor" target="_blank">GitHubから自由に取得することができる</a>。初学者を具体的な例でガイドするために，クイックスタート資料やサンプルプロジェクトも用意されている。デザインを一新した<a href="http://www.spring.io" target="_blank">Spring.IO webサイト</a>の<a href="http://spring.io/guides" target="_blank">ガイドの章</a>にも，<a href="http://spring.io/guides/gs/messaging-reactor/" target="_blank">総合的な &quot;Getting Started&quot;</a> チュートリアルがある。</p> 
  <p>さまざまなReactorのモジュールはMavenのリソースとしても提供されていて，<a href="https://spring.io/blog/2013/11/12/it-can-t-just-be-big-data-it-has-to-be-fast-data-reactor-1-0-goes-ga#apache-licensed-with-a-friendly-community" target="_blank">リリースノートの末尾</a>に説明があるように，Maven Centralから入手可能だ。</p> 
 </div> 
</div><br><br><br><br><br><br></body></html>