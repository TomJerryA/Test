<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Uma solução para a dívida técnica?</h3><p><a href="http://blog.crisp.se/author/henrikkniberg">Henrik Kniberg</a>, respeitado agilista e autor de um dos livros mais populares do InfoQ, <a href="http://www.infoq.com/br/minibooks/scrum-xp-from-the-trenches">Scrum e XP direto das Trincheiras</a>, publicou recentemente em seu blog um <a href="http://blog.crisp.se/2013/07/12/henrikkniberg/the-solution-to-technical-debt?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=the-solution-to-technical-debt">artigo</a> que sugere como melhorar, com o auxilio da equipe, as defici&ecirc;ncias encontradas com o d&iacute;vida t&eacute;cnica.</p>
<p>A d&iacute;vida t&eacute;cnica &eacute; um assunto pol&ecirc;mico, muito discutido em <a href="http://br.groups.yahoo.com/group/scrum-brasil/message/8833">listas de m&eacute;todos &aacute;geis</a> no Brasil e no <a href="http://tech.groups.yahoo.com/group/scrumdevelopment/message/52553">exterior</a>.</p>
<p>Henrik Kniberg inicia o artigo com o questionamento:</p>
<blockquote> 
 <p>Voc&ecirc; &eacute; parte de uma equipe de desenvolvimento que tenta ser &aacute;gil? Na pr&oacute;xima vez que sua equipe estiver reunida, fa&ccedil;a a seguinte pergunta a cada um dos desenvolvedores: &quot;Numa escala de 1 a 5, o que pensa sobre a qualidade do c&oacute;digo que desenvolve?&quot;</p> 
</blockquote>
<p>O valor 5 &eacute; para o caso de acreditar que o c&oacute;digo &eacute; muito bom e 1 para o c&oacute;digo de baix&iacute;ssima qualidade. Compare os resultados, plote esse resultado em um gr&aacute;fico e deixe exposto para que todos percebam. O primeiro passo para identificar um problema &eacute; visualiz&aacute;-lo, defende Kniberg. Por meio de perguntas que devem ser realizadas e analisadas em conjunto com a equipe, ele sugere pontos a serem levantados, os quais detalhamos a seguir.</p>
<h3>Queremos continuar a escrever c&oacute;digo dessa forma? Se n&atilde;o, qual a qualidade do c&oacute;digo buscada?</h3>
<blockquote> 
 <p>A maioria dos desenvolvedores querem estar em um n&iacute;vel de qualidade 4 ou 5. Essa escala &eacute; arbitr&aacute;ria e subjetiva, mas ainda assim &eacute; &uacute;til. Caso ocorram fortes diverg&ecirc;ncias de opini&otilde;es, &eacute; preciso ter uma discuss&atilde;o sobre o que se entende por qualidade e o que se deseja alcan&ccedil;ar como equipe.</p> 
</blockquote>
<p>Kniberg sugere usar <a href="http://www.c2.com/cgi/wiki?XpSimplicityRules">as quatro regras da simplicidade</a> propostas por Kent Beck como ponto de refer&ecirc;ncia. E diz que &eacute; dif&iacute;cil resolver o problema se a equipe n&atilde;o concordar com a qualidade de c&oacute;digo que se deseja obter.</p>
<h3>Qual &eacute; a causa do problema?</h3>
<blockquote> 
 <p>Lixo entra no c&oacute;digo porque desenvolvedores colocam lixo nele! Expondo essa situa&ccedil;&atilde;o de forma mais clara: c&oacute;digo ruim &eacute; criado por desenvolvedores. O desenvolvedor usa um teclado real para construir c&oacute;digo real para um computador real. Independentemente de outras circunst&acirc;ncias, s&atilde;o as a&ccedil;&otilde;es do desenvolvedor que determinam a qualidade do c&oacute;digo.</p> 
</blockquote>
<p>O primeiro passo para resolver a d&iacute;vida t&eacute;cnica, portanto &eacute; admitir e aceitar que ela existe. Por&eacute;m, muitos desenvolvedores argumentam: &quot;herdamos um monte de c&oacute;digo legado de baixa qualidade; n&atilde;o escrevemos isso!&quot;. Mas nesse caso, a qualidade do c&oacute;digo melhorou ou piorou desde o legado?</p>
<h3>Estamos produzindo um c&oacute;digo de baixa qualidade?</h3>
<p>Henrik Kniberg fez essa pergunta v&aacute;rias vezes para v&aacute;rios tipos de equipes e identificou tend&ecirc;ncias fortes.</p>
<blockquote> 
 <p>Essa situa&ccedil;&atilde;o N&Atilde;O acontece porque o desenvolvedor n&atilde;o sabe como escrever c&oacute;digo de qualidade. As habilidades na equipe podem variar, mas certamente algumas pessoas na equipe ser&atilde;o capazes de escrever bons c&oacute;digos; al&eacute;m disso h&aacute; vontade nos demais desenvolvedores de aprender. Combine-se isso com a pr&aacute;tica de revis&atilde;o de c&oacute;digo ou de programa&ccedil;&atilde;o em pares, e a maioria das equipes ser&atilde;o perfeitamente capazes de escrever c&oacute;digo que classificariam no n&iacute;vel 4 ou a 5, desde que tenham o tempo que consideram necess&aacute;rio para isso.</p> 
</blockquote>
<p>Kniberg cita ainda a <a href="http://en.wikipedia.org/wiki/Broken_windows_theory">s&iacute;ndrome da janela quebrada</a> como um fator que colabora para a exist&ecirc;ncia de c&oacute;digo de baixa qualidade.</p>
<blockquote> 
 <p>C&oacute;digo de baixa qualidade convida c&oacute;digo pior ainda, porque as pessoas tendem a se adaptar &agrave; nova forma de escrever c&oacute;digo, seguindo a mesma qualidade do que j&aacute; existe.</p> 
</blockquote>
<p>Quando esta situa&ccedil;&atilde;o for identificada, &eacute; necess&aacute;rio decidir simplesmente por parar de escrever, e fazer uso de revis&atilde;o de c&oacute;digo ou programa&ccedil;&atilde;o em pares para se policiar. Kniberg indica, ainda, que a raz&atilde;o mais prov&aacute;vel para que os desenvolvedores estejam escrevendo c&oacute;digo de baixa qualidade &eacute; a press&atilde;o.</p>
<blockquote> 
 <p>Muitas vezes ou&ccedil;o coment&aacute;rios como &quot;n&atilde;o temos tempo para escrever c&oacute;digo limpo&quot; (essa afirma&ccedil;&atilde;o &eacute; na pior das hip&oacute;teses uma mentira e na melhor das hip&oacute;teses uma desculpa esfarrapada). A verdade n&atilde;o &eacute; que n&atilde;o se tem tempo para escrever c&oacute;digo limpo, e sim que se decidiu n&atilde;o o fazer.</p> 
</blockquote>
<p>Sobre a quest&atilde;o da press&atilde;o, Henrik Kniberg relata que pode ser feita uma an&aacute;lise de causa e efeito para descobrir as causas e questionar-se a si mesmo. &Eacute; uma press&atilde;o real? Ser&aacute; que essas pessoas realmente querem que se escreva c&oacute;digo de baixa qualidade? Essas pessoas sabem o resultado gerado por c&oacute;digo ruim? Elas realmente acreditam que vale a pena o esfor&ccedil;o para entregar c&oacute;digo de qualidade?</p>
<blockquote> 
 <p>N&atilde;o h&aacute; sentido para um neg&oacute;cio escrever c&oacute;digo de baixa qualidade. Podemos ter um objetivo extremamente importante no curto prazo, que se precisa alcan&ccedil;ar a todo custo, ou se pode fazer a constru&ccedil;&atilde;o de um prot&oacute;tipo descart&aacute;vel para validar rapidamente no mercado. Mas isso deve ser a exce&ccedil;&atilde;o, n&atilde;o a regra. Se n&atilde;o for limpa a bagun&ccedil;a constru&iacute;da logo quando o objetivo a curto prazo for alcan&ccedil;ado, ou se realmente n&atilde;o for jogado fora o prot&oacute;tipo descart&aacute;vel, ent&atilde;o certamente iremos acabar com um caso cr&ocirc;nico de c&oacute;digo de baixa qualidade.</p> 
</blockquote>
<p>O fato de o desenvolvedor ser respons&aacute;vel pelo problema &eacute; uma boa not&iacute;cia. Pois isso significa que o desenvolvedor &eacute; capaz de resolv&ecirc;-lo. E a solu&ccedil;&atilde;o &eacute; simples: parar de escrever c&oacute;digo ruim.</p>
<h3>Simplesmente pare de escrever c&oacute;digo ruim</h3>
<p><img src="http://www.infoq.com/resource/articles/solucao-divida-tecnica/pt/resources/image01.png" alt="" _href="img://image01.png" _p="true" /></p>
<p>Apesar dessa afirma&ccedil;&atilde;o simples, h&aacute; uma diferen&ccedil;a real. Segundo Kniberg, se voc&ecirc; continua a escrever c&oacute;digo ruim, suas atividades ficam cada vez mais lentas com o passar do tempo, pois se perde mais tempo lutando contra esse c&oacute;digo ruim.</p>
<p>Como equipe, est&aacute; na m&atilde;o dela a decis&atilde;o de quanto trabalho deve ser alocado para ser realizado. Esse &eacute; um dos princ&iacute;pios fundamentais tanto para os m&eacute;todos &aacute;geis quanto para o Lean. Este princ&iacute;pio existe nos m&eacute;todos &aacute;geis como no Sprint Planning do Scrum, em que a equipe escolhe quantos itens do backlog vai incluir no sprint, e o mesmo ocorre no XP durante o Jogo do Planejamento. No Kanban a equipe tem um limite em seu WIP (Work in Progress) e s&oacute; puxa o pr&oacute;ximo item quando o atual &eacute; conclu&iacute;do. De forma clara, a equipe possui pleno poder e responsabilidade sobre a qualidade.</p>
<p>Um questionamento que sempre deve ser realizado &eacute;: qual &eacute; a qualidade do c&oacute;digo produzido no &uacute;ltimo sprint, em uma escala de 1 a 5? Se for menos 4 ou 5, a equipe, no pr&oacute;ximo sprint, dever&aacute; puxar menos hist&oacute;rias. A sugest&atilde;o de Henrik Kniberg &eacute; de que a equipe continue fazendo isso at&eacute; que encontre o seu ritmo sustent&aacute;vel.</p>
<blockquote> 
 <p>O Product Owner (ou a pessoa que define as prioridades dos neg&oacute;cios) ter&aacute; que priorizar mais. Essa pessoa, est&aacute; acostumada a ver de 8 a 10 hist&oacute;rias sa&iacute;rem de cada sprint. Agora essa pessoa s&oacute; ver&aacute; de 6 a 7. Com isso, precisar&aacute; decidir quais hist&oacute;rias n&atilde;o ser&atilde;o necess&aacute;rias construir.</p> 
</blockquote>
<p>A diminui&ccedil;&atilde;o na quantidade de entregas levar&aacute; a discuss&otilde;es e debates dif&iacute;ceis. A verdadeira fonte de press&atilde;o (se houver) se revelar&aacute;. A qualidade &eacute; invis&iacute;vel no curto prazo, e precisa ser explicada.</p>
<h3>Qualidade no c&oacute;digo n&atilde;o &eacute; o mesmo que qualidade no produto</h3>
<p>C&oacute;digo n&atilde;o &eacute; tudo. H&aacute; mais pessoas envolvidas no desenvolvimento de um produto que apenas desenvolvedores de software. Todos os envolvidos s&atilde;o coletivamente respons&aacute;veis pela qualidade do produto que est&aacute; sendo constru&iacute;do. Qualidade no c&oacute;digo &eacute; um subconjunto de qualidade do produto. &Eacute; poss&iacute;vel se ter um grande c&oacute;digo, mas ainda assim acabar com um produto que ningu&eacute;m quer usar, porque ele simplesmente resolve o problema errado. Henrik Kniberg destaca que:</p>
<blockquote> 
 <p>Tecnicamente, &eacute; poss&iacute;vel construir um bom produto com c&oacute;digo de baixa qualidade. Algumas equipes conseguem ir bem longe seguindo essa ideia. Mas estender e manter o produto &eacute; lento, caro e doloroso, uma vez que o produto &eacute; basicamente podre por dentro. &Eacute; uma proposta perde-perde ao longo do tempo e os melhores desenvolvedores certamente v&atilde;o deixar a equipe por simplesmente n&atilde;o quererem mais dar manuten&ccedil;&atilde;o no lixo com o qual s&atilde;o obrigados a conviver.</p> 
</blockquote>
<h3>E quanto ao c&oacute;digo ruim e legado?</h3>
<p>O pr&oacute;ximo passo &eacute; decidir se &eacute; poss&iacute;vel viver com a d&iacute;vida t&eacute;cnica existente, ou realmente fazer alguma coisa para melhorar a situa&ccedil;&atilde;o. Se a equipe decidir reduzir o d&iacute;vida t&eacute;cnica, a consequ&ecirc;ncia &eacute; que vai desacelerar ainda mais no curto prazo - mas acelerar no longo prazo.</p>
<p>&Agrave;s vezes vale a pena, &agrave;s vezes n&atilde;o. A resposta n&atilde;o &eacute; &oacute;bvia e &eacute; uma decis&atilde;o de neg&oacute;cios; por isso certifique-se de envolver na discuss&atilde;o as pessoas que est&atilde;o pagando por isso.</p>
<p>Se decidir reduzir a sua d&iacute;vida t&eacute;cnica atual, fa&ccedil;a com que isso fique muito claro para todos os envolvidos com uma concord&acirc;ncia do tipo &quot;Vamos parar de escrever c&oacute;digo ruim e gradualmente limpar o c&oacute;digo velho&quot;.</p>
<p>Uma vez que todos concordarem com essa decis&atilde;o (e essa &eacute; a parte mais dif&iacute;cil), h&aacute; muitas t&eacute;cnicas de como concretiz&aacute;-la. Henrik Kniberg sugere duas t&eacute;cnicas que em sua experi&ecirc;ncia sempre funcionam muito bem:</p>
<blockquote> 
 <p>Adicione &agrave; sua defini&ccedil;&atilde;o de pronto: &quot;redu&ccedil;&atilde;o da d&iacute;vida t&eacute;cnica&quot;. E para as &aacute;reas que ter&atilde;o maior c&oacute;digo corrigido, crie um &quot;backlog t&eacute;cnico&quot; e reserve tempo para isso.</p> 
</blockquote>
<h3>Conclus&otilde;es</h3>
<p>Uma dedu&ccedil;&atilde;o clara do artigo de Kniberg &eacute; que o desenvolvedor possui em suas m&atilde;os tanto o problema como a solu&ccedil;&atilde;o para a d&iacute;vida t&eacute;cnica. N&atilde;o h&aacute; necessidade de se preocupar ou ter vergonha do passado. Em vez disso, deve-se ficar orgulhoso do que foi feito e usar o que tiver a seu alcance para fazer alguma coisa sobre isso − tomar uma dura decis&atilde;o de parar de escrever c&oacute;digo de baix&iacute;ssima qualidade. Isso ir&aacute; iniciar uma cadeia de eventos positivos e provavelmente prosseguir&aacute; no longo prazo.</p>
<h3>Sobre o Autor</h3>
<p>Marcelo Costa (<a href="http://www.linkedin.com/in/marcelojscosta">LinkedIn</a>, <a href="http://twitter.com/marcelojscosta">Twitter</a>) &eacute; p&oacute;s-graduado em Engenharia de Software pela UNICAMP. Atua em sistemas de alta complexidade desde 2002, coordenando equipes multidisciplinares no desenvolvimento de software nas &aacute;reas de educa&ccedil;&atilde;o, sa&uacute;de e finan&ccedil;as. Especializa-se na coleta inteligente de informa&ccedil;&otilde;es na internet e de conte&uacute;do eletronicamente dispon&iacute;vel; atualmente &eacute; Growth Hacker e Engenheiro de Software na <a href="http://www.collect-in.com/">Collect-In Tecnologia</a>. Possui experi&ecirc;ncia com Lean, Kanban, Scrum, SOA, ALM, PostgreSQL, Shell Script e PHP.</p><br><br><br><br><br><br></body></html>