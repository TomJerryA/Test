<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /></head><body><h3>Hybrid Mobile Apps with ASP.NET MVC</h3><p>Over a decade ago, while attending a Microsoft Professional Developers Conference, we were shown a video on the coming mobile future. The video showcased futuristic-looking, Windows-powered phones being used for tasks such as locating the closest doctor’s office. In an era where the <a href="http://en.wikipedia.org/wiki/Palm_VII">Palm VII</a> was the closest thing to a smartphone, the video showcased an impressive future.</p><p>Fast forward to 2013: There is no mistake that we are living this future. Smartphones and other mobile devices are everywhere. They are available at multiple price points and are increasingly affordable. In fact, for many in the developing world, their only computer is the powerful smartphone they own.</p><h2>Mobile application development: growth predictions from Gartner</h2><p>Gartner predicts<sup>i</sup> by 2016, at least 50 percent of enterprise e-mail users will rely primarily on a browser, tablet, or mobile client instead of a desktop client. Given the increase in the adoption of mobile devices, it is also expected software application development targeting these devices will also dramatically increase in the coming years. Again, Gartner predicts mobile application development projects targeting smartphones and tablets will outnumber native PC projects by a ratio of 4 to 1 by 2015. Gartner further says that smartphones and tablets will represent more than 90 percent of the new net growth in device adoption in the coming four years.</p><p>The Apple app store now boasts over 500,000 apps. Android has close to the same number and the Windows Phone marketplace, a much more recent contender, recently crossed 50,000 and is growing at a fast pace.</p><h2>Line of business mobile applications: the challenge posed by fragmentation</h2><p>Given this rather exciting backdrop, we can be certain most line-of-business applications will be made available on mobile platforms in the immediate future. As with any other opportunity, mobile application development, with all its promises, comes with its own set of challenges.</p><p>One of the primary challenges is the issue of fragmentation. Estimates from the third quarter of 2012 indicated the mobile operating system market is very fragmented. The variants of Android accounted for about 72% of devices sold during this quarter. iOS accounted for about 14%. Research in Motion (RIM/Blackberry) accounted for about 5% and the Windows Phone platform for around 2% (via <a href="http://www.neowin.net/news/gartner-microsoft-increases-mobile-os-market-share-in-q3-2012">Gartner</a>).</p><p>Developing a line-of-business application to function on all these devices involves working with the following vastly different technologies:</p><p> </p><table border="1" cellspacing="0" cellpadding="0"> 
 <tbody> 
  <tr> 
   <td valign="top" width="128"> <p><b>Platform</b></p> </td> 
   <td valign="top" width="137"> <p><b>Primary development platform</b></p> </td> 
   <td valign="top" width="109"> <p><b>Primary development language</b></p> </td> 
   <td valign="top" width="126"> <p><b>Primary IDE</b></p> </td> 
   <td valign="top" width="138"> <p><b>Development platforms</b></p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="128"> <p>Android</p> </td> 
   <td valign="top" width="137"> <p>Java based</p> </td> 
   <td valign="top" width="109"> <p>Java</p> </td> 
   <td valign="top" width="126"> <p>Eclipse</p> </td> 
   <td valign="top" width="138"> <p>Windows, Mac OSX, Linux</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="128"> <p>iOS</p> </td> 
   <td valign="top" width="137"> <p>Cocoa Touch framework</p> </td> 
   <td valign="top" width="109"> <p>Objective C</p> </td> 
   <td valign="top" width="126"> <p>Xcode</p> </td> 
   <td valign="top" width="138"> <p>Mac OSX</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="128"> <p>RIM</p> </td> 
   <td valign="top" width="137"> <p>Java ME</p> </td> 
   <td valign="top" width="109"> <p>Java</p> </td> 
   <td valign="top" width="126"> <p>Eclipse</p> </td> 
   <td valign="top" width="138"> <p>Windows, Mac OSX</p> </td> 
  </tr> 
  <tr> 
   <td valign="top" width="128"> <p>Windows Phone 8</p> </td> 
   <td valign="top" width="137"> <p>.NET/native</p> </td> 
   <td valign="top" width="109"> <p>C#/C++</p> </td> 
   <td valign="top" width="126"> <p>Visual Studio</p> </td> 
   <td valign="top" width="138"> <p>Windows</p> </td> 
  </tr> 
 </tbody> 
</table><p></p><p>The platforms, languages, and tools involved are substantially different, and the effort involved in producing a solution that will work on every platform is substantial.</p><p>It is also worth noting there is substantial fragmentation even within some of the platforms. This is especially true with the currently dominant Android platform. Given that Android is open and vendors are free to make changes, there are literally hundreds of Android-based devices available on the market today. Many of them work only with specific levels of the Android API. Some of them have issues with applications that target certain features even within a supported API level. In summary, there is no shortage of fragmentation in the mobile market. This makes the implementation of a native solution on multiple platforms quite daunting.</p><h2>Mobile web applications: the solution for fragmentation?</h2><p>Web applications are an alternative to native applications. All the major mobile platforms offer very capable browsers. In addition, with the exception of the Windows Phone browser, most other platform browsers are based on the open source WebKit browser platform powering the desktop versions of Apple Safari and Google Chrome. There is excellent support for JavaScript on these browser platforms; jQuery is fully supported on most current mobile devices. Also, increasing compliance with HTML 5 and related web standards is making the browser even more attractive as a development platform. It is possible to build very functional web sites that work very well on mobile devices with technology available today.</p><h2>Mobile web applications: additional considerations</h2><p>Building a mobile web site does not offer the same experience as a native application. Users on specific hardware platforms are accustomed to the enhanced experience offered by native applications. Such applications are installed natively and are always available on the launcher surface of the device. Native applications also obey user interface contracts on the device. For instance, on Android the left menu button usually displays a context menu. Users expect this. Web applications can be installed as shortcuts on the launcher surface for most devices, but they do not obey specific user-interface expectations on the deployed device. Another disadvantage to web applications is they have no native access to hardware beyond what is exposed by HTML and related web standards. For instance, there is no direct access to contacts, images, or the camera on the device. For many applications, access to key elements of device hardware is important.</p><h2>Hybrid applications: the best of web and native applications</h2><p>Hybrid applications are completely native applications that embed a platform-specific web browser control. All major mobile platforms including Android, iOS, Windows Phone 8, and Blackberry/RIM support embedding web browser controls as implemented on their platform. Since the wrapper is completely native, users are not often even aware they are interacting with a web application. It is quite possible for the native application to provide a seamless navigation experience.</p><p>It is also possible for web pages displayed in the browser to interact with native hardware through a JavaScript bridge, a form of which is available on every major platform. Using such callbacks to the native platform makes it possible to access contacts, capture or select images, and play media. In fact, anything you can accomplish through native code can be accomplished through the bridge. The bridge code will of course have to be re-written for every target platform, but this is usually a small fraction of your total application code.</p><p>Also, several JavaScript bridge frameworks exist; the most popular is the open source <a href="http://phonegap.com/">PhoneGap</a> platform, which provides a substantial part of this plumbing. We will not be using any frameworks for this purpose. We will instead illustrate the concept with a simple Android wrapper.</p><h2>ASP.NET MVC: an elegant framework for your backend</h2><p>Hybrid applications can be built with any web backend, but we firmly believe ASP.NET MVC is ideally suited<sup>ii</sup> for the implementation of hybrid applications. Below are some aspects that make ASP.NET MVC a good choice for such applications.</p><h3>Clear separation of responsibilities</h3><p>The clear separation of responsibilities afforded by the MVC environment makes it possible to have very precise control over HTML output. This makes it very easy to generate mobile-friendly HTML. There is no built-in, self-contained control model that makes it hard to control the markup produced.</p><h3>Sharing most code with desktop or tablet web clients</h3><p>If you have an existing ASP.NET MVC application that targets desktop browsers, much of the code can be shared with your mobile application. The controller and model code can be shared almost as is. Only the view needs to be changed. It is not difficult to specify a custom view for mobile clients even with the current version of ASP.NET MVC, but the next version of the ASP.NET MVC makes it even simpler. For additional details on mobile-friendly features in the upcoming version of ASP.NET MVC, please refer to <a href="http://www.asp.net/mvc/tutorials/mvc-4/aspnet-mvc-4-mobile-features">ASP.NET MVC</a>.</p><h3>Minimal friction with underlying web development model</h3><p>ASP.NET MVC does not build several layers of abstraction over stateless web applications. Instead, it offers a very simple model that works in alignment with the underlying platform, making it very easy to make AJAX calls or use jQuery on the client. There is no complex abstraction such as ASP.NET Web Forms’ ViewState to worry about.</p><p>In addition to the above, it is also worth pointing out the business and database layers that already exist in your current .NET applications can be effectively reused with ASP.NET MVC applications. ASP.NET MVC is completely agnostic about the business and database layers and can work effectively with any system currently in place.</p><h2>Sample hybrid application</h2><p>We will now walk through a very simple example to illustrate the development of a hybrid application end-to-end using the ASP.NET MVC platform. The sample displays information on students attending a fictional university named Contoso University. There are a couple of general information links as well as access to a student directory where students can be looked up by name. In order to keep the example clear, the sample does not implement any security or error handling. There is no complex code since the objective of the sample is not to showcase the power of the ASP.NET MVC platform, but to showcase its suitability as a backend platform for the development of hybrid, native mobile applications.</p><p>The complete code for this sample is available at <a href="http://bit.ly/mvc-native-mobile-apps">bit.ly/mvc-native-mobile-apps</a>.</p><p><b>Prerequisites to work with the sample code:</b></p><ul> 
 <li>ASP.NET MVC 3 with Visual Studio 2010 (any version including the Express Edition).</li> 
 <li>Functional installation of the Android SDK and the Android Development Tools plugin for Eclipse.</li> 
 <li>Detailed instructions and requirements are available <a href="http://developer.android.com/sdk/requirements.html">here</a>.</li> 
 <li>jQuery and jQuery Mobile. Local copy is not required since the sample code will simply reference the jQuery CDN.</li> 
</ul><h3>The ASP.NET MVC backend</h3><p>In the sample code, the provided _Layout.cshtml contains script references to the jQuery and jQuery Mobile libraries. They are not required to build an ASP.NET MVC mobile application, but they do handle a lot of the grunt work. We use jQuery Mobile in our sample to simplify formatting content for mobile devices.</p><pre><font color="#0000ff">&lt;<font color="#804040">link </font><font color="#ff0000">rel</font>=&quot;stylesheet&quot; <font color="#ff0000">href</font>=&quot;http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css&quot; /&gt;</font><br /><font color="#0000ff">&lt;<font color="#804040">link</font> <font color="#ff0000">href</font>=&quot;<font color="#ff8000">@</font>Url.Content<font color="#804040">(&quot;~/Content/Site.css&quot;</font>)&quot; <font color="#ff0000">rel</font>=&quot;stylesheet&quot; <font color="#ff0000">type</font>=&quot;text/css&quot; /&gt;</font><br /><br /><font color="#0000ff">&lt;<font color="#804040">script</font> <font color="#ff0000">type</font>=&quot;text/javascript&quot; <font color="#ff0000">src</font>=&quot;http://code.jquery.com/jquery-1.6.4.min.js&quot;&gt;&lt;/<font color="#804040">script</font>&gt;</font><br /><font color="#0000ff">&lt;<font color="#804040">script</font> <font color="#ff0000">type</font>=&quot;text/javascript&quot; <font color="#ff0000">src</font>=&quot;http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js&quot;&gt;&lt;/<font color="#804040">script</font>&gt;</font></pre><p>Most mobile web clients assume a web page is sized at about 900 pixels and will automatically scale to display the entire page on the device. With a mobile site optimized for a smaller device, we can provide a hint to the device that it should not scale but should instead use the width of the device. This is accomplished via the use of the viewport meta tag as shown below.</p><pre><font color="#0000ff">&lt;<font color="#804040">meta</font> <font color="#ff0000">name</font>=&quot;viewport&quot; <font color="#ff0000">content</font>=&quot;width=device-width, initial-scale=1.0 &quot;&gt;</font></pre><p>The default index action method on the home controller is mapped to the following view markup.</p><pre><font color="#0000ff">&lt;<font color="#804040">nav</font> &gt;</font><br /><font color="#0000ff">    &lt;<font color="#804040">ul </font><font color="#ff0000">id</font>=&quot;menu&quot; <font color="#ff0000">data-role</font>=&quot;listview&quot;&gt;</font><br /><font color="#0000ff">        &lt;<font color="#804040">li</font>&gt;<font color="#000000"><font color="#ff8000">@</font>Html.ActionLink(<font color="#804040">&quot;About Us&quot;</font>, <font color="#804040">&quot;AboutUs&quot;</font>, <font color="#804040">&quot;Home&quot;</font>)&lt;/</font><font color="#804040">li</font>&gt;</font><br /><font color="#0000ff">        &lt;<font color="#804040">li</font>&gt;<font color="#ff8000">@</font><font color="#000000">Html.ActionLink(<font color="#804040">&quot;Contact Us&quot;</font>, <font color="#804040">&quot;ContactUs&quot;</font>, <font color="#804040">&quot;Home&quot;</font>)</font>&lt;/<font color="#804040">li</font>&gt;</font><br /><font color="#0000ff">        &lt;<font color="#804040">li</font>&gt;<font color="#ff8000">@</font><font color="#000000">Html.ActionLink(<font color="#804040">&quot;Student Directory&quot;</font>, <font color="#804040">&quot;StudentDirectory&quot;</font>, <font color="#804040">&quot;Home&quot;</font>)</font>&lt;/<font color="#804040">li</font>&gt;</font><br /><font color="#0000ff">    &lt;/<font color="#804040">ul</font>&gt;</font><br /><font color="#0000ff">&lt;/<font color="#804040">nav</font>&gt;</font></pre><p>We have a simple unordered list with three action links. We specify the list should be automatically formatted as a list view by the jQuery Mobile runtime using the “data-role=listview” attribute setting. This is all that is required to display the following initial UI on a mobile device.</p><p><img src="http://www.infoq.com/resource/articles/Hybrid-Mobile-Apps-MVC/en/resources/fig11.jpg;jsessionid=CB5EEA3F3EC99B92129AD46D89EBD86E" vspace="3" hspace="3" align="absBottom" alt="" _href="img://fig11.jpg" _p="true" /></p><p><strong>&nbsp;Figure 1. Initial screen</strong></p><p>The jQuery Mobile runtime takes care of formatting it as a list view. As mentioned earlier, jQuery Mobile is not needed. You can pick the formatting and scripting approach that suits your needs best.</p><p>The sample contains the views displayed when the About Us and Contact Us options are invoked. These screens are straightforward and do not require any further explanation.</p><p>The Student Directory link displays a page with student names grouped by starting letter. The page also displays the number of students listed under each letter.</p><p><img src="http://www.infoq.com/resource/articles/Hybrid-Mobile-Apps-MVC/en/resources/1fig2.jpg;jsessionid=CB5EEA3F3EC99B92129AD46D89EBD86E" vspace="3" hspace="3" align="absBottom" alt="" _href="img://1fig2.jpg" _p="true" /></p><p><strong>Figure 2. Student directory initial screen</strong></p><p>Clicking on any option displays a list of students, as seen below.</p><p><img src="http://www.infoq.com/resource/articles/Hybrid-Mobile-Apps-MVC/en/resources/2fig3.jpg;jsessionid=CB5EEA3F3EC99B92129AD46D89EBD86E" vspace="3" hspace="3" align="absBottom" alt="" _href="img://2fig3.jpg" _p="true" /></p><p><strong>&nbsp;Figure 3. Student directory</strong></p><p>The student directory views are also fairly simple. They iterate through and display data in a list. The view displaying student details is shown below.</p><pre><font color="#ff8000">@{</font><br />
&nbsp;&nbsp;&nbsp; ViewBag.Title = <font color="#804040">&quot;Student Directory&quot;</font>;<br />&nbsp;&nbsp;&nbsp; Layout = <font color="#804040">&quot;~/Views/Shared/_Layout.cshtml&quot;</font>;<br /><font color="#0000ff">    var</font> random = <font color="#0000ff">new</font> <font color="#408080">Random</font>();<br /><font color="#ff8000">}</font><br /><br /><font color="#0000ff">&lt;</font><font color="#804040">ul</font> <font color="#ff0000">data-role</font><font color="#0000ff">=&quot;listview&quot;&gt;</font><br /><font color="#ff8000">@</font><font color="#0000ff">foreach</font> (<font color="#0000ff">string</font> student<font color="#0000ff"> in</font> ViewBag.Students)<br />{ <br /><font color="#0000ff">    &lt;<font color="#804040">li</font>&gt;</font><br /><br /><font color="#ff8000">        @</font>{<font color="#0000ff">var</font> number = random.Next(1000, 9999); <font color="#ff8000">}</font><br /><br />        <font color="#0000ff">&lt;</font><font color="#804040">img</font> <font color="#ff0000">src</font><font color="#0000ff">=&quot;<font color="#ff8000">@</font>Url.Content(</font><font color="#804040">&quot;~/Content/images/UserImages/80-80/&quot;</font> <font color="#0000ff">+ student +</font> <font color="#804040">&quot;.jpg&quot;</font><font color="#0000ff">)&quot;</font> <font color="#ff0000">alt</font><font color="#0000ff">=&quot;<font color="#ff8000">@</font>student&quot;/&gt;</font><br /><font color="#0000ff">        &lt;<font color="#804040">h3</font><font color="#000000"><font color="#0000ff">&gt;</font><font color="#ff8000">@</font>student</font>&lt;/<font color="#804040">h3</font>&gt;</font><br /><font color="#0000ff">        &lt;<font color="#804040">h4</font>&gt;<font color="#000000">919-555-<font color="#ff8000">@</font>number</font>&lt;/h4&gt;</font><br /><font color="#0000ff">    &lt;/<font color="#804040">li</font>&gt;</font><br />}<br /><font color="#0000ff">&lt;/<font color="#804040">ul</font>&gt;</font></pre><p>It is a good idea to run the ASP.NET MVC backend in a desktop browser and test it out before proceeding to review the Android wrapper that we will work with next.</p><p>You can also directly test on a mobile browser provided the test site is accessible from your test device. If both the development PC and your test device are on the same network, it is possible to make setting changes to the ASP.NET development browser or IIS Express to allow access to the web application from your test device. Such access is blocked by default.</p><p>An easier, alternate approach is to use a proxy, which simply redirects traffic on an external port to the internal server. This is the approach we often use. The proxy we use is available for download from <a href="https://github.com/jocull/SharpProxy">GitHub</a><sup>iii</sup>.</p><h3>Android wrapper</h3><p>The code for the Android wrapper that hosts the web application inside a native Android application is reproduced below.</p><pre>
package com.syncfusion.contoso;<br /><br /><b><font color="#800000">import</font></b> android<font color="#808000">.</font>app<font color="#808000">.</font>Activity<font color="#800080">;</font><br /><b><font color="#800000">import</font></b> android<font color="#808000">.</font>os<font color="#808000">.</font>Bundle<font color="#800080">;</font><br /><b><font color="#800000">import</font></b> android<font color="#808000">.</font>util<font color="#808000">.</font>Log<font color="#800080">;</font><br /><b><font color="#800000">import</font></b> android<font color="#808000">.</font>view<font color="#808000">.</font>KeyEvent<font color="#800080">;</font><br /><b><font color="#800000">import</font></b> android<font color="#808000">.</font>view<font color="#808000">.</font>View<font color="#800080">;</font><br /><b><font color="#800000">import</font></b> android<font color="#808000">.</font>webkit<font color="#808000">.</font>WebView<font color="#800080">;</font><br /><b><font color="#800000">import</font></b> android<font color="#808000">.</font>webkit<font color="#808000">.</font>WebViewClient<font color="#800080">;</font><br /><br />public class ContosoActivity extends Activity <font color="#800080">{</font><br /><br />&nbsp;&nbsp;&nbsp; WebView mWebView<font color="#800080">;</font><br /><br />&nbsp;&nbsp;&nbsp; private class ContosoWebViewClient extends WebViewClient <font color="#800080">{</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#808040"> @</font>Override<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public boolean shouldOverrideUrlLoading(WebView view, String url) <font color="#800080">{</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.loadUrl(url)<font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><font color="#800000">return</font></b> true<font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">}</font><br /><font color="#800080">&nbsp;&nbsp;&nbsp; }</font><br />&nbsp;&nbsp;&nbsp;&nbsp; <br /><br />&nbsp;&nbsp; <font color="#000080"> /** Called when the activity is first created. */&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><br />&nbsp;&nbsp;&nbsp; <font color="#808040">@</font>Override<br />&nbsp;&nbsp;&nbsp; public <b><font color="#800000">void</font></b> onCreate(Bundle savedInstanceState) <font color="#800080">{</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super<font color="#808000">.</font>onCreate(savedInstanceState)<font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setContentView(R.layout.main)<font color="#800080">;</font><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView <font color="#808000">=</font> (WebView) <b><font color="#800000">this</font></b><font color="#808000">.</font>findViewById(R<font color="#808000">.</font>id<font color="#808000">.</font>webview);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#808080">// Disable scrollbars </font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView<font color="#808000">.</font>setVerticalScrollBarEnabled<font color="#808000">(</font>false<font color="#808000">)</font>;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView<font color="#808000">.</font>setHorizontalScrollBarEnabled<font color="#808000">(</font>false<font color="#808000">)</font>;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#808080">// Scrollbar Overlay Content</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView<font color="#808000">.</font>setScrollBarStyle(View<font color="#808000">.</font>SCROLLBARS_INSIDE_OVERLAY);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView<font color="#808000">.</font>getSettings<font color="#808000">().</font>setJavaScriptEnabled<font color="#808000">(</font>true<font color="#808000">)</font><font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView<font color="#808000">.</font>getSettings<font color="#808000">().</font>setAppCacheEnabled<font color="#808000">(</font>false<font color="#808000">)</font><font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView<font color="#808000">.</font>loadUrl<font color="#808000">(</font><font color="#800000">&quot;<font color="#0000ff">http://your-web-link</font>&quot;</font><font color="#808000">)</font><font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView<font color="#808000">.</font>setWebViewClient(new ContosoWebViewClient<font color="#808000">() )</font><font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp; <font color="#800080">}</font><br /><br />&nbsp;&nbsp;&nbsp; @Override<br />&nbsp;&nbsp;&nbsp; public boolean onKeyDown(<b>int</b> keyCode, KeyEvent event) <font color="#800080">{</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800000"> <b>if</b></font> <font color="#808000">((</font>keyCode <font color="#808000">==</font> KeyEvent<font color="#808000">.</font>KEYCODE_BACK) <font color="#808000">&amp;&amp;</font> mWebView.canGoBack<font color="#808000">())</font><font color="#800080"> {</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mWebView<font color="#808000">.</font>goBack<font color="#808000">()</font><font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><font color="#800000">return</font></b> true<font color="#800080">;</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080"> }</font><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b><font color="#800000">return</font></b> super<font color="#808000">.</font>onKeyDown<font color="#808000">(</font>keyCode, event<font color="#800080"><font color="#808000">)</font>;</font><br /><font color="#800080">&nbsp;&nbsp;&nbsp; }</font><br /><font color="#800080">}</font></pre><p>The code is quite simple to follow.</p><ul> 
 <li>WebView is the Android equivalent of the WebBrowser control. It is a wrapper around the default WebKit-based Android browser.</li> 
 <li>We obtain access to an instance of the Android WebView control (defined in an XML layout file and instantiated by the Android runtime at execution).</li> 
 <li>We enable the use of JavaScript on this WebView instance since JavaScript is disabled by default with the WebView control.</li> 
 <li>We then make a few adjustments to the display of the scrollbar–basically turning it off to mimic the look and feel of a native application.</li> 
 <li>We then load the actual web application using a call to the loadUrl API on the WebView instance. your-web-link should be changed to point to your web application.</li> 
 <li>The last section of the code handles the invocation of the hardware back button and causes the embedded WebView to navigate to the previous page.</li> 
</ul><p>As you can see this code is not tied to the web application in any direct manner and will not change substantially from application to application. You will only need to add additional code when you require access to specific hardware functionality on the device. We do not delve deeper into this topic here but if you are interested in investigating this further, please look up information on the <a href="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)">addJavascriptInterface</a><font size="1">&nbsp;</font>method of the WebView.</p><p>For simplicity, we have described the Android wrapper only. Similar wrappers and extension mechanisms exist on all other major mobile platforms.</p><p><img src="http://www.infoq.com/resource/articles/Hybrid-Mobile-Apps-MVC/en/resources/2fig4.jpg;jsessionid=CB5EEA3F3EC99B92129AD46D89EBD86E" vspace="3" hspace="3" align="absBottom" alt="" _href="img://2fig4.jpg" _p="true" /></p><p><strong>Figure 4. Contact Us page displayed on Android 4.0 Emulator inside a native application shell</strong></p><h2>Conclusion</h2><p>Hybrid applications are a very promising solution worth looking into for any line-of-business mobile application. They are not suited for scenarios where extensive access to native hardware is required (such as with games) but will work very well in most other scenarios. Any solution implemented with a web backend is also more likely to be future-proof. The HTML standard has evolved slowly over the years and is unlikely to dramatically change as proprietary solutions often tend to do. It offers a stable base on which applications can be built with the certainty that they will continue to work for the foreseeable future. Mobile platform vendors are putting an extraordinary amount of effort into the implementation of HTML 5 and related standards. This will also serve to make web applications more powerful and able to accomplish a substantial subset of what is possible with native applications.</p><p>You can leverage your existing .NET web development skills and produce powerful solutions that work on a broad cross-section of devices. At Syncfusion, we are excited by the immense potential offered by hybrid applications.</p><h2>About the Author</h2><p><b><img src="http://www.infoq.com/resource/articles/Hybrid-Mobile-Apps-MVC/en/resources/daniel-jebraj.jpg;jsessionid=CB5EEA3F3EC99B92129AD46D89EBD86E" vspace="3" hspace="3" align="left" alt="" _href="img://daniel-jebraj.jpg" _p="true" />Daniel Jebaraj</b> as Vice President, Daniel Jebaraj leads Syncfusion's Product Development. Daniel oversees overall product development and plans for specific releases. By actively engaging with customers, Daniel ensures that each new product improves based on customer feedback. Previously, as Vice President of Development, Daniel focused on driving product development at Syncfusion. Before joining Syncfusion in 2001, Daniel managed development teams at Rogue Wave Software. Daniel holds a Master's degree in Industrial Engineering from Clemson University.</p><p>&nbsp;</p><p>&nbsp;</p><hr align="left" size="1" width="33%" /><p><sup>i</sup> &nbsp;<a href="http://www.gartner.com/newsroom/id/1862714">Gartner Reveals Top Predictions for IT Organizations and Users for 2012 and Beyond</a>.</p><p><sup>ii</sup> Ignore ASP.NET MVC at Your Own Peril: <a href="http://www.syncfusion.com/resources/techportal/whitepapers/aspnet-mvc">Lessons Learned from the Trenches</a>.</p><p><sup>iii</sup> For further details, please refer to <a href="http://www.codefromjames.com/wordpress/?p=97">Code from James</a>.</p><div class="clearer-space"></div><br><br><br><br><br><br></body></html>